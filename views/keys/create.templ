package keys

import (
	"fmt"

	"github.com/necroskillz/config-service/db"
	"github.com/necroskillz/config-service/views"
	c "github.com/necroskillz/config-service/views/components"
	"github.com/necroskillz/config-service/views/layouts"
)

type CreateKeyData struct {
	views.ViewData

	Name         string `form:"name" validate:"required"`
	Description  string `form:"description"`
	DefaultValue string `form:"defaultValue"`
	ValueTypeID  uint   `form:"valueTypeId" validate:"required"`

	ServiceVersion   db.GetServiceVersionRow
	FeatureVersion   db.GetFeatureVersionRow
	ValueTypeOptions []c.SelectOption
}

templ CreateKeyPage(data CreateKeyData) {
	@layouts.Container() {
		<div class="flex flex-col">
			<h1>Create New Key</h1>
			<p class="text-secondary">Create a new key for { fmt.Sprintf("%s v%d", data.FeatureVersion.FeatureName, data.FeatureVersion.Version) }</p>
			@CreateKeyForm(data)
		</div>
	}
}

templ CreateKeyForm(data CreateKeyData) {
	<div id="create-key-form" class="flex flex-col gap-4 mt-4">
		@c.ErrorMessageContainer()
		<form hx-post={ fmt.Sprintf("/services/%d/features/%d/keys", data.ServiceVersion.ID, data.FeatureVersion.ID) } hx-target="#create-key-form" hx-swap="outerHTML">
			<div class="flex flex-col gap-4">
				@c.FormElement("name", "Name") {
					@c.Input("name", data.Name, c.WithClass(views.ValidationErrorClass(data.ValidationErrors["Name"])))
					@c.ValidationMessage(data.ValidationErrors["Name"])
				}
				@c.FormElement("description", "Description") {
					@c.Textarea("description", data.Description)
				}
				@c.FormElement("valueTypeId", "Value Type") {
					@c.Select("valueTypeId", fmt.Sprintf("%d", data.ValueTypeID), data.ValueTypeOptions)
				}
				@c.FormElement("defaultValue", "Default Value") {
					@c.Input("defaultValue", data.DefaultValue)
				}
			</div>
			<div class="ml-34 mt-8">
				@c.SubmitButton("Create", c.Primary())
			</div>
		</form>
	</div>
}
