package changesets

import (
	"fmt"

	"github.com/necroskillz/config-service/db"
	"github.com/necroskillz/config-service/service"
	"github.com/necroskillz/config-service/views"
	"github.com/necroskillz/config-service/views/components"
	"github.com/necroskillz/config-service/views/layouts"
)

type ChangesetDetailData struct {
	Changeset service.Changeset
}

templ ChangesetDetailPage(data ChangesetDetailData) {
	@layouts.Container() {
		@ChangesetDetail(data)
	}
}

templ ChangesetDetail(data ChangesetDetailData) {
	<div id="changeset-detail">
		<h1>{ fmt.Sprintf("Changeset #%d", data.Changeset.ID) }</h1>
		<div class="flex gap-2 mb-4">
			<span class="font-semibold">State:</span>
			@components.Pill(string(data.Changeset.State))
		</div>
		if len(data.Changeset.ChangesetChanges) > 0 {
			<div class="flex flex-col border border-gray-200 rounded-md">
				for _, change := range data.Changeset.ChangesetChanges {
					<div class="flex flex-col gap-2 border-b border-gray-200 p-4 last:border-b-0">
						@changesetChange(change)
					</div>
				}
			</div>
		} else {
			<div class="text-secondary">You have not made any changes yet</div>
		}
		<div class="flex flex-col gap-4 mt-4">
			@components.ErrorMessageContainer()
			<div class="flex gap-2">
				if (data.Changeset.State == db.ChangesetStateOpen || data.Changeset.State == db.ChangesetStateCommitted) && 
					len(data.Changeset.ChangesetChanges) > 0 &&
					data.Changeset.CanBeAppliedBy(views.User(ctx)) {
					@components.Button("Apply", "button", components.ElementOptions{
						Attributes: templ.Attributes{
							"hx-put":    fmt.Sprintf("/changesets/%d/apply", data.Changeset.ID),
							"hx-target": "#changeset-detail",
							"hx-swap":   "outerHTML",
						},
					})
				}
			</div>
		</div>
	</div>
}

templ changesetChange(change service.ChangesetChange) {
	if change.NewVariationValueID != nil || change.OldVariationValueID != nil {
		@variationValueChange(change)
	} else if change.KeyID != nil {
		@keyChange(change)
	} else if change.FeatureVersionServiceVersionID != nil {
		@featureVersionServiceVersionChange(change)
	} else if change.FeatureVersionID != nil {
		@featureVersionChange(change)
	} else if change.ServiceVersionID != nil {
		@serviceVersionChange(change)
	}
}

templ variationValueChange(change service.ChangesetChange) {
	<div class="flex flex-col gap-2">
		<div>
			{ getChangeTypeText(change.Type) } <span class="font-semibold">Value</span> for
			<a class="link" href={ templ.SafeURL(fmt.Sprintf("/services/%d/features/%d/keys/%d/values", *change.ServiceVersionID, *change.FeatureVersionID, *change.KeyID)) }>
				{ *change.KeyName }
			</a>
			in
			<a class="link" href={ templ.SafeURL(fmt.Sprintf("/services/%d/features/%d", *change.ServiceVersionID, *change.FeatureVersionID)) }>
				{ *change.FeatureName } v{ fmt.Sprint(*change.FeatureVersionID) }
			</a>
		</div>
		if len(change.Variation) > 0 {
			<div class="flex flex-wrap gap-2 mb-2">
				for _, propValue := range change.Variation {
					<span class="px-2 py-1 bg-gray-600 rounded-md text-sm">
						{ propValue }
					</span>
				}
			</div>
		}
		<div class="flex gap-4">
			if change.OldVariationValueID != nil {
				<div class="bg-red-100 line-through text-red-800">
					{ *change.OldVariationValueData }
				</div>
			}
			if change.NewVariationValueID != nil {
				<div class="bg-green-100 text-green-800">
					{ *change.NewVariationValueData }
				</div>
			}
		</div>
	</div>
}

templ keyChange(change service.ChangesetChange) {
	<div>
		{ getChangeTypeText(change.Type) }
		<span class="font-semibold">Key</span>
		<span class={ getChangeTypeClass(change.Type) }>
			<a href={ templ.SafeURL(fmt.Sprintf("/services/%d/features/%d/keys/%d/values", *change.ServiceVersionID, *change.FeatureVersionID, *change.KeyID)) }>
				{ *change.KeyName }
			</a>
		</span>
		for
		<a class="link" href={ templ.SafeURL(fmt.Sprintf("/services/%d/features/%d", *change.ServiceVersionID, *change.FeatureVersionID)) }>
			{ *change.FeatureName } v{ fmt.Sprint(*change.FeatureVersionID) }
		</a>
	</div>
}

templ featureVersionServiceVersionChange(change service.ChangesetChange) {
	<div>
		{ getChangeTypeText(change.Type) }
		<span class="font-semibold">Service-Feature Link</span>
		<span class={ getChangeTypeClass(change.Type) }>
			<a href={ templ.SafeURL(fmt.Sprintf("/services/%d", *change.ServiceVersionID)) }>
				{ *change.ServiceName } v{ fmt.Sprint(*change.ServiceVersionID) }
			</a>
			<span class="mx-2">â†”</span>
			<a href={ templ.SafeURL(fmt.Sprintf("/services/%d/features/%d", *change.ServiceVersionID, *change.FeatureVersionID)) }>
				{ *change.FeatureName } v{ fmt.Sprint(*change.FeatureVersionID) }
			</a>
		</span>
	</div>
}

templ featureVersionChange(change service.ChangesetChange) {
	<div>
		{ getChangeTypeText(change.Type) }
		<span class="font-semibold">Feature Version</span>
		<span class={ getChangeTypeClass(change.Type) }>
			<a href={ templ.SafeURL(fmt.Sprintf("/services/%d/features/%d", *change.ServiceVersionID, *change.FeatureVersionID)) }>
				{ *change.FeatureName } v{ fmt.Sprint(*change.FeatureVersionID) }
			</a>
		</span>
	</div>
}

templ serviceVersionChange(change service.ChangesetChange) {
	<div>
		{ getChangeTypeText(change.Type) }
		<span class="font-semibold">Service Version</span>
		<span class={ getChangeTypeClass(change.Type) }>
			<a href={ templ.SafeURL(fmt.Sprintf("/services/%d", *change.ServiceVersionID)) }>
				{ *change.ServiceName } v{ fmt.Sprint(*change.ServiceVersionID) }
			</a>
		</span>
	</div>
}

func getChangeTypeText(changeType db.ChangesetChangeType) string {
	switch changeType {
	case db.ChangesetChangeTypeCreate:
		return "Created"
	case db.ChangesetChangeTypeUpdate:
		return "Updated"
	case db.ChangesetChangeTypeDelete:
		return "Deleted"
	default:
		return "Unknown"
	}
}

func getChangeTypeClass(changeType db.ChangesetChangeType) string {
	switch changeType {
	case db.ChangesetChangeTypeCreate:
		return "bg-green-100 text-green-800 py-1 px-1"
	case db.ChangesetChangeTypeDelete:
		return "bg-red-100 text-red-800 py-1 px-1"
	default:
		return ""
	}
}
