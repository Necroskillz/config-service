package changesets

import (
	"fmt"

	"github.com/necroskillz/config-service/service"
	"github.com/necroskillz/config-service/views/layouts"
	"github.com/necroskillz/config-service/db"
)

type ChangesetDetailData struct {
	Changeset service.Changeset
}

templ ChangesetDetailPage(data ChangesetDetailData) {
	@layouts.Container() {
		<div>
			<h1>{ fmt.Sprintf("Changeset #%d", data.Changeset.ID) }</h1>
			if len(data.Changeset.ChangesetChanges) > 0 {
				<div class="flex flex-col border border-gray-200 rounded-md">
					for _, change := range data.Changeset.ChangesetChanges {
						<div class="flex flex-col gap-2 border-b border-gray-200 p-4 last:border-b-0">
							@changesetChange(change)
						</div>
					}
				</div>
			} else {
				<div class="text-secondary">You have not made any changes yet</div>
			}
		</div>
	}
}

templ changesetChange(change service.ChangesetChange) {
	if change.NewVariationValueID != nil || change.OldVariationValueID != nil {
		@variationValueChange(change)
	} else if change.KeyID != nil {
		@keyChange(change)
	} else if change.FeatureVersionServiceVersionID != nil {
		@featureVersionServiceVersionChange(change)
	} else if change.FeatureVersionID != nil {
		@featureVersionChange(change)
	} else if change.ServiceVersionID != nil {
		@serviceVersionChange(change)
	}
}

templ variationValueChange(change service.ChangesetChange) {
	<div class="flex flex-col gap-2">
		<div class="font-semibold">
			{ getChangeTypeText(change.Type) } Value for { fmt.Sprintf("%s in %s v%d", *change.KeyName, *change.FeatureName, *change.FeatureVersionID) }
		</div>
		if len(change.Variation) > 0 {
			<div class="flex flex-wrap gap-2 mb-2">
				for _, propValue := range change.Variation {
					<span class="px-2 py-1 bg-gray-600 rounded-md text-sm">
						{ propValue }
					</span>
				}
			</div>
		}
		<div class="flex gap-4">
			if change.OldVariationValueID != nil {
				<div class="bg-red-100 line-through text-red-800">
					{ *change.OldVariationValueData }
				</div>
			}
			if change.NewVariationValueID != nil {
				<div class="bg-green-100 text-green-800">
					{ *change.NewVariationValueData }
				</div>
			}
		</div>
	</div>
}

templ keyChange(change service.ChangesetChange) {
	<div>
		<span class="font-semibold">{ getChangeTypeText(change.Type) } Key</span>
		<span class={ getChangeTypeClass(change.Type) }>{ *change.KeyName }</span>
		<span class="font-semibold">for { *change.FeatureName } v{ fmt.Sprint(*change.FeatureVersionID) }</span>
	</div>
}

templ featureVersionServiceVersionChange(change service.ChangesetChange) {
	<div>
		<span class="font-semibold">{ getChangeTypeText(change.Type) } Service-Feature Link</span>
		<span class={ getChangeTypeClass(change.Type) }>
			{ *change.ServiceName } v{ fmt.Sprint(*change.ServiceVersionID) }
			<span class="mx-2">â†”</span>
			{ *change.FeatureName } v{ fmt.Sprint(*change.FeatureVersionID) }
		</span>
	</div>
}

templ featureVersionChange(change service.ChangesetChange) {
	<div>
		<span class="font-semibold">{ getChangeTypeText(change.Type) } Feature Version</span>
		<span class={ getChangeTypeClass(change.Type) }>
			{ *change.FeatureName } v{ fmt.Sprint(*change.FeatureVersionID) }
		</span>
	</div>
}

templ serviceVersionChange(change service.ChangesetChange) {
	<div>
		<span class="font-semibold">{ getChangeTypeText(change.Type) } Service Version</span>
		<span class={ getChangeTypeClass(change.Type) }>
			{ *change.ServiceName } v{ fmt.Sprint(*change.ServiceVersionID) }
		</span>
	</div>
}

func getChangeTypeText(changeType db.ChangesetChangeType) string {
	switch changeType {
	case db.ChangesetChangeTypeCreate:
		return "Created"
	case db.ChangesetChangeTypeUpdate:
		return "Updated"
	case db.ChangesetChangeTypeDelete:
		return "Deleted"
	default:
		return "Unknown"
	}
}

func getChangeTypeClass(changeType db.ChangesetChangeType) string {
	switch changeType {
	case db.ChangesetChangeTypeCreate:
		return "bg-green-100 text-green-800 py-1 px-1"
	case db.ChangesetChangeTypeDelete:
		return "bg-red-100 text-red-800 py-1 px-1"
	default:
		return ""
	}
}
