package components

import (
	"fmt"
	"github.com/necroskillz/config-service/service"
	"strings"
)

templ Input(name string, value string, options ElementOptions) {
	<input
		type="text"
		@input="onInputToggleValidation($event, $refs.validationMessage, submittedValue)"
		x-init={ fmt.Sprintf(`submittedValue = "%s"`, value) }
		name={ name }
		{ options.Attributes... }
		class={ "w-full border-1 border-gray-300 rounded-md px-2 py-1", options.Classes }
		value={ value }
	/>
}

templ Textarea(name string, value string, options ElementOptions) {
	<textarea
		name={ name }
		@input="onInputToggleValidation($event, $refs.validationMessage, submittedValue)"
		x-init={ fmt.Sprintf(`submittedValue = "%s"`, value) }
		{ options.Attributes... }
		class={ "w-full border-1 border-gray-300 rounded-md px-2 py-1", options.Classes }
	>{ value }</textarea>
}

type SelectOption struct {
	Value string
	Text  string
}

templ Select(name string, value string, options []SelectOption, elementOptions ElementOptions) {
	<select name={ name } { elementOptions.Attributes... } class={ "border-1 border-gray-300 rounded-md px-2 py-1", elementOptions.Classes }>
		for _, option := range options {
			<option { templ.Attributes{"selected": option.Value == value} ... } class="text-black" value={ option.Value }>{ option.Text }</option>
		}
	</select>
}

func makeIndentedText(text string, indent int, isLast bool) string {
	if indent == 0 {
		return text
	}

	sb := strings.Builder{}

	for i := 0; i < indent; i++ {
		sb.WriteString(" ")
	}

	if isLast {
		sb.WriteString("╚")
	} else {
		sb.WriteString("╠")
	}

	sb.WriteString(" ")
	sb.WriteString(text)

	return sb.String()
}

func makeIndentedSelectOptions(indent int, values []*service.VariationHierarchyValue) []SelectOption {
	options := []SelectOption{}
	last := len(values) - 1

	for i, value := range values {
		options = append(options, SelectOption{
			Value: value.Value,
			Text:  makeIndentedText(value.Value, indent, i == last),
		})

		if len(value.Children) > 0 {
			options = append(options, makeIndentedSelectOptions(indent+1, value.Children)...)
		}
	}

	return options
}

func variationSelectOptions(property *service.VariationHierarchyProperty) []SelectOption {
	options := []SelectOption{
		{
			Value: "any",
			Text:  "any",
		},
	}

	options = append(options, makeIndentedSelectOptions(0, property.Values)...)

	return options
}

templ VariationSelect(property *service.VariationHierarchyProperty, value string, options ElementOptions) {
	@Select(property.Name, value, variationSelectOptions(property), options)
}
