package services

import (
	"fmt"

	"github.com/necroskillz/config-service/constants"
	"github.com/necroskillz/config-service/db"
	"github.com/necroskillz/config-service/views"
	c "github.com/necroskillz/config-service/views/components"
	"github.com/necroskillz/config-service/views/layouts"
)

type FeatureDetailData struct {
	ServiceVersion       db.GetServiceVersionRow
	FeatureVersion       db.GetFeatureVersionRow
	Keys                 []db.Key
	OtherFeatureVersions []db.GetFeatureVersionsLinkedToServiceVersionRow
}

templ FeatureDetailPage(data FeatureDetailData) {
	@layouts.Container() {
		{{ permission := views.User(ctx).GetPermissionForFeature(data.ServiceVersion.ServiceID, data.FeatureVersion.FeatureID) }}
		<div class="flex flex-col">
			<h1>
				{ data.FeatureVersion.FeatureName }
				@c.Pill(fmt.Sprintf("v%d", data.FeatureVersion.Version))
			</h1>
			<div class="text-secondary">{ data.FeatureVersion.FeatureDescription }</div>
			<div class="flex flex-row gap-2 mt-4">
				@c.Dropdown() {
					@c.DropdownButton("Versions", c.WithClass("bg-gray-300 text-gray-900 px-4 py-1 rounded-md"))
					@c.DropdownMenu("left", c.WithClass("w-32")) {
						for _, otherFeatureVersion := range data.OtherFeatureVersions {
							if otherFeatureVersion.ID == data.FeatureVersion.ID {
								@c.DropdownMenuText(fmt.Sprintf("v%d", otherFeatureVersion.Version), c.WithClass("font-bold"))
							} else {
								@c.DropdownMenuLink(fmt.Sprintf("v%d", otherFeatureVersion.Version), fmt.Sprintf("/services/%d/features/%d", data.ServiceVersion.ID, otherFeatureVersion.ID))
							}
						}
					}
				}
				if permission == constants.PermissionAdmin {
					@c.LinkButton("Create New Key", fmt.Sprintf("/services/%d/features/%d/keys/create", data.ServiceVersion.ID, data.FeatureVersion.ID))
				}
			</div>
			<div class="flex flex-col border border-gray-200 rounded-md mt-4">
				for _, key := range data.Keys {
					<div class="flex flex-col gap-2 border-b border-gray-200 p-4 last:border-b-0">
						<h2 class="text-lg font-bold">
							<a href={ templ.SafeURL(fmt.Sprintf("/services/%d/features/%d/keys/%d/values", data.ServiceVersion.ID, data.FeatureVersion.ID, key.ID)) }>{ key.Name }</a>
						</h2>
						if key.Description != nil {
							<p class="text-sm text-secondary">{ *key.Description }</p>
						}
					</div>
				}
			</div>
		</div>
	}
}
