package services

import (
	"fmt"

	"github.com/necroskillz/config-service/db"
	"github.com/necroskillz/config-service/views"
	c "github.com/necroskillz/config-service/views/components"
	"github.com/necroskillz/config-service/views/layouts"
)

type CreateFeatureData struct {
	views.ViewData

	Name        string `form:"name" validate:"required,feature_name_free"`
	Description string `form:"description" validate:"required"`

	ServiceVersion db.GetServiceVersionRow
}

templ CreateFeaturePage(data CreateFeatureData) {
	@layouts.Container() {
		<div class="flex flex-col">
			<h1>Create New Feature</h1>
			<p class="text-secondary">Created feature will be linked to version { fmt.Sprintf("%d", data.ServiceVersion.Version) } of { data.ServiceVersion.ServiceName }</p>
			@CreateFeatureForm(data)
		</div>
	}
}

templ CreateFeatureForm(data CreateFeatureData) {
	<div id="create-feature-form" class="flex flex-col gap-4 mt-4">
		@c.ErrorMessageContainer()
		<form hx-post={ fmt.Sprintf("/services/%d/features", data.ServiceVersion.ID) } hx-target="#create-feature-form" hx-swap="outerHTML">
			<div class="flex flex-col gap-4">
				@c.FormElement("name", "Name") {
					@c.Input("name", data.Name, c.WithClass(views.ValidationErrorClass(data.ValidationErrors["Name"])))
					@c.ValidationMessage(data.ValidationErrors["Name"])
				}
				@c.FormElement("description", "Description") {
					@c.Textarea("description", data.Description, c.WithClass(views.ValidationErrorClass(data.ValidationErrors["Description"])))
					@c.ValidationMessage(data.ValidationErrors["Description"])
				}
			</div>
			<div class="ml-34 mt-8">
				@c.SubmitButton("Create", c.Primary())
			</div>
		</form>
	</div>
}
