package values

import (
	"github.com/necroskillz/config-service/constants"
	"github.com/necroskillz/config-service/model"
	"github.com/necroskillz/config-service/service"
	"github.com/necroskillz/config-service/views"
	"github.com/necroskillz/config-service/views/components"
)

type ValueMatrixData struct {
	ServiceVersionID uint
	FeatureVersionID uint
	Key              *model.Key
	Properties       []*service.VariationHierarchyProperty
	Values           []service.EvaluatedVariationValue
}

templ ValueMatrixPage(data ValueMatrixData) {
	<div class="flex flex-col gap-4">
		<h1>{ data.Key.Name }</h1>
		if data.Key.Description != nil {
			<p class="text-secondary">{ *data.Key.Description }</p>
		}
		@components.ErrorMessageContainer()
		<div id="value-matrix" class="overflow-x-auto" x-data="{ addValue: false }">
			@ValueMatrix(data)
		</div>
	</div>
}

templ ValueMatrix(data ValueMatrixData) {
	<form id="value-form">
		{{
			user := views.User(ctx)
			isKeyAdmin := user.GetPermissionForKey(data.ServiceVersionID, data.FeatureVersionID, data.Key.ID) == constants.PermissionAdmin
		}}
		<table class="border-collapse">
			<thead>
				<tr>
					<th class="border px-4 py-2 text-left max-w-[400px] min-w-[200px]">Value</th>
					for _, prop := range data.Properties {
						<th class="border px-4 py-2 text-left min-w-[120px]">{ prop.Name }</th>
					}
					<th class="border px-4 py-2 text-left min-w-[120px]"></th>
				</tr>
			</thead>
			<tbody>
				for _, value := range data.Values {
					<tr>
						<td class="border px-4 py-2 break-words max-w-[400px]">
							if value.Value != nil {
								{ *value.Value }
							} else {
								<span>NULL</span>
							}
						</td>
						for _, prop := range data.Properties {
							<td class="border px-4 py-2">
								if propValue, exists := value.Variation[prop.Name]; exists {
									{ propValue }
								} else {
									<span>any</span>
								}
							</td>
							<td class="border px-4 py-2">
								if isKeyAdmin {
									@components.Button("Delete", "button", components.ElementOptions{})
								}
							</td>
						}
					</tr>
				}
				<tr id="add-row" x-show="addValue" x-init="addValue = false">
					@ValueForm(ValueFormData{
						ServiceVersionID: data.ServiceVersionID,
						FeatureVersionID: data.FeatureVersionID,
						KeyID:            data.Key.ID,
						Value:            "",
						Variation:        make(map[string]string),
						Properties:       data.Properties,
					})
				</tr>
			</tbody>
		</table>
		if isKeyAdmin {
			<div x-show="!addValue" class="mt-4">
				@components.Button("Add Value", "button", components.ElementOptions{
					Attributes: templ.Attributes{"@click": "addValue = true"},
				})
			</div>
		}
	</form>
}
