package values

import (
	"fmt"
	"github.com/necroskillz/config-service/constants"
	"github.com/necroskillz/config-service/db"
	"github.com/necroskillz/config-service/service"
	"github.com/necroskillz/config-service/views"
	c "github.com/necroskillz/config-service/views/components"
)

type ValueMatrixData struct {
	ServiceVersionID uint
	FeatureVersionID uint
	Key              db.Key
	Properties       []*service.VariationHierarchyProperty
	Values           []service.EvaluatedVariationValue
}

templ ValueMatrixPage(data ValueMatrixData) {
	<div class="flex flex-col gap-4">
		<h1>{ data.Key.Name }</h1>
		if data.Key.Description != nil {
			<p class="text-secondary">{ *data.Key.Description }</p>
		}
		@c.ErrorMessageContainer()
		<div id="value-matrix" class="overflow-x-auto" x-data="{ addValue: false }">
			@ValueMatrix(data)
		</div>
	</div>
}

templ ValueMatrix(data ValueMatrixData) {
	{{ user := views.User(ctx) }}
	<table class="border-collapse">
		<thead>
			<tr>
				<th class="border px-4 py-2 text-left max-w-[400px] min-w-[200px]">Value</th>
				for _, prop := range data.Properties {
					<th class="border px-4 py-2 text-left min-w-[120px]">{ prop.Name }</th>
				}
				<th class="border px-4 py-2 text-left min-w-[120px]"></th>
			</tr>
		</thead>
		<tbody>
			for i, value := range data.Values {
				<tr id={ fmt.Sprintf("value-%d", i) }>
					<td class="border px-4 py-2 break-words max-w-[400px]">
						if value.Value != nil {
							{ *value.Value }
						} else {
							<span>NULL</span>
						}
					</td>
					for _, prop := range data.Properties {
						<td class="border px-4 py-2">
							if propValue, exists := value.Variation[prop.ID]; exists {
								{ propValue }
							} else {
								<span>any</span>
							}
						</td>
						<td class="border px-4 py-2">
							if user.GetPermissionForValue(data.ServiceVersionID, data.FeatureVersionID, data.Key.ID, value.Variation) >= constants.PermissionEditor {
								<div class="flex gap-2">
									@c.Button("Edit", "button",
										c.WithAttribute("hx-get", fmt.Sprintf("/services/%d/features/%d/keys/%d/values/%d/edit", data.ServiceVersionID, data.FeatureVersionID, data.Key.ID, value.ID)),
										c.WithAttribute("hx-target", fmt.Sprintf("#value-%d", i)),
									)
									if len(value.Variation) > 0 {
										@c.Button("Delete", "button",
											c.WithAttribute("hx-delete", fmt.Sprintf("/services/%d/features/%d/keys/%d/values/%d", data.ServiceVersionID, data.FeatureVersionID, data.Key.ID, value.ID)),
											c.WithAttribute("hx-target", fmt.Sprintf("#value-%d", i)),
											c.WithAttribute("hx-swap", "outerHTML"),
										)
									}
								</div>
							}
						</td>
					}
				</tr>
			}
			<tr id="add-row" x-show="addValue">
				@ValueForm(ValueFormData{
					ServiceVersionID: data.ServiceVersionID,
					FeatureVersionID: data.FeatureVersionID,
					KeyID:            data.Key.ID,
					Value:            "",
					Variation:        make(map[string]string),
					Properties:       data.Properties,
				})
			</tr>
		</tbody>
	</table>
	if user.HasPermissionForNestedEntity(data.ServiceVersionID, data.FeatureVersionID, data.Key.ID) {
		<div x-show="!addValue" class="mt-4">
			@c.Button("Add Value", "button", c.WithAttribute("@click", "addValue = true"))
		</div>
	}
}
