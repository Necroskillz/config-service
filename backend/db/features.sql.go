// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: features.sql

package db

import (
	"context"
	"time"
)

const createFeature = `-- name: CreateFeature :one
INSERT INTO features(name, description, service_id)
    VALUES ($1, $2, $3)
RETURNING
    id
`

type CreateFeatureParams struct {
	Name        string
	Description string
	ServiceID   uint
}

func (q *Queries) CreateFeature(ctx context.Context, arg CreateFeatureParams) (uint, error) {
	row := q.db.QueryRow(ctx, createFeature, arg.Name, arg.Description, arg.ServiceID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createFeatureVersion = `-- name: CreateFeatureVersion :one
INSERT INTO feature_versions(feature_id, version, valid_from)
    VALUES ($1, $2, $3)
RETURNING
    id
`

type CreateFeatureVersionParams struct {
	FeatureID uint
	Version   int
	ValidFrom *time.Time
}

func (q *Queries) CreateFeatureVersion(ctx context.Context, arg CreateFeatureVersionParams) (uint, error) {
	row := q.db.QueryRow(ctx, createFeatureVersion, arg.FeatureID, arg.Version, arg.ValidFrom)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createFeatureVersionServiceVersion = `-- name: CreateFeatureVersionServiceVersion :one
INSERT INTO feature_version_service_versions(service_version_id, feature_version_id)
    VALUES ($1, $2)
RETURNING
    id
`

type CreateFeatureVersionServiceVersionParams struct {
	ServiceVersionID uint
	FeatureVersionID uint
}

func (q *Queries) CreateFeatureVersionServiceVersion(ctx context.Context, arg CreateFeatureVersionServiceVersionParams) (uint, error) {
	row := q.db.QueryRow(ctx, createFeatureVersionServiceVersion, arg.ServiceVersionID, arg.FeatureVersionID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteFeature = `-- name: DeleteFeature :exec
DELETE FROM features
WHERE id = $1
`

func (q *Queries) DeleteFeature(ctx context.Context, featureID uint) error {
	_, err := q.db.Exec(ctx, deleteFeature, featureID)
	return err
}

const deleteFeatureVersion = `-- name: DeleteFeatureVersion :exec
DELETE FROM feature_versions
WHERE id = $1
`

func (q *Queries) DeleteFeatureVersion(ctx context.Context, featureVersionID uint) error {
	_, err := q.db.Exec(ctx, deleteFeatureVersion, featureVersionID)
	return err
}

const deleteFeatureVersionServiceVersion = `-- name: DeleteFeatureVersionServiceVersion :exec
DELETE FROM feature_version_service_versions
WHERE id = $1
`

func (q *Queries) DeleteFeatureVersionServiceVersion(ctx context.Context, featureVersionServiceVersionID uint) error {
	_, err := q.db.Exec(ctx, deleteFeatureVersionServiceVersion, featureVersionServiceVersionID)
	return err
}

const endFeatureVersionServiceVersionValidity = `-- name: EndFeatureVersionServiceVersionValidity :exec
UPDATE
    feature_version_service_versions
SET
    valid_to = $1
WHERE
    id = $2
`

type EndFeatureVersionServiceVersionValidityParams struct {
	ValidTo                        *time.Time
	FeatureVersionServiceVersionID uint
}

func (q *Queries) EndFeatureVersionServiceVersionValidity(ctx context.Context, arg EndFeatureVersionServiceVersionValidityParams) error {
	_, err := q.db.Exec(ctx, endFeatureVersionServiceVersionValidity, arg.ValidTo, arg.FeatureVersionServiceVersionID)
	return err
}

const endFeatureVersionValidity = `-- name: EndFeatureVersionValidity :exec
UPDATE
    feature_versions
SET
    valid_to = $1
WHERE
    id = $2
`

type EndFeatureVersionValidityParams struct {
	ValidTo          *time.Time
	FeatureVersionID uint
}

func (q *Queries) EndFeatureVersionValidity(ctx context.Context, arg EndFeatureVersionValidityParams) error {
	_, err := q.db.Exec(ctx, endFeatureVersionValidity, arg.ValidTo, arg.FeatureVersionID)
	return err
}

const getFeatureIDByName = `-- name: GetFeatureIDByName :one
SELECT
    id
FROM
    features
WHERE
    name = $1
`

func (q *Queries) GetFeatureIDByName(ctx context.Context, name string) (uint, error) {
	row := q.db.QueryRow(ctx, getFeatureIDByName, name)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getFeatureVersion = `-- name: GetFeatureVersion :one
WITH last_feature_versions AS (
    SELECT
        fv.feature_id,
        MAX(fv.version)::int AS last_version
    FROM
        feature_versions fv
        JOIN valid_feature_versions_in_changeset($1) vfv ON vfv.id = fv.id
    GROUP BY
        fv.feature_id
),
links AS (
    SELECT
        fvsv.feature_version_id,
        BOOL_OR(sv.published)::boolean AS published,
        COUNT(*)::int AS link_count
    FROM
        feature_version_service_versions fvsv
        JOIN service_versions sv ON sv.id = fvsv.service_version_id
        JOIN valid_links_in_changeset($1) vl ON vl.id = fvsv.id
    GROUP BY
        fvsv.feature_version_id
)
SELECT
    fv.id, fv.created_at, fv.valid_from, fv.valid_to, fv.version, fv.feature_id,
    f.name AS feature_name,
    f.description AS feature_description,
    f.service_id,
    lfv.last_version AS last_version,
    COALESCE(l.published, FALSE) AS linked_to_published_service_version,
    COALESCE(l.link_count, 0) AS service_version_link_count
FROM
    feature_versions fv
    JOIN features f ON f.id = fv.feature_id
    JOIN last_feature_versions lfv ON lfv.feature_id = fv.feature_id
    JOIN valid_feature_versions_in_changeset($1) vfv ON vfv.id = fv.id
    LEFT JOIN links l ON l.feature_version_id = fv.id
WHERE
    fv.id = $2
LIMIT 1
`

type GetFeatureVersionParams struct {
	ChangesetID      uint
	FeatureVersionID uint
}

type GetFeatureVersionRow struct {
	ID                              uint
	CreatedAt                       time.Time
	ValidFrom                       *time.Time
	ValidTo                         *time.Time
	Version                         int
	FeatureID                       uint
	FeatureName                     string
	FeatureDescription              string
	ServiceID                       uint
	LastVersion                     int
	LinkedToPublishedServiceVersion bool
	ServiceVersionLinkCount         int
}

func (q *Queries) GetFeatureVersion(ctx context.Context, arg GetFeatureVersionParams) (GetFeatureVersionRow, error) {
	row := q.db.QueryRow(ctx, getFeatureVersion, arg.ChangesetID, arg.FeatureVersionID)
	var i GetFeatureVersionRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ValidFrom,
		&i.ValidTo,
		&i.Version,
		&i.FeatureID,
		&i.FeatureName,
		&i.FeatureDescription,
		&i.ServiceID,
		&i.LastVersion,
		&i.LinkedToPublishedServiceVersion,
		&i.ServiceVersionLinkCount,
	)
	return i, err
}

const getFeatureVersionPermissionData = `-- name: GetFeatureVersionPermissionData :many
SELECT
    p.id,
    p.kind,
    p.permission,
    p.service_id,
    fv.feature_id AS feature_id,
    k.id AS key_id,
    p.variation_context_id,
    p.user_id,
    p.user_group_id
FROM
    permissions p
    JOIN feature_versions fv ON fv.feature_id = p.feature_id
    JOIN keys k ON k.id = p.key_id AND k.feature_version_id = fv.id
    JOIN valid_keys_in_changeset($1) vk ON vk.id = k.id
WHERE
    fv.id = $2
`

type GetFeatureVersionPermissionDataParams struct {
	ChangesetID      uint
	FeatureVersionID uint
}

type GetFeatureVersionPermissionDataRow struct {
	ID                 uint
	Kind               PermissionKind
	Permission         PermissionLevel
	ServiceID          uint
	FeatureID          uint
	KeyID              uint
	VariationContextID *uint
	UserID             *uint
	UserGroupID        *uint
}

func (q *Queries) GetFeatureVersionPermissionData(ctx context.Context, arg GetFeatureVersionPermissionDataParams) ([]GetFeatureVersionPermissionDataRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionPermissionData, arg.ChangesetID, arg.FeatureVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionPermissionDataRow
	for rows.Next() {
		var i GetFeatureVersionPermissionDataRow
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Permission,
			&i.ServiceID,
			&i.FeatureID,
			&i.KeyID,
			&i.VariationContextID,
			&i.UserID,
			&i.UserGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureVersionServiceVersionLink = `-- name: GetFeatureVersionServiceVersionLink :one
SELECT
    fvsv.id,
    csc.changeset_id AS created_in_changeset_id
FROM
    feature_version_service_versions fvsv
    JOIN changeset_changes csc ON csc.feature_version_service_version_id = fvsv.id
        AND csc.type = 'create'
        AND csc.kind = 'feature_version_service_version'
    JOIN valid_links_in_changeset($1) vl ON vl.id = fvsv.id
WHERE
    fvsv.feature_version_id = $2
    AND fvsv.service_version_id = $3
`

type GetFeatureVersionServiceVersionLinkParams struct {
	ChangesetID      uint
	FeatureVersionID uint
	ServiceVersionID uint
}

type GetFeatureVersionServiceVersionLinkRow struct {
	ID                   uint
	CreatedInChangesetID uint
}

func (q *Queries) GetFeatureVersionServiceVersionLink(ctx context.Context, arg GetFeatureVersionServiceVersionLinkParams) (GetFeatureVersionServiceVersionLinkRow, error) {
	row := q.db.QueryRow(ctx, getFeatureVersionServiceVersionLink, arg.ChangesetID, arg.FeatureVersionID, arg.ServiceVersionID)
	var i GetFeatureVersionServiceVersionLinkRow
	err := row.Scan(&i.ID, &i.CreatedInChangesetID)
	return i, err
}

const getFeatureVersionValidatorData = `-- name: GetFeatureVersionValidatorData :many
SELECT
    k.id AS key_id,
    v.validator_type,
    v.parameter,
    v.error_text
FROM
    value_validators v
    JOIN keys k ON k.id = v.key_id
    JOIN valid_keys_in_changeset($1) vk ON vk.id = k.id
WHERE
    k.feature_version_id = $2
`

type GetFeatureVersionValidatorDataParams struct {
	ChangesetID      uint
	FeatureVersionID uint
}

type GetFeatureVersionValidatorDataRow struct {
	KeyID         uint
	ValidatorType ValueValidatorType
	Parameter     *string
	ErrorText     *string
}

func (q *Queries) GetFeatureVersionValidatorData(ctx context.Context, arg GetFeatureVersionValidatorDataParams) ([]GetFeatureVersionValidatorDataRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionValidatorData, arg.ChangesetID, arg.FeatureVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionValidatorDataRow
	for rows.Next() {
		var i GetFeatureVersionValidatorDataRow
		if err := rows.Scan(
			&i.KeyID,
			&i.ValidatorType,
			&i.Parameter,
			&i.ErrorText,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureVersionValuesData = `-- name: GetFeatureVersionValuesData :many
SELECT
    vv.data,
    vv.variation_context_id,
    k.id AS key_id,
    k.name AS key_name,
    k.value_type_id AS key_value_type_id,
    k.description AS key_description
FROM
    variation_values vv
    JOIN keys k ON k.id = vv.key_id
    JOIN valid_keys_in_changeset($1) vk ON vk.id = k.id
    JOIN valid_variation_values_in_changeset($1) vvv ON vvv.id = vv.id
WHERE
    k.feature_version_id = $2
`

type GetFeatureVersionValuesDataParams struct {
	ChangesetID      uint
	FeatureVersionID uint
}

type GetFeatureVersionValuesDataRow struct {
	Data               string
	VariationContextID uint
	KeyID              uint
	KeyName            string
	KeyValueTypeID     uint
	KeyDescription     *string
}

func (q *Queries) GetFeatureVersionValuesData(ctx context.Context, arg GetFeatureVersionValuesDataParams) ([]GetFeatureVersionValuesDataRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionValuesData, arg.ChangesetID, arg.FeatureVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionValuesDataRow
	for rows.Next() {
		var i GetFeatureVersionValuesDataRow
		if err := rows.Scan(
			&i.Data,
			&i.VariationContextID,
			&i.KeyID,
			&i.KeyName,
			&i.KeyValueTypeID,
			&i.KeyDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureVersionsForServiceVersion = `-- name: GetFeatureVersionsForServiceVersion :many
SELECT
    fv.id,
    fv.feature_id,
    fv.version,
    f.name AS feature_name,
    f.description AS feature_description,
    csc.changeset_id AS linked_in_changeset_id
FROM
    feature_version_service_versions fvsv
    JOIN feature_versions fv ON fv.id = fvsv.feature_version_id
    JOIN features f ON f.id = fv.feature_id
    JOIN changeset_changes csc ON csc.feature_version_service_version_id = fvsv.id
        AND csc.type = 'create'
        AND csc.kind = 'feature_version_service_version'
    JOIN valid_links_in_changeset($1) vl ON vl.id = fvsv.id
WHERE
    fvsv.service_version_id = $2
ORDER BY
    f.name
`

type GetFeatureVersionsForServiceVersionParams struct {
	ChangesetID      uint
	ServiceVersionID uint
}

type GetFeatureVersionsForServiceVersionRow struct {
	ID                  uint
	FeatureID           uint
	Version             int
	FeatureName         string
	FeatureDescription  string
	LinkedInChangesetID uint
}

func (q *Queries) GetFeatureVersionsForServiceVersion(ctx context.Context, arg GetFeatureVersionsForServiceVersionParams) ([]GetFeatureVersionsForServiceVersionRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionsForServiceVersion, arg.ChangesetID, arg.ServiceVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionsForServiceVersionRow
	for rows.Next() {
		var i GetFeatureVersionsForServiceVersionRow
		if err := rows.Scan(
			&i.ID,
			&i.FeatureID,
			&i.Version,
			&i.FeatureName,
			&i.FeatureDescription,
			&i.LinkedInChangesetID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureVersionsLinkableToServiceVersion = `-- name: GetFeatureVersionsLinkableToServiceVersion :many
SELECT
    fv.id,
    fv.version,
    f.name AS feature_name,
    f.description AS feature_description
FROM
    feature_versions fv
    JOIN features f ON f.id = fv.feature_id
    JOIN valid_feature_versions_in_changeset($1) vfv ON vfv.id = fv.id
WHERE
    f.service_id = $2
    AND NOT EXISTS (
        SELECT
            1
        FROM
            feature_version_service_versions ifvsv
            JOIN feature_versions ifv ON ifv.id = ifvsv.feature_version_id
            JOIN valid_links_in_changeset($1) vl ON vl.id = ifvsv.id
        WHERE
            ifv.feature_id = f.id
            AND ifvsv.service_version_id = $3)
ORDER BY
    f.name,
    fv.version
`

type GetFeatureVersionsLinkableToServiceVersionParams struct {
	ChangesetID      uint
	ServiceID        uint
	ServiceVersionID uint
}

type GetFeatureVersionsLinkableToServiceVersionRow struct {
	ID                 uint
	Version            int
	FeatureName        string
	FeatureDescription string
}

func (q *Queries) GetFeatureVersionsLinkableToServiceVersion(ctx context.Context, arg GetFeatureVersionsLinkableToServiceVersionParams) ([]GetFeatureVersionsLinkableToServiceVersionRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionsLinkableToServiceVersion, arg.ChangesetID, arg.ServiceID, arg.ServiceVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionsLinkableToServiceVersionRow
	for rows.Next() {
		var i GetFeatureVersionsLinkableToServiceVersionRow
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeatureName,
			&i.FeatureDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVersionsOfFeatureForServiceVersion = `-- name: GetVersionsOfFeatureForServiceVersion :many
WITH latest_links AS (
    SELECT
        fvsv.feature_version_id,
        MAX(fvsv.service_version_id)::bigint AS service_version_id
    FROM
        feature_version_service_versions fvsv
        JOIN valid_links_in_changeset($1) vl ON vl.id = fvsv.id
    GROUP BY
        fvsv.feature_version_id
)
SELECT
    fv.id,
    fv.version,
    ll.service_version_id AS service_version_id
FROM
    feature_versions fv
    JOIN latest_links ll ON ll.feature_version_id = fv.id
    JOIN valid_feature_versions_in_changeset($1) vfv ON vfv.id = fv.id
WHERE
    fv.feature_id = $2
ORDER BY
    fv.version
`

type GetVersionsOfFeatureForServiceVersionParams struct {
	ChangesetID uint
	FeatureID   uint
}

type GetVersionsOfFeatureForServiceVersionRow struct {
	ID               uint
	Version          int
	ServiceVersionID uint
}

func (q *Queries) GetVersionsOfFeatureForServiceVersion(ctx context.Context, arg GetVersionsOfFeatureForServiceVersionParams) ([]GetVersionsOfFeatureForServiceVersionRow, error) {
	rows, err := q.db.Query(ctx, getVersionsOfFeatureForServiceVersion, arg.ChangesetID, arg.FeatureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVersionsOfFeatureForServiceVersionRow
	for rows.Next() {
		var i GetVersionsOfFeatureForServiceVersionRow
		if err := rows.Scan(&i.ID, &i.Version, &i.ServiceVersionID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFeatureLinkedToServiceVersion = `-- name: IsFeatureLinkedToServiceVersion :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            feature_version_service_versions fvsv
            JOIN feature_versions fv ON fv.id = fvsv.feature_version_id
            JOIN valid_links_in_changeset($1) vl ON vl.id = fvsv.id
        WHERE
            fv.feature_id = $2
            AND fvsv.service_version_id = $3)
`

type IsFeatureLinkedToServiceVersionParams struct {
	ChangesetID      uint
	FeatureID        uint
	ServiceVersionID uint
}

func (q *Queries) IsFeatureLinkedToServiceVersion(ctx context.Context, arg IsFeatureLinkedToServiceVersionParams) (bool, error) {
	row := q.db.QueryRow(ctx, isFeatureLinkedToServiceVersion, arg.ChangesetID, arg.FeatureID, arg.ServiceVersionID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const startFeatureVersionServiceVersionValidity = `-- name: StartFeatureVersionServiceVersionValidity :exec
UPDATE
    feature_version_service_versions
SET
    valid_from = $1
WHERE
    id = $2
`

type StartFeatureVersionServiceVersionValidityParams struct {
	ValidFrom                      *time.Time
	FeatureVersionServiceVersionID uint
}

func (q *Queries) StartFeatureVersionServiceVersionValidity(ctx context.Context, arg StartFeatureVersionServiceVersionValidityParams) error {
	_, err := q.db.Exec(ctx, startFeatureVersionServiceVersionValidity, arg.ValidFrom, arg.FeatureVersionServiceVersionID)
	return err
}

const startFeatureVersionValidity = `-- name: StartFeatureVersionValidity :exec
UPDATE
    feature_versions
SET
    valid_from = $1
WHERE
    id = $2
`

type StartFeatureVersionValidityParams struct {
	ValidFrom        *time.Time
	FeatureVersionID uint
}

func (q *Queries) StartFeatureVersionValidity(ctx context.Context, arg StartFeatureVersionValidityParams) error {
	_, err := q.db.Exec(ctx, startFeatureVersionValidity, arg.ValidFrom, arg.FeatureVersionID)
	return err
}

const updateFeature = `-- name: UpdateFeature :exec
UPDATE
    features
SET
    description = $1,
    updated_at = now()
WHERE
    id = $2
`

type UpdateFeatureParams struct {
	Description string
	FeatureID   uint
}

func (q *Queries) UpdateFeature(ctx context.Context, arg UpdateFeatureParams) error {
	_, err := q.db.Exec(ctx, updateFeature, arg.Description, arg.FeatureID)
	return err
}
