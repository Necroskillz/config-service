// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: features.sql

package db

import (
	"context"
	"time"
)

const createFeature = `-- name: CreateFeature :one
INSERT INTO features (name, description, service_id)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateFeatureParams struct {
	Name        string
	Description string
	ServiceID   uint
}

func (q *Queries) CreateFeature(ctx context.Context, arg CreateFeatureParams) (uint, error) {
	row := q.db.QueryRow(ctx, createFeature, arg.Name, arg.Description, arg.ServiceID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createFeatureVersion = `-- name: CreateFeatureVersion :one
INSERT INTO feature_versions (feature_id, version, valid_from)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateFeatureVersionParams struct {
	FeatureID uint
	Version   int
	ValidFrom *time.Time
}

func (q *Queries) CreateFeatureVersion(ctx context.Context, arg CreateFeatureVersionParams) (uint, error) {
	row := q.db.QueryRow(ctx, createFeatureVersion, arg.FeatureID, arg.Version, arg.ValidFrom)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createFeatureVersionServiceVersion = `-- name: CreateFeatureVersionServiceVersion :one
INSERT INTO feature_version_service_versions (service_version_id, feature_version_id)
VALUES ($1, $2)
RETURNING id
`

type CreateFeatureVersionServiceVersionParams struct {
	ServiceVersionID uint
	FeatureVersionID uint
}

func (q *Queries) CreateFeatureVersionServiceVersion(ctx context.Context, arg CreateFeatureVersionServiceVersionParams) (uint, error) {
	row := q.db.QueryRow(ctx, createFeatureVersionServiceVersion, arg.ServiceVersionID, arg.FeatureVersionID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteFeature = `-- name: DeleteFeature :exec
DELETE FROM features
WHERE id = $1
`

func (q *Queries) DeleteFeature(ctx context.Context, featureID uint) error {
	_, err := q.db.Exec(ctx, deleteFeature, featureID)
	return err
}

const deleteFeatureVersion = `-- name: DeleteFeatureVersion :exec
DELETE FROM feature_versions
WHERE id = $1
`

func (q *Queries) DeleteFeatureVersion(ctx context.Context, featureVersionID uint) error {
	_, err := q.db.Exec(ctx, deleteFeatureVersion, featureVersionID)
	return err
}

const deleteFeatureVersionServiceVersion = `-- name: DeleteFeatureVersionServiceVersion :exec
DELETE FROM feature_version_service_versions
WHERE id = $1
`

func (q *Queries) DeleteFeatureVersionServiceVersion(ctx context.Context, featureVersionServiceVersionID uint) error {
	_, err := q.db.Exec(ctx, deleteFeatureVersionServiceVersion, featureVersionServiceVersionID)
	return err
}

const endFeatureVersionServiceVersionValidity = `-- name: EndFeatureVersionServiceVersionValidity :exec
UPDATE feature_version_service_versions
SET valid_to = $1
WHERE id = $2
`

type EndFeatureVersionServiceVersionValidityParams struct {
	ValidTo                        *time.Time
	FeatureVersionServiceVersionID uint
}

func (q *Queries) EndFeatureVersionServiceVersionValidity(ctx context.Context, arg EndFeatureVersionServiceVersionValidityParams) error {
	_, err := q.db.Exec(ctx, endFeatureVersionServiceVersionValidity, arg.ValidTo, arg.FeatureVersionServiceVersionID)
	return err
}

const endFeatureVersionValidity = `-- name: EndFeatureVersionValidity :exec
UPDATE feature_versions
SET valid_to = $1
WHERE id = $2
`

type EndFeatureVersionValidityParams struct {
	ValidTo          *time.Time
	FeatureVersionID uint
}

func (q *Queries) EndFeatureVersionValidity(ctx context.Context, arg EndFeatureVersionValidityParams) error {
	_, err := q.db.Exec(ctx, endFeatureVersionValidity, arg.ValidTo, arg.FeatureVersionID)
	return err
}

const getFeatureIDByName = `-- name: GetFeatureIDByName :one
SELECT id
FROM features
WHERE name = $1
`

func (q *Queries) GetFeatureIDByName(ctx context.Context, name string) (uint, error) {
	row := q.db.QueryRow(ctx, getFeatureIDByName, name)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getFeatureVersion = `-- name: GetFeatureVersion :one
SELECT fv.id, fv.created_at, fv.updated_at, fv.valid_from, fv.valid_to, fv.version, fv.feature_id,
    f.name as feature_name,
    f.description as feature_description,
    f.service_id
FROM feature_versions fv
    JOIN features f ON f.id = fv.feature_id
WHERE fv.id = $1
LIMIT 1
`

type GetFeatureVersionRow struct {
	ID                 uint
	CreatedAt          time.Time
	UpdatedAt          time.Time
	ValidFrom          *time.Time
	ValidTo            *time.Time
	Version            int
	FeatureID          uint
	FeatureName        string
	FeatureDescription string
	ServiceID          uint
}

func (q *Queries) GetFeatureVersion(ctx context.Context, featureVersionID uint) (GetFeatureVersionRow, error) {
	row := q.db.QueryRow(ctx, getFeatureVersion, featureVersionID)
	var i GetFeatureVersionRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ValidFrom,
		&i.ValidTo,
		&i.Version,
		&i.FeatureID,
		&i.FeatureName,
		&i.FeatureDescription,
		&i.ServiceID,
	)
	return i, err
}

const getFeatureVersionServiceVersionLink = `-- name: GetFeatureVersionServiceVersionLink :one
SELECT fvsv.id,
    csc.changeset_id as created_in_changeset_id
FROM feature_version_service_versions fvsv
    JOIN changeset_changes csc ON csc.feature_version_service_version_id = fvsv.id
    AND csc.type = 'create'
    AND csc.kind = 'feature_version_service_version'
WHERE fvsv.feature_version_id = $1
    AND fvsv.service_version_id = $2
    AND is_link_valid_in_changeset(fvsv, $3)
`

type GetFeatureVersionServiceVersionLinkParams struct {
	FeatureVersionID uint
	ServiceVersionID uint
	ChangesetID      uint
}

type GetFeatureVersionServiceVersionLinkRow struct {
	ID                   uint
	CreatedInChangesetID uint
}

func (q *Queries) GetFeatureVersionServiceVersionLink(ctx context.Context, arg GetFeatureVersionServiceVersionLinkParams) (GetFeatureVersionServiceVersionLinkRow, error) {
	row := q.db.QueryRow(ctx, getFeatureVersionServiceVersionLink, arg.FeatureVersionID, arg.ServiceVersionID, arg.ChangesetID)
	var i GetFeatureVersionServiceVersionLinkRow
	err := row.Scan(&i.ID, &i.CreatedInChangesetID)
	return i, err
}

const getFeatureVersionsForServiceVersion = `-- name: GetFeatureVersionsForServiceVersion :many
SELECT fv.id,
    fv.feature_id,
    fv.version,
    f.name as feature_name,
    f.description as feature_description,
    csc.changeset_id as linked_in_changeset_id
FROM feature_version_service_versions fvsv
    JOIN feature_versions fv ON fv.id = fvsv.feature_version_id
    JOIN features f ON f.id = fv.feature_id
    JOIN changeset_changes csc ON csc.feature_version_service_version_id = fvsv.id
    AND csc.type = 'create'
    AND csc.kind = 'feature_version_service_version'
WHERE fvsv.service_version_id = $1
    AND is_link_valid_in_changeset(fvsv, $2)
ORDER BY f.name
`

type GetFeatureVersionsForServiceVersionParams struct {
	ServiceVersionID uint
	ChangesetID      uint
}

type GetFeatureVersionsForServiceVersionRow struct {
	ID                  uint
	FeatureID           uint
	Version             int
	FeatureName         string
	FeatureDescription  string
	LinkedInChangesetID uint
}

func (q *Queries) GetFeatureVersionsForServiceVersion(ctx context.Context, arg GetFeatureVersionsForServiceVersionParams) ([]GetFeatureVersionsForServiceVersionRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionsForServiceVersion, arg.ServiceVersionID, arg.ChangesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionsForServiceVersionRow
	for rows.Next() {
		var i GetFeatureVersionsForServiceVersionRow
		if err := rows.Scan(
			&i.ID,
			&i.FeatureID,
			&i.Version,
			&i.FeatureName,
			&i.FeatureDescription,
			&i.LinkedInChangesetID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureVersionsLinkableToServiceVersion = `-- name: GetFeatureVersionsLinkableToServiceVersion :many
SELECT fv.id,
    fv.version,
    f.name as feature_name,
    f.description as feature_description
FROM feature_versions fv
    JOIN features f ON f.id = fv.feature_id
WHERE f.service_id = $1
    AND is_feature_version_valid_in_changeset(fv, $2)
    AND NOT EXISTS (
        SELECT 1
        FROM feature_version_service_versions fvsv
        WHERE fvsv.feature_version_id = fv.id
            AND fvsv.service_version_id = $3
            AND is_link_valid_in_changeset(fvsv, $2)
    )
ORDER BY f.name,
    fv.version
`

type GetFeatureVersionsLinkableToServiceVersionParams struct {
	ServiceID        uint
	ChangesetID      uint
	ServiceVersionID uint
}

type GetFeatureVersionsLinkableToServiceVersionRow struct {
	ID                 uint
	Version            int
	FeatureName        string
	FeatureDescription string
}

func (q *Queries) GetFeatureVersionsLinkableToServiceVersion(ctx context.Context, arg GetFeatureVersionsLinkableToServiceVersionParams) ([]GetFeatureVersionsLinkableToServiceVersionRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionsLinkableToServiceVersion, arg.ServiceID, arg.ChangesetID, arg.ServiceVersionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionsLinkableToServiceVersionRow
	for rows.Next() {
		var i GetFeatureVersionsLinkableToServiceVersionRow
		if err := rows.Scan(
			&i.ID,
			&i.Version,
			&i.FeatureName,
			&i.FeatureDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeatureVersionsLinkedToServiceVersionForFeature = `-- name: GetFeatureVersionsLinkedToServiceVersionForFeature :many
SELECT fv.id,
    fv.version
FROM feature_version_service_versions fvsv
    JOIN feature_versions fv ON fvsv.feature_version_id = fv.id
    JOIN features f ON f.id = fv.feature_id
WHERE fv.feature_id = $1
    AND fvsv.service_version_id = $2
    AND is_link_valid_in_changeset(fvsv, $3)
ORDER BY fv.version
`

type GetFeatureVersionsLinkedToServiceVersionForFeatureParams struct {
	FeatureID        uint
	ServiceVersionID uint
	ChangesetID      uint
}

type GetFeatureVersionsLinkedToServiceVersionForFeatureRow struct {
	ID      uint
	Version int
}

func (q *Queries) GetFeatureVersionsLinkedToServiceVersionForFeature(ctx context.Context, arg GetFeatureVersionsLinkedToServiceVersionForFeatureParams) ([]GetFeatureVersionsLinkedToServiceVersionForFeatureRow, error) {
	rows, err := q.db.Query(ctx, getFeatureVersionsLinkedToServiceVersionForFeature, arg.FeatureID, arg.ServiceVersionID, arg.ChangesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeatureVersionsLinkedToServiceVersionForFeatureRow
	for rows.Next() {
		var i GetFeatureVersionsLinkedToServiceVersionForFeatureRow
		if err := rows.Scan(&i.ID, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isFeatureLinkedToServiceVersion = `-- name: IsFeatureLinkedToServiceVersion :one
SELECT EXISTS (
        SELECT 1
        FROM feature_version_service_versions fvsv
            JOIN feature_versions fv ON fv.id = fvsv.feature_version_id
        WHERE fv.feature_id = $1
            AND fvsv.service_version_id = $2
            AND is_link_valid_in_changeset(fvsv, $3)
    )
`

type IsFeatureLinkedToServiceVersionParams struct {
	FeatureID        uint
	ServiceVersionID uint
	ChangesetID      uint
}

func (q *Queries) IsFeatureLinkedToServiceVersion(ctx context.Context, arg IsFeatureLinkedToServiceVersionParams) (bool, error) {
	row := q.db.QueryRow(ctx, isFeatureLinkedToServiceVersion, arg.FeatureID, arg.ServiceVersionID, arg.ChangesetID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const startFeatureVersionServiceVersionValidity = `-- name: StartFeatureVersionServiceVersionValidity :exec
UPDATE feature_version_service_versions
SET valid_from = $1
WHERE id = $2
`

type StartFeatureVersionServiceVersionValidityParams struct {
	ValidFrom                      *time.Time
	FeatureVersionServiceVersionID uint
}

func (q *Queries) StartFeatureVersionServiceVersionValidity(ctx context.Context, arg StartFeatureVersionServiceVersionValidityParams) error {
	_, err := q.db.Exec(ctx, startFeatureVersionServiceVersionValidity, arg.ValidFrom, arg.FeatureVersionServiceVersionID)
	return err
}

const startFeatureVersionValidity = `-- name: StartFeatureVersionValidity :exec
UPDATE feature_versions
SET valid_from = $1
WHERE id = $2
`

type StartFeatureVersionValidityParams struct {
	ValidFrom        *time.Time
	FeatureVersionID uint
}

func (q *Queries) StartFeatureVersionValidity(ctx context.Context, arg StartFeatureVersionValidityParams) error {
	_, err := q.db.Exec(ctx, startFeatureVersionValidity, arg.ValidFrom, arg.FeatureVersionID)
	return err
}

const updateFeature = `-- name: UpdateFeature :exec
UPDATE features
SET description = $1
WHERE id = $2
`

type UpdateFeatureParams struct {
	Description string
	FeatureID   uint
}

func (q *Queries) UpdateFeature(ctx context.Context, arg UpdateFeatureParams) error {
	_, err := q.db.Exec(ctx, updateFeature, arg.Description, arg.FeatureID)
	return err
}
