// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: variation.sql

package db

import (
	"context"
)

const addPropertyToServiceType = `-- name: AddPropertyToServiceType :exec
INSERT INTO service_type_variation_properties (service_type_id, variation_property_id, priority)
VALUES (
        $1,
        $2,
        $3
    )
`

type AddPropertyToServiceTypeParams struct {
	ServiceTypeID       uint
	VariationPropertyID uint
	Priority            int
}

func (q *Queries) AddPropertyToServiceType(ctx context.Context, arg AddPropertyToServiceTypeParams) error {
	_, err := q.db.Exec(ctx, addPropertyToServiceType, arg.ServiceTypeID, arg.VariationPropertyID, arg.Priority)
	return err
}

const createVariationContext = `-- name: CreateVariationContext :one
INSERT INTO variation_contexts DEFAULT
VALUES
RETURNING id
`

func (q *Queries) CreateVariationContext(ctx context.Context) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationContext)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createVariationContextValue = `-- name: CreateVariationContextValue :exec
INSERT INTO variation_context_variation_property_values (
        variation_context_id,
        variation_property_value_id
    )
VALUES (
        $1,
        $2
    )
`

type CreateVariationContextValueParams struct {
	VariationContextID       uint
	VariationPropertyValueID uint
}

func (q *Queries) CreateVariationContextValue(ctx context.Context, arg CreateVariationContextValueParams) error {
	_, err := q.db.Exec(ctx, createVariationContextValue, arg.VariationContextID, arg.VariationPropertyValueID)
	return err
}

const createVariationProperty = `-- name: CreateVariationProperty :one
INSERT INTO variation_properties (name, display_name)
VALUES ($1, $2)
RETURNING id
`

type CreateVariationPropertyParams struct {
	Name        string
	DisplayName string
}

func (q *Queries) CreateVariationProperty(ctx context.Context, arg CreateVariationPropertyParams) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationProperty, arg.Name, arg.DisplayName)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createVariationPropertyValue = `-- name: CreateVariationPropertyValue :one
INSERT INTO variation_property_values (variation_property_id, value, parent_id)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateVariationPropertyValueParams struct {
	VariationPropertyID uint
	Value               string
	ParentID            *uint
}

func (q *Queries) CreateVariationPropertyValue(ctx context.Context, arg CreateVariationPropertyValueParams) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationPropertyValue, arg.VariationPropertyID, arg.Value, arg.ParentID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getServiceTypeVariationProperties = `-- name: GetServiceTypeVariationProperties :many
SELECT stvp.service_type_id,
    stvp.variation_property_id
FROM service_type_variation_properties stvp
ORDER BY stvp.service_type_id,
    stvp.priority
`

type GetServiceTypeVariationPropertiesRow struct {
	ServiceTypeID       uint
	VariationPropertyID uint
}

func (q *Queries) GetServiceTypeVariationProperties(ctx context.Context) ([]GetServiceTypeVariationPropertiesRow, error) {
	rows, err := q.db.Query(ctx, getServiceTypeVariationProperties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceTypeVariationPropertiesRow
	for rows.Next() {
		var i GetServiceTypeVariationPropertiesRow
		if err := rows.Scan(&i.ServiceTypeID, &i.VariationPropertyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariationContextId = `-- name: GetVariationContextId :one
SELECT vc.id
FROM variation_contexts vc
WHERE (
        SELECT COUNT(variation_property_value_id)
        FROM variation_context_variation_property_values
        WHERE variation_context_id = vc.id
    ) = $1::int
    AND (
        SELECT COUNT(vcvpv.variation_property_value_id)
        FROM variation_context_variation_property_values vcvpv
        WHERE vcvpv.variation_context_id = vc.id
            AND vcvpv.variation_property_value_id = ANY($2::bigint [])
    ) = $1::int
`

type GetVariationContextIdParams struct {
	PropertyCount             int
	VariationPropertyValueIds []uint
}

func (q *Queries) GetVariationContextId(ctx context.Context, arg GetVariationContextIdParams) (uint, error) {
	row := q.db.QueryRow(ctx, getVariationContextId, arg.PropertyCount, arg.VariationPropertyValueIds)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getVariationContextValues = `-- name: GetVariationContextValues :many
SELECT vpv.value,
    vpv.id as value_id,
    vpv.variation_property_id as property_id
FROM variation_contexts vc
    JOIN variation_context_variation_property_values vcvpv on vcvpv.variation_context_id = vc.id
    JOIN variation_property_values vpv on vpv.id = vcvpv.variation_property_value_id
WHERE vc.id = $1
`

type GetVariationContextValuesRow struct {
	Value      string
	ValueID    uint
	PropertyID uint
}

func (q *Queries) GetVariationContextValues(ctx context.Context, variationContextID uint) ([]GetVariationContextValuesRow, error) {
	rows, err := q.db.Query(ctx, getVariationContextValues, variationContextID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariationContextValuesRow
	for rows.Next() {
		var i GetVariationContextValuesRow
		if err := rows.Scan(&i.Value, &i.ValueID, &i.PropertyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariationPropertyValues = `-- name: GetVariationPropertyValues :many
SELECT vpv.id,
    vpv.value,
    vpv.parent_id,
    vp.name as property_name,
    vp.display_name as property_display_name,
    vp.id as property_id
FROM variation_property_values vpv
    JOIN variation_properties vp ON vp.id = vpv.variation_property_id
ORDER BY vpv.id
`

type GetVariationPropertyValuesRow struct {
	ID                  uint
	Value               string
	ParentID            *uint
	PropertyName        string
	PropertyDisplayName string
	PropertyID          uint
}

func (q *Queries) GetVariationPropertyValues(ctx context.Context) ([]GetVariationPropertyValuesRow, error) {
	rows, err := q.db.Query(ctx, getVariationPropertyValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariationPropertyValuesRow
	for rows.Next() {
		var i GetVariationPropertyValuesRow
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.ParentID,
			&i.PropertyName,
			&i.PropertyDisplayName,
			&i.PropertyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
