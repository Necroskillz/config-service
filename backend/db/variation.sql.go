// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: variation.sql

package db

import (
	"context"
)

const addPropertyToServiceType = `-- name: AddPropertyToServiceType :exec
INSERT INTO service_type_variation_properties(service_type_id, variation_property_id, priority)
    VALUES ($1, $2, $3)
`

type AddPropertyToServiceTypeParams struct {
	ServiceTypeID       uint
	VariationPropertyID uint
	Priority            int
}

func (q *Queries) AddPropertyToServiceType(ctx context.Context, arg AddPropertyToServiceTypeParams) error {
	_, err := q.db.Exec(ctx, addPropertyToServiceType, arg.ServiceTypeID, arg.VariationPropertyID, arg.Priority)
	return err
}

const createVariationContext = `-- name: CreateVariationContext :one
INSERT INTO variation_contexts DEFAULT
    VALUES
    RETURNING
        id
`

func (q *Queries) CreateVariationContext(ctx context.Context) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationContext)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createVariationContextValue = `-- name: CreateVariationContextValue :exec
INSERT INTO variation_context_variation_property_values(variation_context_id, variation_property_value_id)
    VALUES ($1, $2)
`

type CreateVariationContextValueParams struct {
	VariationContextID       uint
	VariationPropertyValueID uint
}

func (q *Queries) CreateVariationContextValue(ctx context.Context, arg CreateVariationContextValueParams) error {
	_, err := q.db.Exec(ctx, createVariationContextValue, arg.VariationContextID, arg.VariationPropertyValueID)
	return err
}

const createVariationProperty = `-- name: CreateVariationProperty :one
INSERT INTO variation_properties(name, display_name)
    VALUES ($1, $2)
RETURNING
    id
`

type CreateVariationPropertyParams struct {
	Name        string
	DisplayName string
}

func (q *Queries) CreateVariationProperty(ctx context.Context, arg CreateVariationPropertyParams) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationProperty, arg.Name, arg.DisplayName)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createVariationPropertyValue = `-- name: CreateVariationPropertyValue :one
INSERT INTO variation_property_values(variation_property_id, value, parent_id, order_index)
SELECT
    $1,
    $2,
    $3,
(
        SELECT
            COALESCE(MAX(order_index), 0) + 1
        FROM
            variation_property_values
        WHERE
            variation_property_id = $1
            AND parent_id IS NOT DISTINCT FROM $3)
RETURNING
    id
`

type CreateVariationPropertyValueParams struct {
	VariationPropertyID uint
	Value               string
	ParentID            *uint
}

func (q *Queries) CreateVariationPropertyValue(ctx context.Context, arg CreateVariationPropertyValueParams) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationPropertyValue, arg.VariationPropertyID, arg.Value, arg.ParentID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteVariationProperty = `-- name: DeleteVariationProperty :exec
DELETE FROM variation_properties
WHERE id = $1
`

func (q *Queries) DeleteVariationProperty(ctx context.Context, id uint) error {
	_, err := q.db.Exec(ctx, deleteVariationProperty, id)
	return err
}

const deleteVariationPropertyValue = `-- name: DeleteVariationPropertyValue :exec
DELETE FROM variation_property_values
WHERE id = $1
`

func (q *Queries) DeleteVariationPropertyValue(ctx context.Context, id uint) error {
	_, err := q.db.Exec(ctx, deleteVariationPropertyValue, id)
	return err
}

const getServiceTypeVariationProperties = `-- name: GetServiceTypeVariationProperties :many
SELECT
    stvp.service_type_id,
    stvp.variation_property_id
FROM
    service_type_variation_properties stvp
ORDER BY
    stvp.service_type_id,
    stvp.priority
`

type GetServiceTypeVariationPropertiesRow struct {
	ServiceTypeID       uint
	VariationPropertyID uint
}

func (q *Queries) GetServiceTypeVariationProperties(ctx context.Context) ([]GetServiceTypeVariationPropertiesRow, error) {
	rows, err := q.db.Query(ctx, getServiceTypeVariationProperties)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceTypeVariationPropertiesRow
	for rows.Next() {
		var i GetServiceTypeVariationPropertiesRow
		if err := rows.Scan(&i.ServiceTypeID, &i.VariationPropertyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariationContext = `-- name: GetVariationContext :one
SELECT
    vc.id, vc.created_at
FROM
    variation_contexts vc
WHERE
    vc.id = $1
`

func (q *Queries) GetVariationContext(ctx context.Context, id uint) (VariationContext, error) {
	row := q.db.QueryRow(ctx, getVariationContext, id)
	var i VariationContext
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getVariationContextID = `-- name: GetVariationContextID :one
SELECT
    vc.id
FROM
    variation_contexts vc
WHERE (
    SELECT
        COUNT(variation_property_value_id)
    FROM
        variation_context_variation_property_values
    WHERE
        variation_context_id = vc.id) = $1::int
    AND (
        SELECT
            COUNT(vcvpv.variation_property_value_id)
        FROM
            variation_context_variation_property_values vcvpv
        WHERE
            vcvpv.variation_context_id = vc.id
            AND vcvpv.variation_property_value_id = ANY ($2::bigint[])) = $1::int
`

type GetVariationContextIDParams struct {
	PropertyCount             int
	VariationPropertyValueIds []uint
}

func (q *Queries) GetVariationContextID(ctx context.Context, arg GetVariationContextIDParams) (uint, error) {
	row := q.db.QueryRow(ctx, getVariationContextID, arg.PropertyCount, arg.VariationPropertyValueIds)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getVariationContextValues = `-- name: GetVariationContextValues :many
SELECT
    vpv.value,
    vpv.id AS value_id,
    vpv.variation_property_id AS property_id
FROM
    variation_contexts vc
    JOIN variation_context_variation_property_values vcvpv ON vcvpv.variation_context_id = vc.id
    JOIN variation_property_values vpv ON vpv.id = vcvpv.variation_property_value_id
WHERE
    vc.id = $1
`

type GetVariationContextValuesRow struct {
	Value      string
	ValueID    uint
	PropertyID uint
}

func (q *Queries) GetVariationContextValues(ctx context.Context, variationContextID uint) ([]GetVariationContextValuesRow, error) {
	rows, err := q.db.Query(ctx, getVariationContextValues, variationContextID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariationContextValuesRow
	for rows.Next() {
		var i GetVariationContextValuesRow
		if err := rows.Scan(&i.Value, &i.ValueID, &i.PropertyID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariationProperty = `-- name: GetVariationProperty :one
SELECT
    id, name, display_name, created_at
FROM
    variation_properties
WHERE
    id = $1
`

func (q *Queries) GetVariationProperty(ctx context.Context, id uint) (VariationProperty, error) {
	row := q.db.QueryRow(ctx, getVariationProperty, id)
	var i VariationProperty
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DisplayName,
		&i.CreatedAt,
	)
	return i, err
}

const getVariationPropertyIDByName = `-- name: GetVariationPropertyIDByName :one
SELECT
    id
FROM
    variation_properties
WHERE
    name = $1
`

func (q *Queries) GetVariationPropertyIDByName(ctx context.Context, name string) (uint, error) {
	row := q.db.QueryRow(ctx, getVariationPropertyIDByName, name)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getVariationPropertyUsage = `-- name: GetVariationPropertyUsage :one
SELECT
    COUNT(vv.id)::int AS usage_count
FROM
    variation_property_values vpv
    JOIN variation_context_variation_property_values vcvpv ON vcvpv.variation_property_value_id = vpv.id
    JOIN variation_values vv ON vv.variation_context_id = vcvpv.variation_context_id
WHERE
    vpv.variation_property_id = $1
`

func (q *Queries) GetVariationPropertyUsage(ctx context.Context, variationPropertyID uint) (int, error) {
	row := q.db.QueryRow(ctx, getVariationPropertyUsage, variationPropertyID)
	var usage_count int
	err := row.Scan(&usage_count)
	return usage_count, err
}

const getVariationPropertyValueIDByName = `-- name: GetVariationPropertyValueIDByName :one
SELECT
    id
FROM
    variation_property_values
WHERE
    variation_property_id = $1
    AND value = $2
`

type GetVariationPropertyValueIDByNameParams struct {
	VariationPropertyID uint
	Value               string
}

func (q *Queries) GetVariationPropertyValueIDByName(ctx context.Context, arg GetVariationPropertyValueIDByNameParams) (uint, error) {
	row := q.db.QueryRow(ctx, getVariationPropertyValueIDByName, arg.VariationPropertyID, arg.Value)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getVariationPropertyValueIDByValue = `-- name: GetVariationPropertyValueIDByValue :one
SELECT
    id
FROM
    variation_property_values
WHERE
    variation_property_id = $1
    AND value = $2
    AND NOT archived
`

type GetVariationPropertyValueIDByValueParams struct {
	VariationPropertyID uint
	Value               string
}

func (q *Queries) GetVariationPropertyValueIDByValue(ctx context.Context, arg GetVariationPropertyValueIDByValueParams) (uint, error) {
	row := q.db.QueryRow(ctx, getVariationPropertyValueIDByValue, arg.VariationPropertyID, arg.Value)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getVariationPropertyValues = `-- name: GetVariationPropertyValues :many
SELECT
    vpv.id,
    vpv.value,
    COALESCE(vpv.parent_id, 0) AS parent_id,
    vpv.archived,
    vp.name AS property_name,
    vp.display_name AS property_display_name,
    vp.id AS property_id
FROM
    variation_properties vp
    LEFT JOIN variation_property_values vpv ON vpv.variation_property_id = vp.id
ORDER BY
    vp.id,
    parent_id,
    vpv.order_index
`

type GetVariationPropertyValuesRow struct {
	ID                  *uint
	Value               *string
	ParentID            uint
	Archived            *bool
	PropertyName        string
	PropertyDisplayName string
	PropertyID          uint
}

func (q *Queries) GetVariationPropertyValues(ctx context.Context) ([]GetVariationPropertyValuesRow, error) {
	rows, err := q.db.Query(ctx, getVariationPropertyValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariationPropertyValuesRow
	for rows.Next() {
		var i GetVariationPropertyValuesRow
		if err := rows.Scan(
			&i.ID,
			&i.Value,
			&i.ParentID,
			&i.Archived,
			&i.PropertyName,
			&i.PropertyDisplayName,
			&i.PropertyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariationPropertyValuesUsage = `-- name: GetVariationPropertyValuesUsage :many
SELECT
    vpv.id,
    COUNT(vv.id)::int AS usage_count
FROM
    variation_property_values vpv
    JOIN variation_context_variation_property_values vcvpv ON vcvpv.variation_property_value_id = vpv.id
    JOIN variation_values vv ON vv.variation_context_id = vcvpv.variation_context_id
WHERE
    vpv.variation_property_id = $1
GROUP BY
    vpv.id
`

type GetVariationPropertyValuesUsageRow struct {
	ID         uint
	UsageCount int
}

func (q *Queries) GetVariationPropertyValuesUsage(ctx context.Context, variationPropertyID uint) ([]GetVariationPropertyValuesUsageRow, error) {
	rows, err := q.db.Query(ctx, getVariationPropertyValuesUsage, variationPropertyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariationPropertyValuesUsageRow
	for rows.Next() {
		var i GetVariationPropertyValuesUsageRow
		if err := rows.Scan(&i.ID, &i.UsageCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setVariationPropertyValueArchived = `-- name: SetVariationPropertyValueArchived :exec
UPDATE
    variation_property_values
SET
    archived = $1,
    updated_at = now()
WHERE
    id = $2
`

type SetVariationPropertyValueArchivedParams struct {
	Archived bool
	ID       uint
}

func (q *Queries) SetVariationPropertyValueArchived(ctx context.Context, arg SetVariationPropertyValueArchivedParams) error {
	_, err := q.db.Exec(ctx, setVariationPropertyValueArchived, arg.Archived, arg.ID)
	return err
}

const updateVariationProperty = `-- name: UpdateVariationProperty :exec
UPDATE
    variation_properties
SET
    display_name = $1,
    updated_at = now()
WHERE
    id = $2
`

type UpdateVariationPropertyParams struct {
	DisplayName string
	ID          uint
}

func (q *Queries) UpdateVariationProperty(ctx context.Context, arg UpdateVariationPropertyParams) error {
	_, err := q.db.Exec(ctx, updateVariationProperty, arg.DisplayName, arg.ID)
	return err
}

const updateVariationPropertyValueOrder = `-- name: UpdateVariationPropertyValueOrder :exec
WITH source AS (
    SELECT
        svpv.id,
        svpv.order_index,
        svpv.parent_id,
        svpv.variation_property_id
    FROM
        variation_property_values svpv
    WHERE
        svpv.id = $1
),
bounds AS (
    SELECT
        MIN(bvpv.order_index)::int AS min_index,
        MAX(bvpv.order_index)::int AS max_index
    FROM
        source s
        JOIN variation_property_values bvpv ON bvpv.variation_property_id = s.variation_property_id
            AND bvpv.parent_id IS NOT DISTINCT FROM s.parent_id
),
params AS (
    SELECT
        source.id,
        source.variation_property_id,
        source.parent_id,
        source.order_index AS source_index,
        GREATEST(bounds.min_index, LEAST($2::int, bounds.max_index)) AS target_index
    FROM
        source,
        bounds)
UPDATE
    variation_property_values vpv
SET
    order_index = CASE WHEN vpv.order_index = params.source_index THEN
        params.target_index
    WHEN params.source_index < params.target_index THEN
        vpv.order_index - 1
    ELSE
        vpv.order_index + 1
    END,
    updated_at = now()
FROM
    params
WHERE
    vpv.variation_property_id = params.variation_property_id
    AND vpv.parent_id IS NOT DISTINCT FROM params.parent_id
    AND vpv.order_index BETWEEN LEAST(params.source_index, params.target_index)
    AND GREATEST(params.source_index, params.target_index)
`

type UpdateVariationPropertyValueOrderParams struct {
	ID          uint
	TargetIndex int
}

func (q *Queries) UpdateVariationPropertyValueOrder(ctx context.Context, arg UpdateVariationPropertyValueOrderParams) error {
	_, err := q.db.Exec(ctx, updateVariationPropertyValueOrder, arg.ID, arg.TargetIndex)
	return err
}
