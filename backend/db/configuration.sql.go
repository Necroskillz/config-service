// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: configuration.sql

package db

import (
	"context"
	"time"
)

const getConfiguration = `-- name: GetConfiguration :many
SELECT
    f.id AS feature_id,
    k.id AS key_id,
    s.service_type_id AS service_type_id,
    f.name AS feature_name,
    k.name AS key_name,
    vt.kind AS value_type,
    vv.data AS data,
    vv.variation_context_id
FROM
    variation_values vv
    JOIN keys k ON k.id = vv.key_id
    JOIN feature_versions fv ON fv.id = k.feature_version_id
    JOIN features f ON f.id = fv.feature_id
    JOIN feature_version_service_versions fvsv ON fvsv.feature_version_id = fv.id
    JOIN service_versions sv ON sv.id = fvsv.service_version_id
    JOIN value_types vt ON vt.id = k.value_type_id
    JOIN services s ON s.id = sv.service_id
WHERE
    sv.id = ANY ($1::bigint[])
    AND CASE WHEN $2 = TRUE THEN
        vv.valid_from <= $3::timestamptz
        AND ($3::timestamptz < vv.valid_to
            OR vv.valid_to IS NULL)
        AND fv.valid_from <= $3::timestamptz
        AND ($3::timestamptz < fv.valid_to
            OR fv.valid_to IS NULL)
        AND fvsv.valid_from <= $3::timestamptz
        AND ($3::timestamptz < fvsv.valid_to
            OR fvsv.valid_to IS NULL)
        AND sv.valid_from <= $3::timestamptz
        AND ($3::timestamptz < sv.valid_to
            OR sv.valid_to IS NULL)
    ELSE
        is_variation_value_valid_in_changeset(vv, $4)
        AND is_feature_version_valid_in_changeset(fv, $4)
        AND is_link_valid_in_changeset(fvsv, $4)
        AND is_service_version_valid_in_changeset(sv, $4)
    END
ORDER BY
    f.name,
    k.name
`

type GetConfigurationParams struct {
	ServiceVersionIds []uint
	IsApplied         interface{}
	Timestamp         time.Time
	ChangesetID       uint
}

type GetConfigurationRow struct {
	FeatureID          uint
	KeyID              uint
	ServiceTypeID      uint
	FeatureName        string
	KeyName            string
	ValueType          ValueTypeKind
	Data               string
	VariationContextID uint
}

func (q *Queries) GetConfiguration(ctx context.Context, arg GetConfigurationParams) ([]GetConfigurationRow, error) {
	rows, err := q.db.Query(ctx, getConfiguration,
		arg.ServiceVersionIds,
		arg.IsApplied,
		arg.Timestamp,
		arg.ChangesetID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetConfigurationRow
	for rows.Next() {
		var i GetConfigurationRow
		if err := rows.Scan(
			&i.FeatureID,
			&i.KeyID,
			&i.ServiceTypeID,
			&i.FeatureName,
			&i.KeyName,
			&i.ValueType,
			&i.Data,
			&i.VariationContextID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
