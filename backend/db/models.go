// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type ChangesetActionType string

const (
	ChangesetActionTypeApply   ChangesetActionType = "apply"
	ChangesetActionTypeDiscard ChangesetActionType = "discard"
	ChangesetActionTypeStash   ChangesetActionType = "stash"
	ChangesetActionTypeCommit  ChangesetActionType = "commit"
	ChangesetActionTypeReopen  ChangesetActionType = "reopen"
	ChangesetActionTypeComment ChangesetActionType = "comment"
)

func (e *ChangesetActionType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChangesetActionType(s)
	case string:
		*e = ChangesetActionType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChangesetActionType: %T", src)
	}
	return nil
}

type NullChangesetActionType struct {
	ChangesetActionType ChangesetActionType
	Valid               bool // Valid is true if ChangesetActionType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChangesetActionType) Scan(value interface{}) error {
	if value == nil {
		ns.ChangesetActionType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChangesetActionType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChangesetActionType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChangesetActionType), nil
}

type ChangesetChangeKind string

const (
	ChangesetChangeKindFeatureVersion               ChangesetChangeKind = "feature_version"
	ChangesetChangeKindServiceVersion               ChangesetChangeKind = "service_version"
	ChangesetChangeKindFeatureVersionServiceVersion ChangesetChangeKind = "feature_version_service_version"
	ChangesetChangeKindKey                          ChangesetChangeKind = "key"
	ChangesetChangeKindVariationValue               ChangesetChangeKind = "variation_value"
)

func (e *ChangesetChangeKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChangesetChangeKind(s)
	case string:
		*e = ChangesetChangeKind(s)
	default:
		return fmt.Errorf("unsupported scan type for ChangesetChangeKind: %T", src)
	}
	return nil
}

type NullChangesetChangeKind struct {
	ChangesetChangeKind ChangesetChangeKind
	Valid               bool // Valid is true if ChangesetChangeKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChangesetChangeKind) Scan(value interface{}) error {
	if value == nil {
		ns.ChangesetChangeKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChangesetChangeKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChangesetChangeKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChangesetChangeKind), nil
}

type ChangesetChangeType string

const (
	ChangesetChangeTypeCreate ChangesetChangeType = "create"
	ChangesetChangeTypeUpdate ChangesetChangeType = "update"
	ChangesetChangeTypeDelete ChangesetChangeType = "delete"
)

func (e *ChangesetChangeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChangesetChangeType(s)
	case string:
		*e = ChangesetChangeType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChangesetChangeType: %T", src)
	}
	return nil
}

type NullChangesetChangeType struct {
	ChangesetChangeType ChangesetChangeType
	Valid               bool // Valid is true if ChangesetChangeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChangesetChangeType) Scan(value interface{}) error {
	if value == nil {
		ns.ChangesetChangeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChangesetChangeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChangesetChangeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChangesetChangeType), nil
}

type ChangesetState string

const (
	ChangesetStateOpen      ChangesetState = "open"
	ChangesetStateCommitted ChangesetState = "committed"
	ChangesetStateApplied   ChangesetState = "applied"
	ChangesetStateRejected  ChangesetState = "rejected"
	ChangesetStateDiscarded ChangesetState = "discarded"
	ChangesetStateStashed   ChangesetState = "stashed"
)

func (e *ChangesetState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChangesetState(s)
	case string:
		*e = ChangesetState(s)
	default:
		return fmt.Errorf("unsupported scan type for ChangesetState: %T", src)
	}
	return nil
}

type NullChangesetState struct {
	ChangesetState ChangesetState
	Valid          bool // Valid is true if ChangesetState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChangesetState) Scan(value interface{}) error {
	if value == nil {
		ns.ChangesetState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChangesetState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChangesetState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChangesetState), nil
}

type PermissionLevel string

const (
	PermissionLevelEditor PermissionLevel = "editor"
	PermissionLevelAdmin  PermissionLevel = "admin"
)

func (e *PermissionLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PermissionLevel(s)
	case string:
		*e = PermissionLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for PermissionLevel: %T", src)
	}
	return nil
}

type NullPermissionLevel struct {
	PermissionLevel PermissionLevel
	Valid           bool // Valid is true if PermissionLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPermissionLevel) Scan(value interface{}) error {
	if value == nil {
		ns.PermissionLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PermissionLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPermissionLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PermissionLevel), nil
}

type UserPermissionKind string

const (
	UserPermissionKindService   UserPermissionKind = "service"
	UserPermissionKindFeature   UserPermissionKind = "feature"
	UserPermissionKindKey       UserPermissionKind = "key"
	UserPermissionKindVariation UserPermissionKind = "variation"
)

func (e *UserPermissionKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserPermissionKind(s)
	case string:
		*e = UserPermissionKind(s)
	default:
		return fmt.Errorf("unsupported scan type for UserPermissionKind: %T", src)
	}
	return nil
}

type NullUserPermissionKind struct {
	UserPermissionKind UserPermissionKind
	Valid              bool // Valid is true if UserPermissionKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserPermissionKind) Scan(value interface{}) error {
	if value == nil {
		ns.UserPermissionKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserPermissionKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserPermissionKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserPermissionKind), nil
}

type ValueTypeKind string

const (
	ValueTypeKindString  ValueTypeKind = "string"
	ValueTypeKindInteger ValueTypeKind = "integer"
	ValueTypeKindDecimal ValueTypeKind = "decimal"
	ValueTypeKindBoolean ValueTypeKind = "boolean"
	ValueTypeKindJson    ValueTypeKind = "json"
)

func (e *ValueTypeKind) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ValueTypeKind(s)
	case string:
		*e = ValueTypeKind(s)
	default:
		return fmt.Errorf("unsupported scan type for ValueTypeKind: %T", src)
	}
	return nil
}

type NullValueTypeKind struct {
	ValueTypeKind ValueTypeKind
	Valid         bool // Valid is true if ValueTypeKind is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullValueTypeKind) Scan(value interface{}) error {
	if value == nil {
		ns.ValueTypeKind, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ValueTypeKind.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullValueTypeKind) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ValueTypeKind), nil
}

type ValueValidatorType string

const (
	ValueValidatorTypeRequired     ValueValidatorType = "required"
	ValueValidatorTypeMinLength    ValueValidatorType = "min_length"
	ValueValidatorTypeMaxLength    ValueValidatorType = "max_length"
	ValueValidatorTypeMin          ValueValidatorType = "min"
	ValueValidatorTypeMax          ValueValidatorType = "max"
	ValueValidatorTypeMinDecimal   ValueValidatorType = "min_decimal"
	ValueValidatorTypeMaxDecimal   ValueValidatorType = "max_decimal"
	ValueValidatorTypeRegex        ValueValidatorType = "regex"
	ValueValidatorTypeJsonSchema   ValueValidatorType = "json_schema"
	ValueValidatorTypeValidJson    ValueValidatorType = "valid_json"
	ValueValidatorTypeValidInteger ValueValidatorType = "valid_integer"
	ValueValidatorTypeValidDecimal ValueValidatorType = "valid_decimal"
	ValueValidatorTypeValidRegex   ValueValidatorType = "valid_regex"
)

func (e *ValueValidatorType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ValueValidatorType(s)
	case string:
		*e = ValueValidatorType(s)
	default:
		return fmt.Errorf("unsupported scan type for ValueValidatorType: %T", src)
	}
	return nil
}

type NullValueValidatorType struct {
	ValueValidatorType ValueValidatorType
	Valid              bool // Valid is true if ValueValidatorType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullValueValidatorType) Scan(value interface{}) error {
	if value == nil {
		ns.ValueValidatorType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ValueValidatorType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullValueValidatorType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ValueValidatorType), nil
}

type Changeset struct {
	ID        uint
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uint
	State     ChangesetState
	AppliedAt *time.Time
}

type ChangesetAction struct {
	ID          uint
	CreatedAt   time.Time
	ChangesetID uint
	UserID      uint
	Type        ChangesetActionType
	Comment     *string
}

type ChangesetChange struct {
	ID                             uint
	CreatedAt                      time.Time
	ChangesetID                    uint
	Type                           ChangesetChangeType
	Kind                           ChangesetChangeKind
	FeatureVersionID               *uint
	PreviousFeatureVersionID       *uint
	ServiceVersionID               uint
	PreviousServiceVersionID       *uint
	FeatureVersionServiceVersionID *uint
	KeyID                          *uint
	NewVariationValueID            *uint
	OldVariationValueID            *uint
}

type Feature struct {
	ID          uint
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
	ServiceID   uint
}

type FeatureVersion struct {
	ID        uint
	CreatedAt time.Time
	ValidFrom *time.Time
	ValidTo   *time.Time
	Version   int
	FeatureID uint
}

type FeatureVersionServiceVersion struct {
	ID               uint
	CreatedAt        time.Time
	ValidFrom        *time.Time
	ValidTo          *time.Time
	FeatureVersionID uint
	ServiceVersionID uint
}

type Key struct {
	ID                  uint
	CreatedAt           time.Time
	UpdatedAt           time.Time
	ValidFrom           *time.Time
	ValidTo             *time.Time
	Name                string
	Description         *string
	ValueTypeID         uint
	FeatureVersionID    uint
	ValidatorsUpdatedAt time.Time
}

type Service struct {
	ID            uint
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Description   string
	ServiceTypeID uint
}

type ServiceType struct {
	ID        uint
	CreatedAt time.Time
	Name      string
}

type ServiceTypeVariationProperty struct {
	ID                  uint
	CreatedAt           time.Time
	UpdatedAt           time.Time
	Priority            int
	ServiceTypeID       uint
	VariationPropertyID uint
}

type ServiceVersion struct {
	ID        uint
	CreatedAt time.Time
	UpdatedAt time.Time
	ValidFrom *time.Time
	ValidTo   *time.Time
	ServiceID uint
	Version   int
	Published bool
}

type User struct {
	ID                  uint
	CreatedAt           time.Time
	UpdatedAt           time.Time
	DeletedAt           *time.Time
	Name                string
	Password            string
	GlobalAdministrator bool
}

type UserPermission struct {
	ID                 uint
	Kind               UserPermissionKind
	UserID             uint
	ServiceID          uint
	FeatureID          *uint
	KeyID              *uint
	VariationContextID *uint
	Permission         PermissionLevel
	CreatedAt          time.Time
}

type ValueType struct {
	ID   uint
	Kind ValueTypeKind
	Name string
}

type ValueValidator struct {
	ID            uint
	ValueTypeID   *uint
	KeyID         *uint
	ValidatorType ValueValidatorType
	Parameter     *string
	ErrorText     *string
}

type VariationContext struct {
	ID        uint
	CreatedAt time.Time
}

type VariationContextVariationPropertyValue struct {
	VariationContextID       uint
	VariationPropertyValueID uint
}

type VariationProperty struct {
	ID          uint
	Name        string
	DisplayName string
	CreatedAt   time.Time
}

type VariationPropertyValue struct {
	ID                  uint
	VariationPropertyID uint
	Value               string
	ParentID            *uint
	OrderIndex          int
	Archived            bool
	CreatedAt           time.Time
	UpdatedAt           time.Time
}

type VariationValue struct {
	ID                 uint
	ValidFrom          *time.Time
	ValidTo            *time.Time
	KeyID              uint
	VariationContextID uint
	Data               string
}
