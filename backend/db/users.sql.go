// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO user_permissions (user_id, kind, service_id, feature_id, key_id, permission, variation_context_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreatePermissionParams struct {
	UserID             uint
	Kind               UserPermissionKind
	ServiceID          uint
	FeatureID          *uint
	KeyID              *uint
	Permission         PermissionLevel
	VariationContextID *uint
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (uint, error) {
	row := q.db.QueryRow(ctx, createPermission,
		arg.UserID,
		arg.Kind,
		arg.ServiceID,
		arg.FeatureID,
		arg.KeyID,
		arg.Permission,
		arg.VariationContextID,
	)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, password, global_administrator)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateUserParams struct {
	Name                string
	Password            string
	GlobalAdministrator bool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uint, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Password, arg.GlobalAdministrator)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, deleted_at, name, password, global_administrator
FROM users
WHERE id = $1
    AND deleted_at IS NULL
`

func (q *Queries) GetUserByID(ctx context.Context, userID uint) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Password,
		&i.GlobalAdministrator,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, created_at, updated_at, deleted_at, name, password, global_administrator
FROM users
WHERE name = $1
    AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Name,
		&i.Password,
		&i.GlobalAdministrator,
	)
	return i, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT up.id,
    up.service_id,
    up.feature_id,
    up.key_id,
    up.permission,
    up.variation_context_id
FROM user_permissions up
WHERE up.user_id = $1
`

type GetUserPermissionsRow struct {
	ID                 uint
	ServiceID          uint
	FeatureID          *uint
	KeyID              *uint
	Permission         PermissionLevel
	VariationContextID *uint
}

func (q *Queries) GetUserPermissions(ctx context.Context, userID uint) ([]GetUserPermissionsRow, error) {
	rows, err := q.db.Query(ctx, getUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPermissionsRow
	for rows.Next() {
		var i GetUserPermissionsRow
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.FeatureID,
			&i.KeyID,
			&i.Permission,
			&i.VariationContextID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
