// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: variation_values.sql

package db

import (
	"context"
	"time"
)

const createVariationValue = `-- name: CreateVariationValue :one
INSERT INTO variation_values (key_id, variation_context_id, data)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateVariationValueParams struct {
	KeyID              uint
	VariationContextID uint
	Data               string
}

func (q *Queries) CreateVariationValue(ctx context.Context, arg CreateVariationValueParams) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationValue, arg.KeyID, arg.VariationContextID, arg.Data)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteVariationValue = `-- name: DeleteVariationValue :exec
DELETE FROM variation_values
WHERE id = $1
`

func (q *Queries) DeleteVariationValue(ctx context.Context, variationValueID uint) error {
	_, err := q.db.Exec(ctx, deleteVariationValue, variationValueID)
	return err
}

const endValueValidity = `-- name: EndValueValidity :exec
UPDATE variation_values
SET valid_to = $1
WHERE id = $2
`

type EndValueValidityParams struct {
	ValidTo          *time.Time
	VariationValueID uint
}

func (q *Queries) EndValueValidity(ctx context.Context, arg EndValueValidityParams) error {
	_, err := q.db.Exec(ctx, endValueValidity, arg.ValidTo, arg.VariationValueID)
	return err
}

const getVariationValue = `-- name: GetVariationValue :one
SELECT vv.id, vv.valid_from, vv.valid_to, vv.key_id, vv.variation_context_id, vv.data
FROM variation_values vv
WHERE vv.id = $1
    AND is_variation_value_valid_in_changeset(vv, $2)
LIMIT 1
`

type GetVariationValueParams struct {
	VariationValueID uint
	ChangesetID      uint
}

func (q *Queries) GetVariationValue(ctx context.Context, arg GetVariationValueParams) (VariationValue, error) {
	row := q.db.QueryRow(ctx, getVariationValue, arg.VariationValueID, arg.ChangesetID)
	var i VariationValue
	err := row.Scan(
		&i.ID,
		&i.ValidFrom,
		&i.ValidTo,
		&i.KeyID,
		&i.VariationContextID,
		&i.Data,
	)
	return i, err
}

const getVariationValueIDByVariationContextID = `-- name: GetVariationValueIDByVariationContextID :one
SELECT id
FROM variation_values vv
WHERE vv.key_id = $1
    AND vv.variation_context_id = $2
    AND is_variation_value_valid_in_changeset(vv, $3)
LIMIT 1
`

type GetVariationValueIDByVariationContextIDParams struct {
	KeyID              uint
	VariationContextID uint
	ChangesetID        uint
}

func (q *Queries) GetVariationValueIDByVariationContextID(ctx context.Context, arg GetVariationValueIDByVariationContextIDParams) (uint, error) {
	row := q.db.QueryRow(ctx, getVariationValueIDByVariationContextID, arg.KeyID, arg.VariationContextID, arg.ChangesetID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getVariationValuesForKey = `-- name: GetVariationValuesForKey :many
SELECT vv.id, vv.valid_from, vv.valid_to, vv.key_id, vv.variation_context_id, vv.data
FROM variation_values vv
WHERE vv.key_id = $1
    AND is_variation_value_valid_in_changeset(vv, $2)
`

type GetVariationValuesForKeyParams struct {
	KeyID       uint
	ChangesetID uint
}

func (q *Queries) GetVariationValuesForKey(ctx context.Context, arg GetVariationValuesForKeyParams) ([]VariationValue, error) {
	rows, err := q.db.Query(ctx, getVariationValuesForKey, arg.KeyID, arg.ChangesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VariationValue
	for rows.Next() {
		var i VariationValue
		if err := rows.Scan(
			&i.ID,
			&i.ValidFrom,
			&i.ValidTo,
			&i.KeyID,
			&i.VariationContextID,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const startValueValidity = `-- name: StartValueValidity :exec
UPDATE variation_values
SET valid_from = $1
WHERE id = $2
`

type StartValueValidityParams struct {
	ValidFrom        *time.Time
	VariationValueID uint
}

func (q *Queries) StartValueValidity(ctx context.Context, arg StartValueValidityParams) error {
	_, err := q.db.Exec(ctx, startValueValidity, arg.ValidFrom, arg.VariationValueID)
	return err
}

const updateVariationValue = `-- name: UpdateVariationValue :exec
UPDATE variation_values
SET data = $1,
    variation_context_id = $2
WHERE id = $3
`

type UpdateVariationValueParams struct {
	Data               string
	VariationContextID uint
	VariationValueID   uint
}

func (q *Queries) UpdateVariationValue(ctx context.Context, arg UpdateVariationValueParams) error {
	_, err := q.db.Exec(ctx, updateVariationValue, arg.Data, arg.VariationContextID, arg.VariationValueID)
	return err
}
