// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: service_types.sql

package db

import (
	"context"
	"time"
)

const createServiceType = `-- name: CreateServiceType :one
INSERT INTO service_types(name, created_at)
    VALUES ($1, now())
RETURNING
    id
`

func (q *Queries) CreateServiceType(ctx context.Context, name string) (uint, error) {
	row := q.db.QueryRow(ctx, createServiceType, name)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createServiceTypeVariationPropertyLink = `-- name: CreateServiceTypeVariationPropertyLink :one
INSERT INTO service_type_variation_properties(service_type_id, variation_property_id, priority)
    VALUES ($1, $2,(
            SELECT
                COALESCE(MAX(priority), 0) + 1
            FROM
                service_type_variation_properties
            WHERE
                service_type_id = $1))
RETURNING
    id
`

type CreateServiceTypeVariationPropertyLinkParams struct {
	ServiceTypeID       uint
	VariationPropertyID uint
}

func (q *Queries) CreateServiceTypeVariationPropertyLink(ctx context.Context, arg CreateServiceTypeVariationPropertyLinkParams) (uint, error) {
	row := q.db.QueryRow(ctx, createServiceTypeVariationPropertyLink, arg.ServiceTypeID, arg.VariationPropertyID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteServiceType = `-- name: DeleteServiceType :exec
DELETE FROM service_types
WHERE id = $1
`

func (q *Queries) DeleteServiceType(ctx context.Context, id uint) error {
	_, err := q.db.Exec(ctx, deleteServiceType, id)
	return err
}

const deleteServiceTypeVariationPropertyLink = `-- name: DeleteServiceTypeVariationPropertyLink :exec
DELETE FROM service_type_variation_properties
WHERE service_type_id = $1
    AND variation_property_id = $2
`

type DeleteServiceTypeVariationPropertyLinkParams struct {
	ServiceTypeID       uint
	VariationPropertyID uint
}

func (q *Queries) DeleteServiceTypeVariationPropertyLink(ctx context.Context, arg DeleteServiceTypeVariationPropertyLinkParams) error {
	_, err := q.db.Exec(ctx, deleteServiceTypeVariationPropertyLink, arg.ServiceTypeID, arg.VariationPropertyID)
	return err
}

const getServiceType = `-- name: GetServiceType :one
SELECT
    st.id, st.created_at, st.name,
(
        SELECT
            COUNT(*)::int
        FROM
            services s
        WHERE
            s.service_type_id = st.id) AS usage_count
FROM
    service_types st
WHERE
    st.id = $1
LIMIT 1
`

type GetServiceTypeRow struct {
	ID         uint
	CreatedAt  time.Time
	Name       string
	UsageCount int
}

func (q *Queries) GetServiceType(ctx context.Context, serviceTypeID uint) (GetServiceTypeRow, error) {
	row := q.db.QueryRow(ctx, getServiceType, serviceTypeID)
	var i GetServiceTypeRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.UsageCount,
	)
	return i, err
}

const getServiceTypeIDByName = `-- name: GetServiceTypeIDByName :one
SELECT
    id
FROM
    service_types
WHERE
    name = $1
LIMIT 1
`

func (q *Queries) GetServiceTypeIDByName(ctx context.Context, name string) (uint, error) {
	row := q.db.QueryRow(ctx, getServiceTypeIDByName, name)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getServiceTypeVariationPropertyLinks = `-- name: GetServiceTypeVariationPropertyLinks :many
WITH usage AS (
    SELECT
        vpv.variation_property_id,
        COUNT(vv.id)::int AS usage_count
    FROM
        variation_property_values vpv
        JOIN variation_context_variation_property_values vcvpv ON vcvpv.variation_property_value_id = vpv.id
        JOIN variation_values vv ON vv.variation_context_id = vcvpv.variation_context_id
        JOIN keys k ON k.id = vv.key_id
        JOIN feature_versions fv ON fv.id = k.feature_version_id
        JOIN feature_version_service_versions fvsv ON fvsv.feature_version_id = fv.id
        JOIN service_versions sv ON sv.id = fvsv.service_version_id
        JOIN services s ON s.id = sv.service_id
    WHERE
        s.service_type_id = $1
    GROUP BY
        vpv.variation_property_id
)
SELECT
    stvp.id,
    stvp.priority,
    vp.name,
    vp.display_name,
    vp.id AS property_id,
    COALESCE(u.usage_count, 0) AS usage_count
FROM
    service_type_variation_properties stvp
    JOIN variation_properties vp ON stvp.variation_property_id = vp.id
    LEFT JOIN usage u ON stvp.variation_property_id = u.variation_property_id
WHERE
    stvp.service_type_id = $1
ORDER BY
    stvp.priority
`

type GetServiceTypeVariationPropertyLinksRow struct {
	ID          uint
	Priority    int
	Name        string
	DisplayName string
	PropertyID  uint
	UsageCount  int
}

func (q *Queries) GetServiceTypeVariationPropertyLinks(ctx context.Context, serviceTypeID uint) ([]GetServiceTypeVariationPropertyLinksRow, error) {
	rows, err := q.db.Query(ctx, getServiceTypeVariationPropertyLinks, serviceTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceTypeVariationPropertyLinksRow
	for rows.Next() {
		var i GetServiceTypeVariationPropertyLinksRow
		if err := rows.Scan(
			&i.ID,
			&i.Priority,
			&i.Name,
			&i.DisplayName,
			&i.PropertyID,
			&i.UsageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceTypes = `-- name: GetServiceTypes :many
SELECT
    id, created_at, name
FROM
    service_types
ORDER BY
    name
`

func (q *Queries) GetServiceTypes(ctx context.Context) ([]ServiceType, error) {
	rows, err := q.db.Query(ctx, getServiceTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceType
	for rows.Next() {
		var i ServiceType
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isVariationPropertyLinkedToServiceType = `-- name: IsVariationPropertyLinkedToServiceType :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            service_type_variation_properties
        WHERE
            service_type_id = $1
            AND variation_property_id = $2)
`

type IsVariationPropertyLinkedToServiceTypeParams struct {
	ServiceTypeID       uint
	VariationPropertyID uint
}

func (q *Queries) IsVariationPropertyLinkedToServiceType(ctx context.Context, arg IsVariationPropertyLinkedToServiceTypeParams) (bool, error) {
	row := q.db.QueryRow(ctx, isVariationPropertyLinkedToServiceType, arg.ServiceTypeID, arg.VariationPropertyID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateServiceTypeVariationPropertyPriority = `-- name: UpdateServiceTypeVariationPropertyPriority :exec
WITH source AS (
    SELECT
        sstvp.id,
        sstvp.priority,
        sstvp.service_type_id
    FROM
        service_type_variation_properties sstvp
    WHERE
        sstvp.id = $1
),
bounds AS (
    SELECT
        MIN(bstvp.priority)::int AS min_priority,
        MAX(bstvp.priority)::int AS max_priority
    FROM
        source s
        JOIN service_type_variation_properties bstvp ON bstvp.service_type_id = s.service_type_id
),
params AS (
    SELECT
        source.id,
        source.service_type_id,
        source.priority AS source_priority,
        GREATEST(bounds.min_priority, LEAST($2::int, bounds.max_priority)) AS target_priority
    FROM
        source,
        bounds)
UPDATE
    service_type_variation_properties stvp
SET
    priority = CASE WHEN stvp.priority = params.source_priority THEN
        params.target_priority
    WHEN params.source_priority < params.target_priority THEN
        stvp.priority - 1
    ELSE
        stvp.priority + 1
    END,
    updated_at = now()
FROM
    params
WHERE
    stvp.service_type_id = params.service_type_id
    AND stvp.priority BETWEEN LEAST(params.source_priority, params.target_priority)
    AND GREATEST(params.source_priority, params.target_priority)
`

type UpdateServiceTypeVariationPropertyPriorityParams struct {
	ID             uint
	TargetPriority int
}

func (q *Queries) UpdateServiceTypeVariationPropertyPriority(ctx context.Context, arg UpdateServiceTypeVariationPropertyPriorityParams) error {
	_, err := q.db.Exec(ctx, updateServiceTypeVariationPropertyPriority, arg.ID, arg.TargetPriority)
	return err
}
