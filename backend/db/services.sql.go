// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: services.sql

package db

import (
	"context"
	"time"
)

const createService = `-- name: CreateService :one
INSERT INTO services (name, description, service_type_id)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateServiceParams struct {
	Name          string
	Description   string
	ServiceTypeID uint
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (uint, error) {
	row := q.db.QueryRow(ctx, createService, arg.Name, arg.Description, arg.ServiceTypeID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createServiceType = `-- name: CreateServiceType :one
INSERT INTO service_types (name)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateServiceType(ctx context.Context, name string) (uint, error) {
	row := q.db.QueryRow(ctx, createServiceType, name)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const createServiceVersion = `-- name: CreateServiceVersion :one
INSERT INTO service_versions (service_id, version)
VALUES ($1, $2)
RETURNING id
`

type CreateServiceVersionParams struct {
	ServiceID uint
	Version   int
}

func (q *Queries) CreateServiceVersion(ctx context.Context, arg CreateServiceVersionParams) (uint, error) {
	row := q.db.QueryRow(ctx, createServiceVersion, arg.ServiceID, arg.Version)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services
WHERE id = $1
`

func (q *Queries) DeleteService(ctx context.Context, serviceID uint) error {
	_, err := q.db.Exec(ctx, deleteService, serviceID)
	return err
}

const deleteServiceVersion = `-- name: DeleteServiceVersion :exec
DELETE FROM service_versions
WHERE id = $1
`

func (q *Queries) DeleteServiceVersion(ctx context.Context, serviceVersionID uint) error {
	_, err := q.db.Exec(ctx, deleteServiceVersion, serviceVersionID)
	return err
}

const endServiceVersionValidity = `-- name: EndServiceVersionValidity :exec
UPDATE service_versions
SET valid_to = $1
WHERE id = $2
`

type EndServiceVersionValidityParams struct {
	ValidTo          *time.Time
	ServiceVersionID uint
}

func (q *Queries) EndServiceVersionValidity(ctx context.Context, arg EndServiceVersionValidityParams) error {
	_, err := q.db.Exec(ctx, endServiceVersionValidity, arg.ValidTo, arg.ServiceVersionID)
	return err
}

const getServiceIDByName = `-- name: GetServiceIDByName :one
SELECT id
FROM services
WHERE name = $1
LIMIT 1
`

func (q *Queries) GetServiceIDByName(ctx context.Context, name string) (uint, error) {
	row := q.db.QueryRow(ctx, getServiceIDByName, name)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getServiceType = `-- name: GetServiceType :one
SELECT id, created_at, name
FROM service_types
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetServiceType(ctx context.Context, serviceTypeID uint) (ServiceType, error) {
	row := q.db.QueryRow(ctx, getServiceType, serviceTypeID)
	var i ServiceType
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Name)
	return i, err
}

const getServiceTypes = `-- name: GetServiceTypes :many
SELECT id, created_at, name
FROM service_types
ORDER BY name
`

func (q *Queries) GetServiceTypes(ctx context.Context) ([]ServiceType, error) {
	rows, err := q.db.Query(ctx, getServiceTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceType
	for rows.Next() {
		var i ServiceType
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceVersion = `-- name: GetServiceVersion :one
SELECT sv.id, sv.created_at, sv.updated_at, sv.valid_from, sv.valid_to, sv.service_id, sv.version, sv.published,
    s.name as service_name,
    s.description as service_description,
    s.service_type_id as service_type_id,
    st.name as service_type_name
FROM service_versions sv
    JOIN services s ON s.id = sv.service_id
    JOIN service_types st ON st.id = s.service_type_id
WHERE sv.id = $1
LIMIT 1
`

type GetServiceVersionRow struct {
	ID                 uint
	CreatedAt          time.Time
	UpdatedAt          time.Time
	ValidFrom          *time.Time
	ValidTo            *time.Time
	ServiceID          uint
	Version            int
	Published          bool
	ServiceName        string
	ServiceDescription string
	ServiceTypeID      uint
	ServiceTypeName    string
}

func (q *Queries) GetServiceVersion(ctx context.Context, serviceVersionID uint) (GetServiceVersionRow, error) {
	row := q.db.QueryRow(ctx, getServiceVersion, serviceVersionID)
	var i GetServiceVersionRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ValidFrom,
		&i.ValidTo,
		&i.ServiceID,
		&i.Version,
		&i.Published,
		&i.ServiceName,
		&i.ServiceDescription,
		&i.ServiceTypeID,
		&i.ServiceTypeName,
	)
	return i, err
}

const getServiceVersions = `-- name: GetServiceVersions :many
SELECT sv.id, sv.created_at, sv.updated_at, sv.valid_from, sv.valid_to, sv.service_id, sv.version, sv.published,
    s.name as service_name,
    s.description as service_description,
    s.service_type_id as service_type_id,
    st.name as service_type_name
FROM service_versions sv
    JOIN services s ON s.id = sv.service_id
    JOIN service_types st ON st.id = s.service_type_id
WHERE (sv.valid_from IS NOT NULL)
    OR (
        sv.valid_from IS NULL
        AND EXISTS (
            SELECT csc.id
            FROM changeset_changes csc
            WHERE csc.changeset_id = $1
                AND csc.type = 'create'
                AND csc.kind = 'service_version'
                AND csc.service_version_id = sv.id
            LIMIT 1
        )
    )
ORDER BY s.name, sv.version ASC
`

type GetServiceVersionsRow struct {
	ID                 uint
	CreatedAt          time.Time
	UpdatedAt          time.Time
	ValidFrom          *time.Time
	ValidTo            *time.Time
	ServiceID          uint
	Version            int
	Published          bool
	ServiceName        string
	ServiceDescription string
	ServiceTypeID      uint
	ServiceTypeName    string
}

func (q *Queries) GetServiceVersions(ctx context.Context, changesetID uint) ([]GetServiceVersionsRow, error) {
	rows, err := q.db.Query(ctx, getServiceVersions, changesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceVersionsRow
	for rows.Next() {
		var i GetServiceVersionsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ValidFrom,
			&i.ValidTo,
			&i.ServiceID,
			&i.Version,
			&i.Published,
			&i.ServiceName,
			&i.ServiceDescription,
			&i.ServiceTypeID,
			&i.ServiceTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getServiceVersionsForService = `-- name: GetServiceVersionsForService :many
SELECT sv.id,
    sv.version
FROM service_versions sv
    JOIN services s ON s.id = sv.service_id
WHERE sv.service_id = $1
    AND (
        sv.valid_from IS NOT NULL
        OR (
            sv.valid_from IS NULL
            AND EXISTS (
                SELECT csc.id
                FROM changeset_changes csc
                WHERE csc.changeset_id = $2
                    AND csc.type = 'create'
                    AND csc.kind = 'service_version'
                    AND csc.service_version_id = sv.id
                LIMIT 1
            )
        )
    )
ORDER BY sv.version ASC
`

type GetServiceVersionsForServiceParams struct {
	ServiceID   uint
	ChangesetID uint
}

type GetServiceVersionsForServiceRow struct {
	ID      uint
	Version int
}

func (q *Queries) GetServiceVersionsForService(ctx context.Context, arg GetServiceVersionsForServiceParams) ([]GetServiceVersionsForServiceRow, error) {
	rows, err := q.db.Query(ctx, getServiceVersionsForService, arg.ServiceID, arg.ChangesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetServiceVersionsForServiceRow
	for rows.Next() {
		var i GetServiceVersionsForServiceRow
		if err := rows.Scan(&i.ID, &i.Version); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishServiceVersion = `-- name: PublishServiceVersion :exec
UPDATE service_versions
SET published = TRUE
WHERE id = $1
`

func (q *Queries) PublishServiceVersion(ctx context.Context, serviceVersionID uint) error {
	_, err := q.db.Exec(ctx, publishServiceVersion, serviceVersionID)
	return err
}

const startServiceVersionValidity = `-- name: StartServiceVersionValidity :exec
UPDATE service_versions
SET valid_from = $1
WHERE id = $2
`

type StartServiceVersionValidityParams struct {
	ValidFrom        *time.Time
	ServiceVersionID uint
}

func (q *Queries) StartServiceVersionValidity(ctx context.Context, arg StartServiceVersionValidityParams) error {
	_, err := q.db.Exec(ctx, startServiceVersionValidity, arg.ValidFrom, arg.ServiceVersionID)
	return err
}

const updateService = `-- name: UpdateService :exec
UPDATE services
SET description = $1
WHERE id = $2
`

type UpdateServiceParams struct {
	Description string
	ServiceID   uint
}

func (q *Queries) UpdateService(ctx context.Context, arg UpdateServiceParams) error {
	_, err := q.db.Exec(ctx, updateService, arg.Description, arg.ServiceID)
	return err
}
