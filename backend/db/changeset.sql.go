// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: changeset.sql

package db

import (
	"context"
	"time"
)

const addChangesetAction = `-- name: AddChangesetAction :exec
INSERT INTO changeset_actions (changeset_id, user_id, type, comment)
VALUES (
        $1,
        $2,
        $3,
        $4
    )
`

type AddChangesetActionParams struct {
	ChangesetID uint
	UserID      uint
	Type        ChangesetActionType
	Comment     *string
}

func (q *Queries) AddChangesetAction(ctx context.Context, arg AddChangesetActionParams) error {
	_, err := q.db.Exec(ctx, addChangesetAction,
		arg.ChangesetID,
		arg.UserID,
		arg.Type,
		arg.Comment,
	)
	return err
}

const addCreateFeatureVersionChange = `-- name: AddCreateFeatureVersionChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        feature_version_id,
        previous_feature_version_id,
        service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3,
        $4::bigint,
        'create',
        'feature_version'
    )
`

type AddCreateFeatureVersionChangeParams struct {
	ChangesetID              uint
	FeatureVersionID         uint
	PreviousFeatureVersionID *uint
	ServiceVersionID         uint
}

func (q *Queries) AddCreateFeatureVersionChange(ctx context.Context, arg AddCreateFeatureVersionChangeParams) error {
	_, err := q.db.Exec(ctx, addCreateFeatureVersionChange,
		arg.ChangesetID,
		arg.FeatureVersionID,
		arg.PreviousFeatureVersionID,
		arg.ServiceVersionID,
	)
	return err
}

const addCreateFeatureVersionServiceVersionChange = `-- name: AddCreateFeatureVersionServiceVersionChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        feature_version_service_version_id,
        feature_version_id,
        service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3::bigint,
        $4::bigint,
        'create',
        'feature_version_service_version'
    )
`

type AddCreateFeatureVersionServiceVersionChangeParams struct {
	ChangesetID                    uint
	FeatureVersionServiceVersionID uint
	FeatureVersionID               uint
	ServiceVersionID               uint
}

func (q *Queries) AddCreateFeatureVersionServiceVersionChange(ctx context.Context, arg AddCreateFeatureVersionServiceVersionChangeParams) error {
	_, err := q.db.Exec(ctx, addCreateFeatureVersionServiceVersionChange,
		arg.ChangesetID,
		arg.FeatureVersionServiceVersionID,
		arg.FeatureVersionID,
		arg.ServiceVersionID,
	)
	return err
}

const addCreateKeyChange = `-- name: AddCreateKeyChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        key_id,
        feature_version_id,
        service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3::bigint,
        $4::bigint,
        'create',
        'key'
    )
`

type AddCreateKeyChangeParams struct {
	ChangesetID      uint
	KeyID            uint
	FeatureVersionID uint
	ServiceVersionID uint
}

func (q *Queries) AddCreateKeyChange(ctx context.Context, arg AddCreateKeyChangeParams) error {
	_, err := q.db.Exec(ctx, addCreateKeyChange,
		arg.ChangesetID,
		arg.KeyID,
		arg.FeatureVersionID,
		arg.ServiceVersionID,
	)
	return err
}

const addCreateServiceVersionChange = `-- name: AddCreateServiceVersionChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        service_version_id,
        previous_service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3,
        'create',
        'service_version'
    )
`

type AddCreateServiceVersionChangeParams struct {
	ChangesetID              uint
	ServiceVersionID         uint
	PreviousServiceVersionID *uint
}

func (q *Queries) AddCreateServiceVersionChange(ctx context.Context, arg AddCreateServiceVersionChangeParams) error {
	_, err := q.db.Exec(ctx, addCreateServiceVersionChange, arg.ChangesetID, arg.ServiceVersionID, arg.PreviousServiceVersionID)
	return err
}

const addCreateVariationValueChange = `-- name: AddCreateVariationValueChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        new_variation_value_id,
        feature_version_id,
        key_id,
        service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3::bigint,
        $4::bigint,
        $5::bigint,
        'create',
        'variation_value'
    )
`

type AddCreateVariationValueChangeParams struct {
	ChangesetID         uint
	NewVariationValueID uint
	FeatureVersionID    uint
	KeyID               uint
	ServiceVersionID    uint
}

func (q *Queries) AddCreateVariationValueChange(ctx context.Context, arg AddCreateVariationValueChangeParams) error {
	_, err := q.db.Exec(ctx, addCreateVariationValueChange,
		arg.ChangesetID,
		arg.NewVariationValueID,
		arg.FeatureVersionID,
		arg.KeyID,
		arg.ServiceVersionID,
	)
	return err
}

const addDeleteFeatureVersionServiceVersionChange = `-- name: AddDeleteFeatureVersionServiceVersionChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        feature_version_service_version_id,
        feature_version_id,
        service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3::bigint,
        $4::bigint,
        'delete',
        'feature_version_service_version'
    )
`

type AddDeleteFeatureVersionServiceVersionChangeParams struct {
	ChangesetID                    uint
	FeatureVersionServiceVersionID uint
	FeatureVersionID               uint
	ServiceVersionID               uint
}

func (q *Queries) AddDeleteFeatureVersionServiceVersionChange(ctx context.Context, arg AddDeleteFeatureVersionServiceVersionChangeParams) error {
	_, err := q.db.Exec(ctx, addDeleteFeatureVersionServiceVersionChange,
		arg.ChangesetID,
		arg.FeatureVersionServiceVersionID,
		arg.FeatureVersionID,
		arg.ServiceVersionID,
	)
	return err
}

const addDeleteVariationValueChange = `-- name: AddDeleteVariationValueChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        old_variation_value_id,
        feature_version_id,
        key_id,
        service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3::bigint,
        $4::bigint,
        $5::bigint,
        'delete',
        'variation_value'
    )
`

type AddDeleteVariationValueChangeParams struct {
	ChangesetID         uint
	OldVariationValueID uint
	FeatureVersionID    uint
	KeyID               uint
	ServiceVersionID    uint
}

func (q *Queries) AddDeleteVariationValueChange(ctx context.Context, arg AddDeleteVariationValueChangeParams) error {
	_, err := q.db.Exec(ctx, addDeleteVariationValueChange,
		arg.ChangesetID,
		arg.OldVariationValueID,
		arg.FeatureVersionID,
		arg.KeyID,
		arg.ServiceVersionID,
	)
	return err
}

const addUpdateVariationValueChange = `-- name: AddUpdateVariationValueChange :exec
INSERT INTO changeset_changes (
        changeset_id,
        new_variation_value_id,
        old_variation_value_id,
        feature_version_id,
        key_id,
        service_version_id,
        type,
        kind
    )
VALUES (
        $1,
        $2::bigint,
        $3::bigint,
        $4::bigint,
        $5::bigint,
        $6::bigint,
        'update',
        'variation_value'
    )
`

type AddUpdateVariationValueChangeParams struct {
	ChangesetID         uint
	NewVariationValueID uint
	OldVariationValueID uint
	FeatureVersionID    uint
	KeyID               uint
	ServiceVersionID    uint
}

func (q *Queries) AddUpdateVariationValueChange(ctx context.Context, arg AddUpdateVariationValueChangeParams) error {
	_, err := q.db.Exec(ctx, addUpdateVariationValueChange,
		arg.ChangesetID,
		arg.NewVariationValueID,
		arg.OldVariationValueID,
		arg.FeatureVersionID,
		arg.KeyID,
		arg.ServiceVersionID,
	)
	return err
}

const createChangeset = `-- name: CreateChangeset :one
INSERT INTO changesets (user_id, state)
VALUES ($1, 'open')
RETURNING id
`

func (q *Queries) CreateChangeset(ctx context.Context, userID uint) (uint, error) {
	row := q.db.QueryRow(ctx, createChangeset, userID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteChange = `-- name: DeleteChange :exec
DELETE FROM changeset_changes
WHERE id = $1
`

func (q *Queries) DeleteChange(ctx context.Context, changeID uint) error {
	_, err := q.db.Exec(ctx, deleteChange, changeID)
	return err
}

const getChangeForFeatureVersionServiceVersion = `-- name: GetChangeForFeatureVersionServiceVersion :one
SELECT csc.id,
    csc.type,
    csc.feature_version_service_version_id
FROM changeset_changes csc
WHERE csc.changeset_id = $1
    AND csc.service_version_id = $2::bigint
    AND csc.feature_version_id = $3::bigint
    AND csc.kind = 'feature_version_service_version'
LIMIT 1
`

type GetChangeForFeatureVersionServiceVersionParams struct {
	ChangesetID      uint
	ServiceVersionID uint
	FeatureVersionID uint
}

type GetChangeForFeatureVersionServiceVersionRow struct {
	ID                             uint
	Type                           ChangesetChangeType
	FeatureVersionServiceVersionID *uint
}

func (q *Queries) GetChangeForFeatureVersionServiceVersion(ctx context.Context, arg GetChangeForFeatureVersionServiceVersionParams) (GetChangeForFeatureVersionServiceVersionRow, error) {
	row := q.db.QueryRow(ctx, getChangeForFeatureVersionServiceVersion, arg.ChangesetID, arg.ServiceVersionID, arg.FeatureVersionID)
	var i GetChangeForFeatureVersionServiceVersionRow
	err := row.Scan(&i.ID, &i.Type, &i.FeatureVersionServiceVersionID)
	return i, err
}

const getChangeForVariationValue = `-- name: GetChangeForVariationValue :one
SELECT csc.id,
    csc.type,
    csc.new_variation_value_id,
    csc.old_variation_value_id,
    vv.variation_context_id
FROM changeset_changes csc
    JOIN variation_values vv ON vv.id = COALESCE(
        csc.new_variation_value_id,
        csc.old_variation_value_id
    )
WHERE csc.changeset_id = $1
    AND (
        csc.old_variation_value_id = $2::bigint
        OR csc.new_variation_value_id = $2::bigint
    )
LIMIT 1
`

type GetChangeForVariationValueParams struct {
	ChangesetID      uint
	VariationValueID uint
}

type GetChangeForVariationValueRow struct {
	ID                  uint
	Type                ChangesetChangeType
	NewVariationValueID *uint
	OldVariationValueID *uint
	VariationContextID  uint
}

func (q *Queries) GetChangeForVariationValue(ctx context.Context, arg GetChangeForVariationValueParams) (GetChangeForVariationValueRow, error) {
	row := q.db.QueryRow(ctx, getChangeForVariationValue, arg.ChangesetID, arg.VariationValueID)
	var i GetChangeForVariationValueRow
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.NewVariationValueID,
		&i.OldVariationValueID,
		&i.VariationContextID,
	)
	return i, err
}

const getChangeset = `-- name: GetChangeset :one
SELECT cs.id,
    cs.state,
    u.id as user_id,
    u.name as user_name
FROM changesets cs
    JOIN users u ON u.id = cs.user_id
WHERE cs.id = $1
LIMIT 1
`

type GetChangesetRow struct {
	ID       uint
	State    ChangesetState
	UserID   uint
	UserName string
}

func (q *Queries) GetChangeset(ctx context.Context, changesetID uint) (GetChangesetRow, error) {
	row := q.db.QueryRow(ctx, getChangeset, changesetID)
	var i GetChangesetRow
	err := row.Scan(
		&i.ID,
		&i.State,
		&i.UserID,
		&i.UserName,
	)
	return i, err
}

const getChangesetActions = `-- name: GetChangesetActions :many
SELECT ca.id,
    ca.type,
    ca.comment,
    ca.created_at,
    u.id as user_id,
    u.name as user_name
FROM changeset_actions ca
    JOIN users u ON u.id = ca.user_id
WHERE ca.changeset_id = $1
ORDER BY ca.id
`

type GetChangesetActionsRow struct {
	ID        uint
	Type      ChangesetActionType
	Comment   *string
	CreatedAt time.Time
	UserID    uint
	UserName  string
}

func (q *Queries) GetChangesetActions(ctx context.Context, changesetID uint) ([]GetChangesetActionsRow, error) {
	rows, err := q.db.Query(ctx, getChangesetActions, changesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChangesetActionsRow
	for rows.Next() {
		var i GetChangesetActionsRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Comment,
			&i.CreatedAt,
			&i.UserID,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChangesetChanges = `-- name: GetChangesetChanges :many
SELECT csc.id,
    csc.type,
    csc.kind,
    sv.id as service_version_id,
    csc.previous_service_version_id,
    s.name as service_name,
    sv.version as service_version,
    fv.id as feature_version_id,
    csc.previous_feature_version_id,
    f.name as feature_name,
    fv.version as feature_version,
    k.id as key_id,
    k.name as key_name,
    nv.id as new_variation_value_id,
    nv.data as new_variation_value_data,
    ov.id as old_variation_value_id,
    ov.data as old_variation_value_data,
    vc.id as variation_context_id,
    csc.feature_version_service_version_id
FROM changeset_changes csc
    JOIN service_versions sv ON sv.id = csc.service_version_id
    JOIN services s ON s.id = sv.service_id
    LEFT JOIN feature_versions fv ON fv.id = csc.feature_version_id
    LEFT JOIN features f ON f.id = fv.feature_id
    LEFT JOIN keys k ON k.id = csc.key_id
    LEFT JOIN variation_values nv ON nv.id = csc.new_variation_value_id
    LEFT JOIN variation_values ov ON ov.id = csc.old_variation_value_id
    LEFT JOIN variation_contexts vc ON vc.id = COALESCE(nv.variation_context_id, ov.variation_context_id)
WHERE changeset_id = $1
ORDER BY csc.id
`

type GetChangesetChangesRow struct {
	ID                             uint
	Type                           ChangesetChangeType
	Kind                           ChangesetChangeKind
	ServiceVersionID               uint
	PreviousServiceVersionID       *uint
	ServiceName                    string
	ServiceVersion                 int
	FeatureVersionID               *uint
	PreviousFeatureVersionID       *uint
	FeatureName                    *string
	FeatureVersion                 *int
	KeyID                          *uint
	KeyName                        *string
	NewVariationValueID            *uint
	NewVariationValueData          *string
	OldVariationValueID            *uint
	OldVariationValueData          *string
	VariationContextID             *uint
	FeatureVersionServiceVersionID *uint
}

func (q *Queries) GetChangesetChanges(ctx context.Context, changesetID uint) ([]GetChangesetChangesRow, error) {
	rows, err := q.db.Query(ctx, getChangesetChanges, changesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetChangesetChangesRow
	for rows.Next() {
		var i GetChangesetChangesRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Kind,
			&i.ServiceVersionID,
			&i.PreviousServiceVersionID,
			&i.ServiceName,
			&i.ServiceVersion,
			&i.FeatureVersionID,
			&i.PreviousFeatureVersionID,
			&i.FeatureName,
			&i.FeatureVersion,
			&i.KeyID,
			&i.KeyName,
			&i.NewVariationValueID,
			&i.NewVariationValueData,
			&i.OldVariationValueID,
			&i.OldVariationValueData,
			&i.VariationContextID,
			&i.FeatureVersionServiceVersionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOpenChangesetIDForUser = `-- name: GetOpenChangesetIDForUser :one
SELECT id
FROM changesets
WHERE user_id = $1
    AND state = 'open'
LIMIT 1
`

func (q *Queries) GetOpenChangesetIDForUser(ctx context.Context, userID uint) (uint, error) {
	row := q.db.QueryRow(ctx, getOpenChangesetIDForUser, userID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const setChangesetState = `-- name: SetChangesetState :exec
UPDATE changesets
SET state = $1
WHERE id = $2
`

type SetChangesetStateParams struct {
	State       ChangesetState
	ChangesetID uint
}

func (q *Queries) SetChangesetState(ctx context.Context, arg SetChangesetStateParams) error {
	_, err := q.db.Exec(ctx, setChangesetState, arg.State, arg.ChangesetID)
	return err
}
