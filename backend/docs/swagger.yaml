basePath: /api
definitions:
  auth.User:
    properties:
      id:
        type: integer
      isAuthenticated:
        type: boolean
      isGlobalAdmin:
        type: boolean
      username:
        type: string
    required:
    - id
    - isAuthenticated
    - isGlobalAdmin
    - username
    type: object
  changeset.ChangesetAction:
    properties:
      comment:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      type:
        $ref: '#/definitions/db.ChangesetActionType'
      userId:
        type: integer
      userName:
        type: string
    required:
    - createdAt
    - id
    - type
    - userId
    - userName
    type: object
  changeset.ChangesetChange:
    properties:
      featureId:
        type: integer
      featureName:
        type: string
      featureVersion:
        type: integer
      featureVersionId:
        type: integer
      featureVersionServiceVersionId:
        type: integer
      id:
        type: integer
      keyId:
        type: integer
      keyName:
        type: string
      newVariationValueData:
        type: string
      newVariationValueId:
        type: integer
      oldVariationValueData:
        type: string
      oldVariationValueId:
        type: integer
      previousFeatureVersionId:
        type: integer
      previousServiceVersionId:
        type: integer
      serviceId:
        type: integer
      serviceName:
        type: string
      serviceVersion:
        type: integer
      serviceVersionId:
        type: integer
      type:
        $ref: '#/definitions/db.ChangesetChangeType'
      variation:
        additionalProperties:
          type: string
        type: object
    required:
    - id
    - serviceName
    - serviceVersion
    - serviceVersionId
    - type
    type: object
  changeset.ChangesetDto:
    properties:
      actions:
        items:
          $ref: '#/definitions/changeset.ChangesetAction'
        type: array
      canApply:
        type: boolean
      changes:
        items:
          $ref: '#/definitions/changeset.ChangesetChange'
        type: array
      id:
        type: integer
      state:
        $ref: '#/definitions/db.ChangesetState'
      userId:
        type: integer
      userName:
        type: string
      variationContext:
        additionalProperties:
          type: string
        type: object
    required:
    - actions
    - canApply
    - changes
    - id
    - state
    - userId
    - userName
    - variationContext
    type: object
  changeset.ChangesetItemDto:
    properties:
      actionCount:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      lastActionAt:
        type: string
      state:
        $ref: '#/definitions/db.ChangesetState'
      userId:
        type: integer
      userName:
        type: string
    required:
    - actionCount
    - createdAt
    - id
    - lastActionAt
    - state
    - userId
    - userName
    type: object
  configuration.ConfigurationDto:
    properties:
      changesetId:
        type: integer
      features:
        items:
          $ref: '#/definitions/configuration.FeatureConfigurationDto'
        type: array
    type: object
  configuration.FeatureConfigurationDto:
    properties:
      keys:
        items:
          $ref: '#/definitions/configuration.KeyConfigurationDto'
        type: array
      name:
        type: string
    type: object
  configuration.KeyConfigurationDto:
    properties:
      dataType:
        type: string
      name:
        type: string
      values:
        items:
          $ref: '#/definitions/configuration.ValueConfigurationDto'
        type: array
    type: object
  configuration.ValueConfigurationDto:
    properties:
      rank:
        type: integer
      value:
        type: string
      variation:
        additionalProperties:
          type: string
        type: object
    type: object
  core.PaginatedResult-changeset_ChangesetItemDto:
    properties:
      items:
        items:
          $ref: '#/definitions/changeset.ChangesetItemDto'
        type: array
      totalCount:
        type: integer
    required:
    - items
    - totalCount
    type: object
  core.PaginatedResult-membership_UserDto:
    properties:
      items:
        items:
          $ref: '#/definitions/membership.UserDto'
        type: array
      totalCount:
        type: integer
    required:
    - items
    - totalCount
    type: object
  db.ChangesetActionType:
    enum:
    - apply
    - discard
    - stash
    - commit
    - reopen
    - comment
    type: string
    x-enum-varnames:
    - ChangesetActionTypeApply
    - ChangesetActionTypeDiscard
    - ChangesetActionTypeStash
    - ChangesetActionTypeCommit
    - ChangesetActionTypeReopen
    - ChangesetActionTypeComment
  db.ChangesetChangeType:
    enum:
    - create
    - update
    - delete
    type: string
    x-enum-varnames:
    - ChangesetChangeTypeCreate
    - ChangesetChangeTypeUpdate
    - ChangesetChangeTypeDelete
  db.ChangesetState:
    enum:
    - open
    - committed
    - applied
    - rejected
    - discarded
    - stashed
    type: string
    x-enum-varnames:
    - ChangesetStateOpen
    - ChangesetStateCommitted
    - ChangesetStateApplied
    - ChangesetStateRejected
    - ChangesetStateDiscarded
    - ChangesetStateStashed
  db.ValueTypeKind:
    enum:
    - string
    - integer
    - decimal
    - boolean
    - json
    type: string
    x-enum-varnames:
    - ValueTypeKindString
    - ValueTypeKindInteger
    - ValueTypeKindDecimal
    - ValueTypeKindBoolean
    - ValueTypeKindJson
  db.ValueValidatorType:
    enum:
    - required
    - min_length
    - max_length
    - min
    - max
    - min_decimal
    - max_decimal
    - regex
    - json_schema
    - valid_json
    - valid_integer
    - valid_decimal
    - valid_regex
    type: string
    x-enum-varnames:
    - ValueValidatorTypeRequired
    - ValueValidatorTypeMinLength
    - ValueValidatorTypeMaxLength
    - ValueValidatorTypeMin
    - ValueValidatorTypeMax
    - ValueValidatorTypeMinDecimal
    - ValueValidatorTypeMaxDecimal
    - ValueValidatorTypeRegex
    - ValueValidatorTypeJsonSchema
    - ValueValidatorTypeValidJson
    - ValueValidatorTypeValidInteger
    - ValueValidatorTypeValidDecimal
    - ValueValidatorTypeValidRegex
  echo.HTTPError:
    properties:
      message: {}
    type: object
  feature.FeatureVersionDto:
    properties:
      canEdit:
        type: boolean
      description:
        type: string
      id:
        type: integer
      isLastVersion:
        type: boolean
      name:
        type: string
      version:
        type: integer
    required:
    - canEdit
    - description
    - id
    - isLastVersion
    - name
    - version
    type: object
  feature.FeatureVersionItemDto:
    properties:
      canUnlink:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      version:
        type: integer
    required:
    - canUnlink
    - description
    - id
    - name
    - version
    type: object
  feature.FeatureVersionLinkDto:
    properties:
      featureVersionId:
        type: integer
      serviceVersionId:
        type: integer
      version:
        type: integer
    required:
    - featureVersionId
    - serviceVersionId
    - version
    type: object
  handler.AddCommentRequest:
    properties:
      comment:
        type: string
    required:
    - comment
    type: object
  handler.ApprovableChangesetCountResponse:
    properties:
      count:
        type: integer
    required:
    - count
    type: object
  handler.BooleanResponse:
    properties:
      value:
        type: boolean
    required:
    - value
    type: object
  handler.ChangesetInfoResponse:
    properties:
      id:
        type: integer
      numberOfChanges:
        type: integer
    required:
    - id
    - numberOfChanges
    type: object
  handler.CreateFeatureRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  handler.CreateKeyRequest:
    properties:
      defaultValue:
        type: string
      description:
        type: string
      name:
        type: string
      validators:
        items:
          $ref: '#/definitions/handler.ValidatorRequest'
        type: array
      valueTypeId:
        type: integer
    required:
    - name
    - validators
    - valueTypeId
    type: object
  handler.CreateResponse:
    properties:
      newId:
        type: integer
    required:
    - newId
    type: object
  handler.CreateServiceRequest:
    properties:
      description:
        type: string
      name:
        type: string
      serviceTypeId:
        type: integer
    required:
    - description
    - name
    - serviceTypeId
    type: object
  handler.CreateServiceTypeRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  handler.CreateUserRequest:
    properties:
      globalAdministrator:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - globalAdministrator
    - password
    - username
    type: object
  handler.CreateVariationPropertyRequest:
    properties:
      display_name:
        type: string
      name:
        type: string
    type: object
  handler.CreateVariationPropertyValueRequest:
    properties:
      parentId:
        type: integer
      value:
        type: string
    type: object
  handler.LinkVariationPropertyToServiceTypeRequest:
    properties:
      variation_property_id:
        type: integer
    required:
    - variation_property_id
    type: object
  handler.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handler.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  handler.TokensResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  handler.UpdateFeatureRequest:
    properties:
      description:
        type: string
    required:
    - description
    type: object
  handler.UpdateKeyRequest:
    properties:
      description:
        type: string
      validators:
        items:
          $ref: '#/definitions/handler.ValidatorRequest'
        type: array
    required:
    - validators
    type: object
  handler.UpdateServiceRequest:
    properties:
      description:
        type: string
    required:
    - description
    type: object
  handler.UpdateServiceTypeVariationPropertyPriorityRequest:
    properties:
      priority:
        type: integer
    required:
    - priority
    type: object
  handler.UpdateUserRequest:
    properties:
      globalAdministrator:
        type: boolean
    required:
    - globalAdministrator
    type: object
  handler.UpdateVariationPropertyRequest:
    properties:
      displayName:
        type: string
    required:
    - displayName
    type: object
  handler.UpdateVariationPropertyValueOrderRequest:
    properties:
      order:
        type: integer
    required:
    - order
    type: object
  handler.ValidatorRequest:
    properties:
      errorText:
        type: string
      parameter:
        type: string
      validatorType:
        $ref: '#/definitions/db.ValueValidatorType'
    required:
    - errorText
    - parameter
    - validatorType
    type: object
  handler.ValueRequest:
    properties:
      data:
        type: string
      variation:
        additionalProperties:
          type: string
        type: object
    required:
    - data
    - variation
    type: object
  key.KeyDto:
    properties:
      canEdit:
        type: boolean
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      validators:
        items:
          $ref: '#/definitions/validation.ValidatorDto'
        type: array
      valueType:
        $ref: '#/definitions/db.ValueTypeKind'
      valueTypeId:
        type: integer
      valueTypeName:
        type: string
    required:
    - canEdit
    - description
    - id
    - name
    - validators
    - valueType
    - valueTypeId
    - valueTypeName
    type: object
  key.KeyItemDto:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      valueType:
        $ref: '#/definitions/db.ValueTypeKind'
      valueTypeId:
        type: integer
      valueTypeName:
        type: string
    required:
    - description
    - id
    - name
    - valueType
    - valueTypeId
    - valueTypeName
    type: object
  membership.UserDto:
    properties:
      globalAdministrator:
        type: boolean
      id:
        type: integer
      username:
        type: string
    required:
    - globalAdministrator
    - id
    - username
    type: object
  service.ServiceDto:
    properties:
      description:
        type: string
      name:
        type: string
      versions:
        items:
          $ref: '#/definitions/service.ServiceVersionInfoDto'
        type: array
    required:
    - description
    - name
    - versions
    type: object
  service.ServiceVersionDto:
    properties:
      canEdit:
        type: boolean
      description:
        type: string
      id:
        type: integer
      isLastVersion:
        type: boolean
      name:
        type: string
      published:
        type: boolean
      serviceId:
        type: integer
      serviceTypeId:
        type: integer
      serviceTypeName:
        type: string
      version:
        type: integer
    required:
    - canEdit
    - description
    - id
    - isLastVersion
    - name
    - published
    - serviceId
    - serviceTypeId
    - serviceTypeName
    - version
    type: object
  service.ServiceVersionInfoDto:
    properties:
      id:
        type: integer
      published:
        type: boolean
      version:
        type: integer
    required:
    - id
    - published
    - version
    type: object
  service.ServiceVersionLinkDto:
    properties:
      id:
        type: integer
      version:
        type: integer
    required:
    - id
    - version
    type: object
  servicetype.ServiceTypeDto:
    properties:
      id:
        type: integer
      name:
        type: string
      properties:
        items:
          $ref: '#/definitions/servicetype.ServiceTypeVariationPropertyLinkDto'
        type: array
      usageCount:
        type: integer
    required:
    - id
    - name
    - properties
    - usageCount
    type: object
  servicetype.ServiceTypeVariationPropertyLinkDto:
    properties:
      displayName:
        type: string
      id:
        type: integer
      name:
        type: string
      priority:
        type: integer
      propertyId:
        type: integer
      usageCount:
        type: integer
    required:
    - displayName
    - id
    - name
    - priority
    - propertyId
    - usageCount
    type: object
  validation.ValidatorDto:
    properties:
      errorText:
        type: string
      isBuiltIn:
        type: boolean
      parameter:
        type: string
      validatorType:
        $ref: '#/definitions/db.ValueValidatorType'
    required:
    - errorText
    - isBuiltIn
    - parameter
    - validatorType
    type: object
  validation.ValueValidatorParameterType:
    enum:
    - none
    - integer
    - float
    - regex
    - json_schema
    type: string
    x-enum-varnames:
    - ValueValidatorParameterTypeNone
    - ValueValidatorParameterTypeInteger
    - ValueValidatorParameterTypeFloat
    - ValueValidatorParameterTypeRegex
    - ValueValidatorParameterTypeJsonSchema
  value.NewValueInfo:
    properties:
      id:
        type: integer
      order:
        items:
          type: integer
        type: array
    required:
    - id
    - order
    type: object
  value.VariationValueDto:
    properties:
      canEdit:
        type: boolean
      data:
        type: string
      id:
        type: integer
      order:
        items:
          type: integer
        type: array
      rank:
        type: integer
      variation:
        additionalProperties:
          type: string
        type: object
    required:
    - canEdit
    - data
    - id
    - order
    - rank
    - variation
    type: object
  valuetype.AllowedValidatorDto:
    properties:
      parameterType:
        $ref: '#/definitions/validation.ValueValidatorParameterType'
      validatorType:
        $ref: '#/definitions/db.ValueValidatorType'
    required:
    - parameterType
    - validatorType
    type: object
  valuetype.ValidatorWithParameterTypeDto:
    properties:
      errorText:
        type: string
      isBuiltIn:
        type: boolean
      parameter:
        type: string
      parameterType:
        $ref: '#/definitions/validation.ValueValidatorParameterType'
      validatorType:
        $ref: '#/definitions/db.ValueValidatorType'
    required:
    - errorText
    - isBuiltIn
    - parameter
    - parameterType
    - validatorType
    type: object
  valuetype.ValueTypeDto:
    properties:
      allowedValidators:
        items:
          $ref: '#/definitions/valuetype.AllowedValidatorDto'
        type: array
      id:
        type: integer
      kind:
        $ref: '#/definitions/db.ValueTypeKind'
      name:
        type: string
      validators:
        items:
          $ref: '#/definitions/valuetype.ValidatorWithParameterTypeDto'
        type: array
    required:
    - allowedValidators
    - id
    - kind
    - name
    - validators
    type: object
  variationproperty.FlatVariationPropertyValueDto:
    properties:
      depth:
        type: integer
      id:
        type: integer
      value:
        type: string
    required:
    - depth
    - id
    - value
    type: object
  variationproperty.ServiceTypeVariationPropertyDto:
    properties:
      displayName:
        type: string
      id:
        type: integer
      name:
        type: string
      values:
        items:
          $ref: '#/definitions/variationproperty.FlatVariationPropertyValueDto'
        type: array
    required:
    - displayName
    - id
    - name
    - values
    type: object
  variationproperty.VariationPropertyDto:
    properties:
      displayName:
        type: string
      id:
        type: integer
      name:
        type: string
      usageCount:
        type: integer
      values:
        items:
          $ref: '#/definitions/variationproperty.VariationPropertyValueDto'
        type: array
    required:
    - displayName
    - id
    - name
    - usageCount
    - values
    type: object
  variationproperty.VariationPropertyItemDto:
    properties:
      displayName:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - displayName
    - id
    - name
    type: object
  variationproperty.VariationPropertyValueDto:
    properties:
      archived:
        type: boolean
      children:
        items:
          $ref: '#/definitions/variationproperty.VariationPropertyValueDto'
        type: array
      id:
        type: integer
      usageCount:
        type: integer
      value:
        type: string
    required:
    - archived
    - children
    - id
    - usageCount
    - value
    type: object
host: localhost:1323
info:
  contact: {}
  description: This is the API for the Config Service
  title: Config Service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to the application
      parameters:
      - description: Login request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Login
  /auth/refresh_token:
    post:
      consumes:
      - application/json
      description: Refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: refreshTokenRequest
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Refresh token
  /auth/user:
    get:
      description: Get the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get current user
  /changesets:
    get:
      consumes:
      - application/json
      description: Get changesets
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Author ID
        in: query
        name: authorId
        type: integer
      - description: Approvable
        in: query
        name: approvable
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.PaginatedResult-changeset_ChangesetItemDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get changesets
  /changesets/{changeset_id}:
    delete:
      description: Discard a changeset by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Discard a changeset
    get:
      description: Get a changeset by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/changeset.ChangesetDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get a changeset
  /changesets/{changeset_id}/apply:
    put:
      consumes:
      - application/json
      description: Apply a changeset by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Apply a changeset
  /changesets/{changeset_id}/changes/{change_id}:
    delete:
      description: Discard a change by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      - description: Change ID
        in: path
        name: change_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Discard a change
  /changesets/{changeset_id}/comment:
    post:
      consumes:
      - application/json
      description: Add a comment to a changeset by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      - description: Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handler.AddCommentRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Add a comment to a changeset
  /changesets/{changeset_id}/commit:
    put:
      consumes:
      - application/json
      description: Commit a changeset by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Commit a changeset
  /changesets/{changeset_id}/reopen:
    put:
      description: Reopen a changeset by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Reopen a changeset
  /changesets/{changeset_id}/stash:
    put:
      description: Stash a changeset by ID
      parameters:
      - description: Changeset ID
        in: path
        name: changeset_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Stash a changeset
  /changesets/approvable-count:
    get:
      description: Get the number of approvable changesets
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ApprovableChangesetCountResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get the number of approvable changesets
  /changesets/current:
    get:
      description: Get the current changeset info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ChangesetInfoResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get the current changeset info
  /configuration:
    get:
      consumes:
      - application/json
      description: Get configuration
      parameters:
      - description: Changeset ID
        in: query
        name: changeset_id
        required: true
        type: integer
      - collectionFormat: csv
        description: Service versions
        in: query
        items:
          type: string
        name: service
        required: true
        type: array
      - description: Mode
        in: query
        name: mode
        required: true
        type: string
      - description: Variation
        in: query
        name: variation
        required: true
        type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/configuration.ConfigurationDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get configuration
  /configuration/changesets:
    get:
      consumes:
      - application/json
      description: Get next changesets
      parameters:
      - description: After changeset ID
        in: query
        name: after
        required: true
        type: integer
      - collectionFormat: csv
        description: Service versions
        in: query
        items:
          type: string
        name: service
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                type: integer
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get next changesets
  /service-types:
    get:
      description: Get all service types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/servicetype.ServiceTypeDto'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get service types
    post:
      consumes:
      - application/json
      description: Create a new service type
      parameters:
      - description: Service type
        in: body
        name: service_type_dto
        required: true
        schema:
          $ref: '#/definitions/handler.CreateServiceTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create service type
  /service-types/{service_type_id}:
    delete:
      description: Delete a service type
      parameters:
      - description: Service type ID
        in: path
        name: service_type_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete service type
    get:
      description: Get a service type
      parameters:
      - description: Service type ID
        in: path
        name: service_type_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/servicetype.ServiceTypeDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get service type
  /service-types/{service_type_id}/variation-properties:
    get:
      description: Get variation properties for a service type
      parameters:
      - description: Service type ID
        in: path
        name: service_type_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/variationproperty.ServiceTypeVariationPropertyDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get variation properties
    post:
      consumes:
      - application/json
      description: Link a variation property to a service type
      parameters:
      - description: Service type ID
        in: path
        name: service_type_id
        required: true
        type: integer
      - description: Link variation property to service type request
        in: body
        name: link_variation_property_to_service_type_request
        required: true
        schema:
          $ref: '#/definitions/handler.LinkVariationPropertyToServiceTypeRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Link variation property to service type
  /service-types/{service_type_id}/variation-properties/{variation_property_id}:
    delete:
      consumes:
      - application/json
      description: Unlink a variation property from a service type
      parameters:
      - description: Service type ID
        in: path
        name: service_type_id
        required: true
        type: integer
      - description: Variation property ID
        in: path
        name: variation_property_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Unlink variation property from service type
  /service-types/{service_type_id}/variation-properties/{variation_property_id}/priority:
    put:
      consumes:
      - application/json
      description: Update the priority of a variation property in a service type
      parameters:
      - description: Service type ID
        in: path
        name: service_type_id
        required: true
        type: integer
      - description: Variation property ID
        in: path
        name: variation_property_id
        required: true
        type: integer
      - description: Update service type variation property priority request
        in: body
        name: update_service_type_variation_property_priority_request
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateServiceTypeVariationPropertyPriorityRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update service type variation property priority
  /services:
    get:
      description: Get list of services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.ServiceDto'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get services
    post:
      consumes:
      - application/json
      description: Create service
      parameters:
      - description: Create service request
        in: body
        name: createServiceRequest
        required: true
        schema:
          $ref: '#/definitions/handler.CreateServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create service
  /services/{service_version_id}:
    get:
      description: Get service
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.ServiceVersionDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get service
    put:
      consumes:
      - application/json
      description: Update service
      parameters:
      - description: Service version ID (for url consistency, the underling service
          will be updated)
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Update service request
        in: body
        name: updateServiceRequest
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateServiceRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update service
  /services/{service_version_id}/features:
    get:
      description: Get features for a service version
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/feature.FeatureVersionItemDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get features for a service version
    post:
      consumes:
      - application/json
      description: Create feature
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Create feature request
        in: body
        name: createFeatureRequest
        required: true
        schema:
          $ref: '#/definitions/handler.CreateFeatureRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create feature
  /services/{service_version_id}/features/{feature_version_id}:
    get:
      description: Get feature
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/feature.FeatureVersionDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get feature
    put:
      consumes:
      - application/json
      description: Create feature
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Update feature request
        in: body
        name: updateFeatureRequest
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateFeatureRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create feature
  /services/{service_version_id}/features/{feature_version_id}/keys:
    get:
      description: Get keys for a feature
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/key.KeyItemDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get keys for a feature
    post:
      consumes:
      - application/json
      description: Create a key
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Create key request
        in: body
        name: createKeyRequest
        required: true
        schema:
          $ref: '#/definitions/handler.CreateKeyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create a key
  /services/{service_version_id}/features/{feature_version_id}/keys/{key_id}:
    delete:
      description: Delete a key
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete a key
    get:
      description: Get a key
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/key.KeyDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get a key
    put:
      consumes:
      - application/json
      description: Create a key
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      - description: Update key request
        in: body
        name: updateKeyRequest
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateKeyRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create a key
  /services/{service_version_id}/features/{feature_version_id}/keys/{key_id}/values:
    get:
      description: Get values for a key
      parameters:
      - description: Service Version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature Version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/value.VariationValueDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get values for a key
    post:
      consumes:
      - application/json
      description: Create value
      parameters:
      - description: Service Version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature Version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      - description: Value request
        in: body
        name: valueRequest
        required: true
        schema:
          $ref: '#/definitions/handler.ValueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/value.NewValueInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create value
  /services/{service_version_id}/features/{feature_version_id}/keys/{key_id}/values/{value_id}:
    delete:
      description: Delete value
      parameters:
      - description: Service Version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature Version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      - description: Value ID
        in: path
        name: value_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete value
    put:
      consumes:
      - application/json
      description: Update value
      parameters:
      - description: Service Version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature Version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      - description: Value ID
        in: path
        name: value_id
        required: true
        type: integer
      - description: Value request
        in: body
        name: valueRequest
        required: true
        schema:
          $ref: '#/definitions/handler.ValueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/value.NewValueInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update value
  /services/{service_version_id}/features/{feature_version_id}/keys/{key_id}/values/{value_id}/can-edit:
    get:
      description: Can edit value with variation
      parameters:
      - description: Service Version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature Version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      - description: Value ID
        in: path
        name: value_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Can edit value with variation
  /services/{service_version_id}/features/{feature_version_id}/keys/{key_id}/values/can-add:
    get:
      description: Can operate value with variation
      parameters:
      - description: Service Version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature Version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key ID
        in: path
        name: key_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Can operate value with variation
  /services/{service_version_id}/features/{feature_version_id}/keys/name-taken/{name}:
    get:
      description: Check if key name is taken
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      - description: Key name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.BooleanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Check if key name is taken
  /services/{service_version_id}/features/{feature_version_id}/link:
    post:
      description: Link feature version to a service version
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Link feature version
  /services/{service_version_id}/features/{feature_version_id}/unlink:
    delete:
      description: Unlink feature version from a service version
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Unlink feature version
  /services/{service_version_id}/features/{feature_version_id}/versions:
    get:
      description: Get feature versions
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/feature.FeatureVersionLinkDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get feature versions
    post:
      description: Create feature version
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature version ID
        in: path
        name: feature_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create feature version
  /services/{service_version_id}/features/linkable:
    get:
      description: Get feature versions that can be linked to a service version
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/feature.FeatureVersionDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get linkable features for a service version
  /services/{service_version_id}/features/name-taken/{name}:
    get:
      description: Check if feature name is taken
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      - description: Feature name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.BooleanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Check if feature name is taken
  /services/{service_version_id}/publish:
    put:
      description: Publish service version
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Publish service version
  /services/{service_version_id}/versions:
    get:
      description: Get service versions
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/service.ServiceVersionLinkDto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get service versions
    post:
      description: Create service version
      parameters:
      - description: Service version ID
        in: path
        name: service_version_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create service version
  /services/name-taken/{name}:
    get:
      description: Check if service name is taken
      parameters:
      - description: Service name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.BooleanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Check if service name is taken
  /users:
    get:
      consumes:
      - application/json
      description: Get list of users
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.PaginatedResult-membership_UserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create a user
  /users/{user_id}:
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/membership.UserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get a user
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update a user
  /value-types:
    get:
      description: Get all value types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/valuetype.ValueTypeDto'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get value types
  /value-types/{value_type_id}:
    get:
      description: Get a value type by ID
      parameters:
      - description: Value type ID
        in: path
        name: value_type_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/valuetype.ValueTypeDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get value type
  /variation-properties:
    get:
      description: Get all variation properties
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/variationproperty.VariationPropertyItemDto'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get variation properties
    post:
      consumes:
      - application/json
      description: Create a new variation property
      parameters:
      - description: Variation property
        in: body
        name: variation_property
        required: true
        schema:
          $ref: '#/definitions/handler.CreateVariationPropertyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create variation property
  /variation-properties/{property_id}:
    delete:
      description: Delete a variation property
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete variation property
    get:
      description: Get variation property by ID
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/variationproperty.VariationPropertyDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Get variation property
    put:
      consumes:
      - application/json
      description: Update variation property
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      - description: Variation property
        in: body
        name: variation_property
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateVariationPropertyRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update variation property
  /variation-properties/{property_id}/value-taken/{value}:
    get:
      description: Check if variation property name is taken
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      - description: Variation property value
        in: path
        name: value
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.BooleanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Check if variation property name is taken
  /variation-properties/{property_id}/values:
    post:
      consumes:
      - application/json
      description: Create a new variation property value
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      - description: Variation property value
        in: body
        name: variation_property_value
        required: true
        schema:
          $ref: '#/definitions/handler.CreateVariationPropertyValueRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.CreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Create variation property value
  /variation-properties/{property_id}/values/{value_id}:
    delete:
      description: Delete a variation property value
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      - description: Value ID
        in: path
        name: value_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete variation property value
  /variation-properties/{property_id}/values/{value_id}/archive:
    put:
      description: Archive a variation property value
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      - description: Value ID
        in: path
        name: value_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Archive variation property value
  /variation-properties/{property_id}/values/{value_id}/order:
    put:
      consumes:
      - application/json
      description: Update variation property value order
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      - description: Value ID
        in: path
        name: value_id
        required: true
        type: integer
      - description: Variation property value order
        in: body
        name: variation_property_value_order
        required: true
        schema:
          $ref: '#/definitions/handler.UpdateVariationPropertyValueOrderRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Update variation property value order
  /variation-properties/{property_id}/values/{value_id}/unarchive:
    put:
      description: Unarchive a variation property value
      parameters:
      - description: Property ID
        in: path
        name: property_id
        required: true
        type: integer
      - description: Value ID
        in: path
        name: value_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Unarchive variation property value
  /variation-properties/name-taken/{name}:
    get:
      description: Check if variation property name is taken
      parameters:
      - description: Variation property name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.BooleanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/echo.HTTPError'
      security:
      - BearerAuth: []
      summary: Check if variation property name is taken
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
