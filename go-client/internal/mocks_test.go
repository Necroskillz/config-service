// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package internal

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockFeature creates a new instance of MockFeature. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeature(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeature {
	mock := &MockFeature{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeature is an autogenerated mock type for the Feature type
type MockFeature struct {
	mock.Mock
}

type MockFeature_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeature) EXPECT() *MockFeature_Expecter {
	return &MockFeature_Expecter{mock: &_m.Mock}
}

// FeatureName provides a mock function for the type MockFeature
func (_mock *MockFeature) FeatureName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for FeatureName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockFeature_FeatureName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeatureName'
type MockFeature_FeatureName_Call struct {
	*mock.Call
}

// FeatureName is a helper method to define mock.On call
func (_e *MockFeature_Expecter) FeatureName() *MockFeature_FeatureName_Call {
	return &MockFeature_FeatureName_Call{Call: _e.mock.On("FeatureName")}
}

func (_c *MockFeature_FeatureName_Call) Run(run func()) *MockFeature_FeatureName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFeature_FeatureName_Call) Return(s string) *MockFeature_FeatureName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockFeature_FeatureName_Call) RunAndReturn(run func() string) *MockFeature_FeatureName_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigurationDataLoader creates a new instance of MockConfigurationDataLoader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationDataLoader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationDataLoader {
	mock := &MockConfigurationDataLoader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigurationDataLoader is an autogenerated mock type for the ConfigurationDataLoader type
type MockConfigurationDataLoader struct {
	mock.Mock
}

type MockConfigurationDataLoader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurationDataLoader) EXPECT() *MockConfigurationDataLoader_Expecter {
	return &MockConfigurationDataLoader_Expecter{mock: &_m.Mock}
}

// GetConfiguration provides a mock function for the type MockConfigurationDataLoader
func (_mock *MockConfigurationDataLoader) GetConfiguration(ctx context.Context, changesetID *uint32) (*ConfigurationSnapshot, error) {
	ret := _mock.Called(ctx, changesetID)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 *ConfigurationSnapshot
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uint32) (*ConfigurationSnapshot, error)); ok {
		return returnFunc(ctx, changesetID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *uint32) *ConfigurationSnapshot); ok {
		r0 = returnFunc(ctx, changesetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigurationSnapshot)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *uint32) error); ok {
		r1 = returnFunc(ctx, changesetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationDataLoader_GetConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfiguration'
type MockConfigurationDataLoader_GetConfiguration_Call struct {
	*mock.Call
}

// GetConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - changesetID *uint32
func (_e *MockConfigurationDataLoader_Expecter) GetConfiguration(ctx interface{}, changesetID interface{}) *MockConfigurationDataLoader_GetConfiguration_Call {
	return &MockConfigurationDataLoader_GetConfiguration_Call{Call: _e.mock.On("GetConfiguration", ctx, changesetID)}
}

func (_c *MockConfigurationDataLoader_GetConfiguration_Call) Run(run func(ctx context.Context, changesetID *uint32)) *MockConfigurationDataLoader_GetConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *uint32
		if args[1] != nil {
			arg1 = args[1].(*uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigurationDataLoader_GetConfiguration_Call) Return(configurationSnapshot *ConfigurationSnapshot, err error) *MockConfigurationDataLoader_GetConfiguration_Call {
	_c.Call.Return(configurationSnapshot, err)
	return _c
}

func (_c *MockConfigurationDataLoader_GetConfiguration_Call) RunAndReturn(run func(ctx context.Context, changesetID *uint32) (*ConfigurationSnapshot, error)) *MockConfigurationDataLoader_GetConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextChangesets provides a mock function for the type MockConfigurationDataLoader
func (_mock *MockConfigurationDataLoader) GetNextChangesets(ctx context.Context, afterChangesetID uint32) ([]uint32, error) {
	ret := _mock.Called(ctx, afterChangesetID)

	if len(ret) == 0 {
		panic("no return value specified for GetNextChangesets")
	}

	var r0 []uint32
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) ([]uint32, error)); ok {
		return returnFunc(ctx, afterChangesetID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) []uint32); ok {
		r0 = returnFunc(ctx, afterChangesetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint32)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = returnFunc(ctx, afterChangesetID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationDataLoader_GetNextChangesets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextChangesets'
type MockConfigurationDataLoader_GetNextChangesets_Call struct {
	*mock.Call
}

// GetNextChangesets is a helper method to define mock.On call
//   - ctx context.Context
//   - afterChangesetID uint32
func (_e *MockConfigurationDataLoader_Expecter) GetNextChangesets(ctx interface{}, afterChangesetID interface{}) *MockConfigurationDataLoader_GetNextChangesets_Call {
	return &MockConfigurationDataLoader_GetNextChangesets_Call{Call: _e.mock.On("GetNextChangesets", ctx, afterChangesetID)}
}

func (_c *MockConfigurationDataLoader_GetNextChangesets_Call) Run(run func(ctx context.Context, afterChangesetID uint32)) *MockConfigurationDataLoader_GetNextChangesets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigurationDataLoader_GetNextChangesets_Call) Return(uint32s []uint32, err error) *MockConfigurationDataLoader_GetNextChangesets_Call {
	_c.Call.Return(uint32s, err)
	return _c
}

func (_c *MockConfigurationDataLoader_GetNextChangesets_Call) RunAndReturn(run func(ctx context.Context, afterChangesetID uint32) ([]uint32, error)) *MockConfigurationDataLoader_GetNextChangesets_Call {
	_c.Call.Return(run)
	return _c
}

// GetVariationHierarchy provides a mock function for the type MockConfigurationDataLoader
func (_mock *MockConfigurationDataLoader) GetVariationHierarchy(ctx context.Context) (*VariationHierarchy, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVariationHierarchy")
	}

	var r0 *VariationHierarchy
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*VariationHierarchy, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *VariationHierarchy); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*VariationHierarchy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigurationDataLoader_GetVariationHierarchy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariationHierarchy'
type MockConfigurationDataLoader_GetVariationHierarchy_Call struct {
	*mock.Call
}

// GetVariationHierarchy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigurationDataLoader_Expecter) GetVariationHierarchy(ctx interface{}) *MockConfigurationDataLoader_GetVariationHierarchy_Call {
	return &MockConfigurationDataLoader_GetVariationHierarchy_Call{Call: _e.mock.On("GetVariationHierarchy", ctx)}
}

func (_c *MockConfigurationDataLoader_GetVariationHierarchy_Call) Run(run func(ctx context.Context)) *MockConfigurationDataLoader_GetVariationHierarchy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigurationDataLoader_GetVariationHierarchy_Call) Return(variationHierarchy *VariationHierarchy, err error) *MockConfigurationDataLoader_GetVariationHierarchy_Call {
	_c.Call.Return(variationHierarchy, err)
	return _c
}

func (_c *MockConfigurationDataLoader_GetVariationHierarchy_Call) RunAndReturn(run func(ctx context.Context) (*VariationHierarchy, error)) *MockConfigurationDataLoader_GetVariationHierarchy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigurationPoller creates a new instance of MockConfigurationPoller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigurationPoller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigurationPoller {
	mock := &MockConfigurationPoller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigurationPoller is an autogenerated mock type for the ConfigurationPoller type
type MockConfigurationPoller struct {
	mock.Mock
}

type MockConfigurationPoller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigurationPoller) EXPECT() *MockConfigurationPoller_Expecter {
	return &MockConfigurationPoller_Expecter{mock: &_m.Mock}
}

// Done provides a mock function for the type MockConfigurationPoller
func (_mock *MockConfigurationPoller) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockConfigurationPoller_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockConfigurationPoller_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockConfigurationPoller_Expecter) Done() *MockConfigurationPoller_Done_Call {
	return &MockConfigurationPoller_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockConfigurationPoller_Done_Call) Run(run func()) *MockConfigurationPoller_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationPoller_Done_Call) Return(valCh <-chan struct{}) *MockConfigurationPoller_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockConfigurationPoller_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockConfigurationPoller_Done_Call {
	_c.Call.Return(run)
	return _c
}

// IsRunning provides a mock function for the type MockConfigurationPoller
func (_mock *MockConfigurationPoller) IsRunning() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockConfigurationPoller_IsRunning_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRunning'
type MockConfigurationPoller_IsRunning_Call struct {
	*mock.Call
}

// IsRunning is a helper method to define mock.On call
func (_e *MockConfigurationPoller_Expecter) IsRunning() *MockConfigurationPoller_IsRunning_Call {
	return &MockConfigurationPoller_IsRunning_Call{Call: _e.mock.On("IsRunning")}
}

func (_c *MockConfigurationPoller_IsRunning_Call) Run(run func()) *MockConfigurationPoller_IsRunning_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationPoller_IsRunning_Call) Return(b bool) *MockConfigurationPoller_IsRunning_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockConfigurationPoller_IsRunning_Call) RunAndReturn(run func() bool) *MockConfigurationPoller_IsRunning_Call {
	_c.Call.Return(run)
	return _c
}

// Snapshots provides a mock function for the type MockConfigurationPoller
func (_mock *MockConfigurationPoller) Snapshots() <-chan *ConfigurationSnapshot {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapshots")
	}

	var r0 <-chan *ConfigurationSnapshot
	if returnFunc, ok := ret.Get(0).(func() <-chan *ConfigurationSnapshot); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *ConfigurationSnapshot)
		}
	}
	return r0
}

// MockConfigurationPoller_Snapshots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshots'
type MockConfigurationPoller_Snapshots_Call struct {
	*mock.Call
}

// Snapshots is a helper method to define mock.On call
func (_e *MockConfigurationPoller_Expecter) Snapshots() *MockConfigurationPoller_Snapshots_Call {
	return &MockConfigurationPoller_Snapshots_Call{Call: _e.mock.On("Snapshots")}
}

func (_c *MockConfigurationPoller_Snapshots_Call) Run(run func()) *MockConfigurationPoller_Snapshots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationPoller_Snapshots_Call) Return(configurationSnapshotCh <-chan *ConfigurationSnapshot) *MockConfigurationPoller_Snapshots_Call {
	_c.Call.Return(configurationSnapshotCh)
	return _c
}

func (_c *MockConfigurationPoller_Snapshots_Call) RunAndReturn(run func() <-chan *ConfigurationSnapshot) *MockConfigurationPoller_Snapshots_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockConfigurationPoller
func (_mock *MockConfigurationPoller) Start(ctx context.Context, changesetID uint32) error {
	ret := _mock.Called(ctx, changesetID)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uint32) error); ok {
		r0 = returnFunc(ctx, changesetID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigurationPoller_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockConfigurationPoller_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - changesetID uint32
func (_e *MockConfigurationPoller_Expecter) Start(ctx interface{}, changesetID interface{}) *MockConfigurationPoller_Start_Call {
	return &MockConfigurationPoller_Start_Call{Call: _e.mock.On("Start", ctx, changesetID)}
}

func (_c *MockConfigurationPoller_Start_Call) Run(run func(ctx context.Context, changesetID uint32)) *MockConfigurationPoller_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uint32
		if args[1] != nil {
			arg1 = args[1].(uint32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigurationPoller_Start_Call) Return(err error) *MockConfigurationPoller_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigurationPoller_Start_Call) RunAndReturn(run func(ctx context.Context, changesetID uint32) error) *MockConfigurationPoller_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type MockConfigurationPoller
func (_mock *MockConfigurationPoller) Stop() {
	_mock.Called()
	return
}

// MockConfigurationPoller_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockConfigurationPoller_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockConfigurationPoller_Expecter) Stop() *MockConfigurationPoller_Stop_Call {
	return &MockConfigurationPoller_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockConfigurationPoller_Stop_Call) Run(run func()) *MockConfigurationPoller_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigurationPoller_Stop_Call) Return() *MockConfigurationPoller_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfigurationPoller_Stop_Call) RunAndReturn(run func()) *MockConfigurationPoller_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockVariationHierarchyRefresher creates a new instance of MockVariationHierarchyRefresher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVariationHierarchyRefresher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVariationHierarchyRefresher {
	mock := &MockVariationHierarchyRefresher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVariationHierarchyRefresher is an autogenerated mock type for the VariationHierarchyRefresher type
type MockVariationHierarchyRefresher struct {
	mock.Mock
}

type MockVariationHierarchyRefresher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVariationHierarchyRefresher) EXPECT() *MockVariationHierarchyRefresher_Expecter {
	return &MockVariationHierarchyRefresher_Expecter{mock: &_m.Mock}
}

// Refresh provides a mock function for the type MockVariationHierarchyRefresher
func (_mock *MockVariationHierarchyRefresher) Refresh(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVariationHierarchyRefresher_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type MockVariationHierarchyRefresher_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVariationHierarchyRefresher_Expecter) Refresh(ctx interface{}) *MockVariationHierarchyRefresher_Refresh_Call {
	return &MockVariationHierarchyRefresher_Refresh_Call{Call: _e.mock.On("Refresh", ctx)}
}

func (_c *MockVariationHierarchyRefresher_Refresh_Call) Run(run func(ctx context.Context)) *MockVariationHierarchyRefresher_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVariationHierarchyRefresher_Refresh_Call) Return(err error) *MockVariationHierarchyRefresher_Refresh_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVariationHierarchyRefresher_Refresh_Call) RunAndReturn(run func(ctx context.Context) error) *MockVariationHierarchyRefresher_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCleanableSnapshotStore creates a new instance of MockCleanableSnapshotStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCleanableSnapshotStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCleanableSnapshotStore {
	mock := &MockCleanableSnapshotStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCleanableSnapshotStore is an autogenerated mock type for the CleanableSnapshotStore type
type MockCleanableSnapshotStore struct {
	mock.Mock
}

type MockCleanableSnapshotStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCleanableSnapshotStore) EXPECT() *MockCleanableSnapshotStore_Expecter {
	return &MockCleanableSnapshotStore_Expecter{mock: &_m.Mock}
}

// CleanupUnused provides a mock function for the type MockCleanableSnapshotStore
func (_mock *MockCleanableSnapshotStore) CleanupUnused(ctx context.Context) {
	_mock.Called(ctx)
	return
}

// MockCleanableSnapshotStore_CleanupUnused_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupUnused'
type MockCleanableSnapshotStore_CleanupUnused_Call struct {
	*mock.Call
}

// CleanupUnused is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCleanableSnapshotStore_Expecter) CleanupUnused(ctx interface{}) *MockCleanableSnapshotStore_CleanupUnused_Call {
	return &MockCleanableSnapshotStore_CleanupUnused_Call{Call: _e.mock.On("CleanupUnused", ctx)}
}

func (_c *MockCleanableSnapshotStore_CleanupUnused_Call) Run(run func(ctx context.Context)) *MockCleanableSnapshotStore_CleanupUnused_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCleanableSnapshotStore_CleanupUnused_Call) Return() *MockCleanableSnapshotStore_CleanupUnused_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCleanableSnapshotStore_CleanupUnused_Call) RunAndReturn(run func(ctx context.Context)) *MockCleanableSnapshotStore_CleanupUnused_Call {
	_c.Run(run)
	return _c
}

// NewMockLogger creates a new instance of MockLogger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLogger {
	mock := &MockLogger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLogger is an autogenerated mock type for the Logger type
type MockLogger struct {
	mock.Mock
}

type MockLogger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLogger) EXPECT() *MockLogger_Expecter {
	return &MockLogger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function for the type MockLogger
func (_mock *MockLogger) Debug(ctx context.Context, msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(ctx, msg, fields)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type MockLogger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...any
func (_e *MockLogger_Expecter) Debug(ctx interface{}, msg interface{}, fields ...interface{}) *MockLogger_Debug_Call {
	return &MockLogger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockLogger_Debug_Call) Run(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Debug_Call) Return() *MockLogger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Debug_Call) RunAndReturn(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Debug_Call {
	_c.Run(run)
	return _c
}

// Error provides a mock function for the type MockLogger
func (_mock *MockLogger) Error(ctx context.Context, msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(ctx, msg, fields)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type MockLogger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...any
func (_e *MockLogger_Expecter) Error(ctx interface{}, msg interface{}, fields ...interface{}) *MockLogger_Error_Call {
	return &MockLogger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockLogger_Error_Call) Run(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Error_Call) Return() *MockLogger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Error_Call) RunAndReturn(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Error_Call {
	_c.Run(run)
	return _c
}

// Info provides a mock function for the type MockLogger
func (_mock *MockLogger) Info(ctx context.Context, msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(ctx, msg, fields)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockLogger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...any
func (_e *MockLogger_Expecter) Info(ctx interface{}, msg interface{}, fields ...interface{}) *MockLogger_Info_Call {
	return &MockLogger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockLogger_Info_Call) Run(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Info_Call) Return() *MockLogger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Info_Call) RunAndReturn(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Info_Call {
	_c.Run(run)
	return _c
}

// Warn provides a mock function for the type MockLogger
func (_mock *MockLogger) Warn(ctx context.Context, msg string, fields ...any) {
	if len(fields) > 0 {
		_mock.Called(ctx, msg, fields)
	} else {
		_mock.Called(ctx, msg)
	}

	return
}

// MockLogger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type MockLogger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - ctx context.Context
//   - msg string
//   - fields ...any
func (_e *MockLogger_Expecter) Warn(ctx interface{}, msg interface{}, fields ...interface{}) *MockLogger_Warn_Call {
	return &MockLogger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{ctx, msg}, fields...)...)}
}

func (_c *MockLogger_Warn_Call) Run(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockLogger_Warn_Call) Return() *MockLogger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLogger_Warn_Call) RunAndReturn(run func(ctx context.Context, msg string, fields ...any)) *MockLogger_Warn_Call {
	_c.Run(run)
	return _c
}
