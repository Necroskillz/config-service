// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: variation_values.sql

package db

import (
	"context"
	"time"
)

const createVariationValue = `-- name: CreateVariationValue :one
INSERT INTO variation_values (key_id, variation_context_id, data)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateVariationValueParams struct {
	KeyID              uint
	VariationContextID uint
	Data               *string
}

func (q *Queries) CreateVariationValue(ctx context.Context, arg CreateVariationValueParams) (uint, error) {
	row := q.db.QueryRow(ctx, createVariationValue, arg.KeyID, arg.VariationContextID, arg.Data)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const deleteVariationValue = `-- name: DeleteVariationValue :exec
DELETE FROM variation_values
WHERE id = $1
`

func (q *Queries) DeleteVariationValue(ctx context.Context, variationValueID uint) error {
	_, err := q.db.Exec(ctx, deleteVariationValue, variationValueID)
	return err
}

const endValueValidity = `-- name: EndValueValidity :exec
UPDATE variation_values
SET valid_to = $1
WHERE id = $2
`

type EndValueValidityParams struct {
	ValidTo          *time.Time
	VariationValueID uint
}

func (q *Queries) EndValueValidity(ctx context.Context, arg EndValueValidityParams) error {
	_, err := q.db.Exec(ctx, endValueValidity, arg.ValidTo, arg.VariationValueID)
	return err
}

const getActiveVariationValueIDByVariationContextID = `-- name: GetActiveVariationValueIDByVariationContextID :one
SELECT id
FROM variation_values vv
WHERE vv.variation_context_id = $1
    AND (
        (
            vv.valid_from IS NOT NULL
            AND vv.valid_to IS NULL
            AND NOT EXISTS (
                SELECT csc.id
                FROM changeset_changes csc
                WHERE csc.changeset_id = $2
                    AND csc.old_variation_value_id = vv.id
                LIMIT 1
            )
        )
        OR (
            vv.valid_from IS NULL
            AND EXISTS (
                SELECT csc.id
                FROM changeset_changes csc
                WHERE csc.changeset_id = $2
                    AND csc.new_variation_value_id = vv.id
                LIMIT 1
            )
        )
    )
LIMIT 1
`

type GetActiveVariationValueIDByVariationContextIDParams struct {
	VariationContextID uint
	ChangesetID        uint
}

func (q *Queries) GetActiveVariationValueIDByVariationContextID(ctx context.Context, arg GetActiveVariationValueIDByVariationContextIDParams) (uint, error) {
	row := q.db.QueryRow(ctx, getActiveVariationValueIDByVariationContextID, arg.VariationContextID, arg.ChangesetID)
	var id uint
	err := row.Scan(&id)
	return id, err
}

const getActiveVariationValuesForKey = `-- name: GetActiveVariationValuesForKey :many
SELECT vv.id, vv.valid_from, vv.valid_to, vv.key_id, vv.variation_context_id, vv.data
FROM variation_values vv
WHERE vv.key_id = $1
    AND (
        (
            vv.valid_from IS NOT NULL
            AND vv.valid_to IS NULL
            AND NOT EXISTS (
                SELECT csc.id
                FROM changeset_changes csc
                WHERE csc.changeset_id = $2
                    AND csc.old_variation_value_id = vv.id
                LIMIT 1
            )
        )
        OR (
            vv.valid_from IS NULL
            AND EXISTS (
                SELECT csc.id
                FROM changeset_changes csc
                WHERE csc.changeset_id = $2
                    AND csc.new_variation_value_id = vv.id
                LIMIT 1
            )
        )
    )
`

type GetActiveVariationValuesForKeyParams struct {
	KeyID       uint
	ChangesetID uint
}

func (q *Queries) GetActiveVariationValuesForKey(ctx context.Context, arg GetActiveVariationValuesForKeyParams) ([]VariationValue, error) {
	rows, err := q.db.Query(ctx, getActiveVariationValuesForKey, arg.KeyID, arg.ChangesetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []VariationValue
	for rows.Next() {
		var i VariationValue
		if err := rows.Scan(
			&i.ID,
			&i.ValidFrom,
			&i.ValidTo,
			&i.KeyID,
			&i.VariationContextID,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const startValueValidity = `-- name: StartValueValidity :exec
UPDATE variation_values
SET valid_from = $1
WHERE id = $2
`

type StartValueValidityParams struct {
	ValidFrom        *time.Time
	VariationValueID uint
}

func (q *Queries) StartValueValidity(ctx context.Context, arg StartValueValidityParams) error {
	_, err := q.db.Exec(ctx, startValueValidity, arg.ValidFrom, arg.VariationValueID)
	return err
}
