// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type ChangesetChangeType string

const (
	ChangesetChangeTypeCreate ChangesetChangeType = "create"
	ChangesetChangeTypeUpdate ChangesetChangeType = "update"
	ChangesetChangeTypeDelete ChangesetChangeType = "delete"
)

func (e *ChangesetChangeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChangesetChangeType(s)
	case string:
		*e = ChangesetChangeType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChangesetChangeType: %T", src)
	}
	return nil
}

type NullChangesetChangeType struct {
	ChangesetChangeType ChangesetChangeType
	Valid               bool // Valid is true if ChangesetChangeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChangesetChangeType) Scan(value interface{}) error {
	if value == nil {
		ns.ChangesetChangeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChangesetChangeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChangesetChangeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChangesetChangeType), nil
}

type ChangesetState string

const (
	ChangesetStateOpen      ChangesetState = "open"
	ChangesetStateCommitted ChangesetState = "committed"
	ChangesetStateApplied   ChangesetState = "applied"
	ChangesetStateRejected  ChangesetState = "rejected"
	ChangesetStateDiscarded ChangesetState = "discarded"
	ChangesetStateStashed   ChangesetState = "stashed"
)

func (e *ChangesetState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChangesetState(s)
	case string:
		*e = ChangesetState(s)
	default:
		return fmt.Errorf("unsupported scan type for ChangesetState: %T", src)
	}
	return nil
}

type NullChangesetState struct {
	ChangesetState ChangesetState
	Valid          bool // Valid is true if ChangesetState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChangesetState) Scan(value interface{}) error {
	if value == nil {
		ns.ChangesetState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChangesetState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChangesetState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChangesetState), nil
}

type PermissionLevel string

const (
	PermissionLevelEditor PermissionLevel = "editor"
	PermissionLevelAdmin  PermissionLevel = "admin"
)

func (e *PermissionLevel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PermissionLevel(s)
	case string:
		*e = PermissionLevel(s)
	default:
		return fmt.Errorf("unsupported scan type for PermissionLevel: %T", src)
	}
	return nil
}

type NullPermissionLevel struct {
	PermissionLevel PermissionLevel
	Valid           bool // Valid is true if PermissionLevel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPermissionLevel) Scan(value interface{}) error {
	if value == nil {
		ns.PermissionLevel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PermissionLevel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPermissionLevel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PermissionLevel), nil
}

type Changeset struct {
	ID        uint
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uint
	State     ChangesetState
}

type ChangesetChange struct {
	ID                             uint
	CreatedAt                      time.Time
	ChangesetID                    uint
	Type                           ChangesetChangeType
	FeatureVersionID               *uint
	PreviousFeatureVersionID       *uint
	ServiceVersionID               *uint
	PreviousServiceVersionID       *uint
	FeatureVersionServiceVersionID *uint
	KeyID                          *uint
	NewVariationValueID            *uint
	OldVariationValueID            *uint
}

type Feature struct {
	ID          uint
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
	ServiceID   uint
}

type FeatureVersion struct {
	ID        uint
	CreatedAt time.Time
	UpdatedAt time.Time
	ValidFrom *time.Time
	ValidTo   *time.Time
	Version   int
	FeatureID uint
}

type FeatureVersionServiceVersion struct {
	ID               uint
	CreatedAt        time.Time
	ValidFrom        *time.Time
	ValidTo          *time.Time
	FeatureVersionID uint
	ServiceVersionID uint
}

type Key struct {
	ID               uint
	CreatedAt        time.Time
	UpdatedAt        time.Time
	ValidFrom        *time.Time
	ValidTo          *time.Time
	Name             string
	Description      *string
	ValueTypeID      uint
	FeatureVersionID uint
}

type Service struct {
	ID            uint
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	Description   string
	ServiceTypeID uint
}

type ServiceType struct {
	ID        uint
	CreatedAt time.Time
	Name      string
}

type ServiceTypeVariationProperty struct {
	ID                  uint
	CreatedAt           time.Time
	UpdatedAt           time.Time
	Priority            int
	ServiceTypeID       uint
	VariationPropertyID uint
}

type ServiceVersion struct {
	ID        uint
	CreatedAt time.Time
	UpdatedAt time.Time
	ValidFrom *time.Time
	ValidTo   *time.Time
	ServiceID uint
	Version   int
	Published bool
}

type User struct {
	ID                  uint
	CreatedAt           time.Time
	UpdatedAt           time.Time
	DeletedAt           *time.Time
	Name                string
	Password            string
	GlobalAdministrator bool
}

type UserPermission struct {
	ID                 uint
	UserID             uint
	ServiceID          uint
	FeatureID          *uint
	KeyID              *uint
	VariationContextID *uint
	Permission         PermissionLevel
}

type ValueType struct {
	ID   uint
	Name string
}

type VariationContext struct {
	ID        uint
	CreatedAt time.Time
}

type VariationContextVariationPropertyValue struct {
	VariationContextID       uint
	VariationPropertyValueID uint
}

type VariationProperty struct {
	ID          uint
	Name        string
	DisplayName string
}

type VariationPropertyValue struct {
	ID                  uint
	VariationPropertyID uint
	Value               string
	ParentID            *uint
}

type VariationValue struct {
	ID                 uint
	ValidFrom          *time.Time
	ValidTo            *time.Time
	KeyID              uint
	VariationContextID uint
	Data               *string
}
