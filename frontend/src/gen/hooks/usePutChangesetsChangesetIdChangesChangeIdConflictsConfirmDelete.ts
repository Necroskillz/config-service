/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationResponse,
  PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeletePathParams,
  PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete400,
  PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete401,
  PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete404,
  PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete500,
} from '../types/PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationKey = () =>
  [{ url: '/changesets/{changeset_id}/changes/{change_id}/conflicts/confirm_delete' }] as const

export type PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationKey = ReturnType<
  typeof putChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationKey
>

/**
 * @description Confirm a delete value change to resolve conflict of deleting a value of a variation that has changed
 * @summary Confirm delete change
 * {@link /changesets/:changeset_id/changes/:change_id/conflicts/confirm_delete}
 */
export async function putChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete(
  changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeletePathParams['changeset_id'],
  change_id: PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeletePathParams['change_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete400
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete401
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete404
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete500
    >,
    unknown
  >({ method: 'PUT', url: `/changesets/${changeset_id}/changes/${change_id}/conflicts/confirm_delete`, ...requestConfig })
  return res.data
}

/**
 * @description Confirm a delete value change to resolve conflict of deleting a value of a variation that has changed
 * @summary Confirm delete change
 * {@link /changesets/:changeset_id/changes/:change_id/conflicts/confirm_delete}
 */
export function usePutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationResponse,
      ResponseErrorConfig<
        | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete400
        | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete401
        | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete404
        | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete500
      >,
      {
        changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeletePathParams['changeset_id']
        change_id: PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeletePathParams['change_id']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? putChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationKey()

  return useMutation<
    PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeleteMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete400
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete401
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete404
      | PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete500
    >,
    {
      changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeletePathParams['changeset_id']
      change_id: PutChangesetsChangesetIdChangesChangeIdConflictsConfirmDeletePathParams['change_id']
    },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id, change_id }) => {
        return putChangesetsChangesetIdChangesChangeIdConflictsConfirmDelete(changeset_id, change_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}