/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  GetUsersUserIdQueryResponse,
  GetUsersUserIdPathParams,
  GetUsersUserId400,
  GetUsersUserId401,
  GetUsersUserId404,
  GetUsersUserId500,
} from '../types/GetUsersUserId.ts'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getUsersUserIdSuspenseQueryKey = (user_id: GetUsersUserIdPathParams['user_id']) =>
  [{ url: '/users/:user_id', params: { user_id: user_id } }] as const

export type GetUsersUserIdSuspenseQueryKey = ReturnType<typeof getUsersUserIdSuspenseQueryKey>

/**
 * @description Get a user by ID
 * @summary Get a user
 * {@link /users/:user_id}
 */
export async function getUsersUserIdSuspense(user_id: GetUsersUserIdPathParams['user_id'], config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetUsersUserIdQueryResponse,
    ResponseErrorConfig<GetUsersUserId400 | GetUsersUserId401 | GetUsersUserId404 | GetUsersUserId500>,
    unknown
  >({ method: 'GET', url: `/users/${user_id}`, ...requestConfig })
  return res.data
}

export function getUsersUserIdSuspenseQueryOptions(
  user_id: GetUsersUserIdPathParams['user_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getUsersUserIdSuspenseQueryKey(user_id)
  return queryOptions<
    GetUsersUserIdQueryResponse,
    ResponseErrorConfig<GetUsersUserId400 | GetUsersUserId401 | GetUsersUserId404 | GetUsersUserId500>,
    GetUsersUserIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!user_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUsersUserIdSuspense(user_id, config)
    },
  })
}

/**
 * @description Get a user by ID
 * @summary Get a user
 * {@link /users/:user_id}
 */
export function useGetUsersUserIdSuspense<
  TData = GetUsersUserIdQueryResponse,
  TQueryData = GetUsersUserIdQueryResponse,
  TQueryKey extends QueryKey = GetUsersUserIdSuspenseQueryKey,
>(
  user_id: GetUsersUserIdPathParams['user_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetUsersUserIdQueryResponse,
        ResponseErrorConfig<GetUsersUserId400 | GetUsersUserId401 | GetUsersUserId404 | GetUsersUserId500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getUsersUserIdSuspenseQueryKey(user_id)

  const query = useSuspenseQuery(
    {
      ...(getUsersUserIdSuspenseQueryOptions(user_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetUsersUserId400 | GetUsersUserId401 | GetUsersUserId404 | GetUsersUserId500>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}