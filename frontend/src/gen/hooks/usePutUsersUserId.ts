/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PutUsersUserIdMutationRequest,
  PutUsersUserIdMutationResponse,
  PutUsersUserIdPathParams,
  PutUsersUserId400,
  PutUsersUserId401,
  PutUsersUserId500,
} from '../types/PutUsersUserId.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putUsersUserIdMutationKey = () => [{ url: '/users/{user_id}' }] as const

export type PutUsersUserIdMutationKey = ReturnType<typeof putUsersUserIdMutationKey>

/**
 * @description Update a user by ID
 * @summary Update a user
 * {@link /users/:user_id}
 */
export async function putUsersUserId(
  user_id: PutUsersUserIdPathParams['user_id'],
  data: PutUsersUserIdMutationRequest,
  config: Partial<RequestConfig<PutUsersUserIdMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutUsersUserIdMutationResponse,
    ResponseErrorConfig<PutUsersUserId400 | PutUsersUserId401 | PutUsersUserId500>,
    PutUsersUserIdMutationRequest
  >({ method: 'PUT', url: `/users/${user_id}`, data, ...requestConfig })
  return res.data
}

/**
 * @description Update a user by ID
 * @summary Update a user
 * {@link /users/:user_id}
 */
export function usePutUsersUserId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutUsersUserIdMutationResponse,
      ResponseErrorConfig<PutUsersUserId400 | PutUsersUserId401 | PutUsersUserId500>,
      { user_id: PutUsersUserIdPathParams['user_id']; data: PutUsersUserIdMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PutUsersUserIdMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? putUsersUserIdMutationKey()

  return useMutation<
    PutUsersUserIdMutationResponse,
    ResponseErrorConfig<PutUsersUserId400 | PutUsersUserId401 | PutUsersUserId500>,
    { user_id: PutUsersUserIdPathParams['user_id']; data: PutUsersUserIdMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ user_id, data }) => {
        return putUsersUserId(user_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}