/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetConfigurationVariationHierarchyQueryResponse,
  GetConfigurationVariationHierarchyQueryParams,
  GetConfigurationVariationHierarchy400,
  GetConfigurationVariationHierarchy404,
  GetConfigurationVariationHierarchy500,
} from '../types/GetConfigurationVariationHierarchy.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getConfigurationVariationHierarchyQueryKey = (params: GetConfigurationVariationHierarchyQueryParams) =>
  [{ url: '/configuration/variation-hierarchy' }, ...(params ? [params] : [])] as const

export type GetConfigurationVariationHierarchyQueryKey = ReturnType<typeof getConfigurationVariationHierarchyQueryKey>

/**
 * @description Get variation hierarchy
 * @summary Get variation hierarchy
 * {@link /configuration/variation-hierarchy}
 */
export async function getConfigurationVariationHierarchy(
  params: GetConfigurationVariationHierarchyQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetConfigurationVariationHierarchyQueryResponse,
    ResponseErrorConfig<GetConfigurationVariationHierarchy400 | GetConfigurationVariationHierarchy404 | GetConfigurationVariationHierarchy500>,
    unknown
  >({ method: 'GET', url: `/configuration/variation-hierarchy`, params, ...requestConfig })
  return res.data
}

export function getConfigurationVariationHierarchyQueryOptions(
  params: GetConfigurationVariationHierarchyQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getConfigurationVariationHierarchyQueryKey(params)
  return queryOptions<
    GetConfigurationVariationHierarchyQueryResponse,
    ResponseErrorConfig<GetConfigurationVariationHierarchy400 | GetConfigurationVariationHierarchy404 | GetConfigurationVariationHierarchy500>,
    GetConfigurationVariationHierarchyQueryResponse,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getConfigurationVariationHierarchy(params, config)
    },
  })
}

/**
 * @description Get variation hierarchy
 * @summary Get variation hierarchy
 * {@link /configuration/variation-hierarchy}
 */
export function useGetConfigurationVariationHierarchy<
  TData = GetConfigurationVariationHierarchyQueryResponse,
  TQueryData = GetConfigurationVariationHierarchyQueryResponse,
  TQueryKey extends QueryKey = GetConfigurationVariationHierarchyQueryKey,
>(
  params: GetConfigurationVariationHierarchyQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetConfigurationVariationHierarchyQueryResponse,
        ResponseErrorConfig<GetConfigurationVariationHierarchy400 | GetConfigurationVariationHierarchy404 | GetConfigurationVariationHierarchy500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getConfigurationVariationHierarchyQueryKey(params)

  const query = useQuery(
    {
      ...(getConfigurationVariationHierarchyQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<GetConfigurationVariationHierarchy400 | GetConfigurationVariationHierarchy404 | GetConfigurationVariationHierarchy500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}