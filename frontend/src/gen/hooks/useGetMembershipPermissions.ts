/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetMembershipPermissionsQueryResponse,
  GetMembershipPermissionsQueryParams,
  GetMembershipPermissions400,
  GetMembershipPermissions401,
  GetMembershipPermissions404,
  GetMembershipPermissions500,
} from '../types/GetMembershipPermissions.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getMembershipPermissionsQueryKey = (params: GetMembershipPermissionsQueryParams) =>
  [{ url: '/membership/permissions' }, ...(params ? [params] : [])] as const

export type GetMembershipPermissionsQueryKey = ReturnType<typeof getMembershipPermissionsQueryKey>

/**
 * @description Get permissions for a service, feature, key, or variation
 * @summary Get permissions
 * {@link /membership/permissions}
 */
export async function getMembershipPermissions(params: GetMembershipPermissionsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetMembershipPermissionsQueryResponse,
    ResponseErrorConfig<GetMembershipPermissions400 | GetMembershipPermissions401 | GetMembershipPermissions404 | GetMembershipPermissions500>,
    unknown
  >({ method: 'GET', url: `/membership/permissions`, params, ...requestConfig })
  return res.data
}

export function getMembershipPermissionsQueryOptions(
  params: GetMembershipPermissionsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getMembershipPermissionsQueryKey(params)
  return queryOptions<
    GetMembershipPermissionsQueryResponse,
    ResponseErrorConfig<GetMembershipPermissions400 | GetMembershipPermissions401 | GetMembershipPermissions404 | GetMembershipPermissions500>,
    GetMembershipPermissionsQueryResponse,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getMembershipPermissions(params, config)
    },
  })
}

/**
 * @description Get permissions for a service, feature, key, or variation
 * @summary Get permissions
 * {@link /membership/permissions}
 */
export function useGetMembershipPermissions<
  TData = GetMembershipPermissionsQueryResponse,
  TQueryData = GetMembershipPermissionsQueryResponse,
  TQueryKey extends QueryKey = GetMembershipPermissionsQueryKey,
>(
  params: GetMembershipPermissionsQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetMembershipPermissionsQueryResponse,
        ResponseErrorConfig<GetMembershipPermissions400 | GetMembershipPermissions401 | GetMembershipPermissions404 | GetMembershipPermissions500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getMembershipPermissionsQueryKey(params)

  const query = useQuery(
    {
      ...(getMembershipPermissionsQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<GetMembershipPermissions400 | GetMembershipPermissions401 | GetMembershipPermissions404 | GetMembershipPermissions500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}