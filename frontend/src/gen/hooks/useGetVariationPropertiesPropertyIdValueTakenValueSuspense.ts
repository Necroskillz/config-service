/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetVariationPropertiesPropertyIdValueTakenValueQueryResponse,
  GetVariationPropertiesPropertyIdValueTakenValuePathParams,
  GetVariationPropertiesPropertyIdValueTakenValue400,
  GetVariationPropertiesPropertyIdValueTakenValue401,
  GetVariationPropertiesPropertyIdValueTakenValue500,
} from '../types/GetVariationPropertiesPropertyIdValueTakenValue.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getVariationPropertiesPropertyIdValueTakenValueSuspenseQueryKey = (
  property_id: GetVariationPropertiesPropertyIdValueTakenValuePathParams['property_id'],
  value: GetVariationPropertiesPropertyIdValueTakenValuePathParams['value'],
) => [{ url: '/variation-properties/:property_id/value-taken/:value', params: { property_id: property_id, value: value } }] as const

export type GetVariationPropertiesPropertyIdValueTakenValueSuspenseQueryKey = ReturnType<typeof getVariationPropertiesPropertyIdValueTakenValueSuspenseQueryKey>

/**
 * @description Check if variation property name is taken
 * @summary Check if variation property name is taken
 * {@link /variation-properties/:property_id/value-taken/:value}
 */
export async function getVariationPropertiesPropertyIdValueTakenValueSuspense(
  property_id: GetVariationPropertiesPropertyIdValueTakenValuePathParams['property_id'],
  value: GetVariationPropertiesPropertyIdValueTakenValuePathParams['value'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetVariationPropertiesPropertyIdValueTakenValueQueryResponse,
    ResponseErrorConfig<
      | GetVariationPropertiesPropertyIdValueTakenValue400
      | GetVariationPropertiesPropertyIdValueTakenValue401
      | GetVariationPropertiesPropertyIdValueTakenValue500
    >,
    unknown
  >({ method: 'GET', url: `/variation-properties/${property_id}/value-taken/${value}`, ...requestConfig })
  return res.data
}

export function getVariationPropertiesPropertyIdValueTakenValueSuspenseQueryOptions(
  property_id: GetVariationPropertiesPropertyIdValueTakenValuePathParams['property_id'],
  value: GetVariationPropertiesPropertyIdValueTakenValuePathParams['value'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getVariationPropertiesPropertyIdValueTakenValueSuspenseQueryKey(property_id, value)
  return queryOptions<
    GetVariationPropertiesPropertyIdValueTakenValueQueryResponse,
    ResponseErrorConfig<
      | GetVariationPropertiesPropertyIdValueTakenValue400
      | GetVariationPropertiesPropertyIdValueTakenValue401
      | GetVariationPropertiesPropertyIdValueTakenValue500
    >,
    GetVariationPropertiesPropertyIdValueTakenValueQueryResponse,
    typeof queryKey
  >({
    enabled: !!(property_id && value),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getVariationPropertiesPropertyIdValueTakenValueSuspense(property_id, value, config)
    },
  })
}

/**
 * @description Check if variation property name is taken
 * @summary Check if variation property name is taken
 * {@link /variation-properties/:property_id/value-taken/:value}
 */
export function useGetVariationPropertiesPropertyIdValueTakenValueSuspense<
  TData = GetVariationPropertiesPropertyIdValueTakenValueQueryResponse,
  TQueryKey extends QueryKey = GetVariationPropertiesPropertyIdValueTakenValueSuspenseQueryKey,
>(
  property_id: GetVariationPropertiesPropertyIdValueTakenValuePathParams['property_id'],
  value: GetVariationPropertiesPropertyIdValueTakenValuePathParams['value'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetVariationPropertiesPropertyIdValueTakenValueQueryResponse,
        ResponseErrorConfig<
          | GetVariationPropertiesPropertyIdValueTakenValue400
          | GetVariationPropertiesPropertyIdValueTakenValue401
          | GetVariationPropertiesPropertyIdValueTakenValue500
        >,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getVariationPropertiesPropertyIdValueTakenValueSuspenseQueryKey(property_id, value)

  const query = useSuspenseQuery(
    {
      ...(getVariationPropertiesPropertyIdValueTakenValueSuspenseQueryOptions(property_id, value, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetVariationPropertiesPropertyIdValueTakenValue400
      | GetVariationPropertiesPropertyIdValueTakenValue401
      | GetVariationPropertiesPropertyIdValueTakenValue500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}