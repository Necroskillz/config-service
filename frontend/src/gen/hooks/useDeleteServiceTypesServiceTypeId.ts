/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  DeleteServiceTypesServiceTypeIdMutationResponse,
  DeleteServiceTypesServiceTypeIdPathParams,
  DeleteServiceTypesServiceTypeId400,
  DeleteServiceTypesServiceTypeId401,
  DeleteServiceTypesServiceTypeId403,
  DeleteServiceTypesServiceTypeId404,
  DeleteServiceTypesServiceTypeId500,
} from '../types/DeleteServiceTypesServiceTypeId.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const deleteServiceTypesServiceTypeIdMutationKey = () => [{ url: '/service-types/{service_type_id}' }] as const

export type DeleteServiceTypesServiceTypeIdMutationKey = ReturnType<typeof deleteServiceTypesServiceTypeIdMutationKey>

/**
 * @description Delete a service type
 * @summary Delete service type
 * {@link /service-types/:service_type_id}
 */
export async function deleteServiceTypesServiceTypeId(
  service_type_id: DeleteServiceTypesServiceTypeIdPathParams['service_type_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteServiceTypesServiceTypeIdMutationResponse,
    ResponseErrorConfig<
      | DeleteServiceTypesServiceTypeId400
      | DeleteServiceTypesServiceTypeId401
      | DeleteServiceTypesServiceTypeId403
      | DeleteServiceTypesServiceTypeId404
      | DeleteServiceTypesServiceTypeId500
    >,
    unknown
  >({ method: 'DELETE', url: `/service-types/${service_type_id}`, ...requestConfig })
  return res.data
}

/**
 * @description Delete a service type
 * @summary Delete service type
 * {@link /service-types/:service_type_id}
 */
export function useDeleteServiceTypesServiceTypeId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteServiceTypesServiceTypeIdMutationResponse,
      ResponseErrorConfig<
        | DeleteServiceTypesServiceTypeId400
        | DeleteServiceTypesServiceTypeId401
        | DeleteServiceTypesServiceTypeId403
        | DeleteServiceTypesServiceTypeId404
        | DeleteServiceTypesServiceTypeId500
      >,
      { service_type_id: DeleteServiceTypesServiceTypeIdPathParams['service_type_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteServiceTypesServiceTypeIdMutationKey()

  return useMutation<
    DeleteServiceTypesServiceTypeIdMutationResponse,
    ResponseErrorConfig<
      | DeleteServiceTypesServiceTypeId400
      | DeleteServiceTypesServiceTypeId401
      | DeleteServiceTypesServiceTypeId403
      | DeleteServiceTypesServiceTypeId404
      | DeleteServiceTypesServiceTypeId500
    >,
    { service_type_id: DeleteServiceTypesServiceTypeIdPathParams['service_type_id'] },
    TContext
  >(
    {
      mutationFn: async ({ service_type_id }) => {
        return deleteServiceTypesServiceTypeId(service_type_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}