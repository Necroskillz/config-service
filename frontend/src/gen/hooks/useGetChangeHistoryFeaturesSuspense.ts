/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetChangeHistoryFeaturesQueryResponse,
  GetChangeHistoryFeaturesQueryParams,
  GetChangeHistoryFeatures400,
  GetChangeHistoryFeatures401,
  GetChangeHistoryFeatures404,
  GetChangeHistoryFeatures500,
} from '../types/GetChangeHistoryFeatures.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getChangeHistoryFeaturesSuspenseQueryKey = (params?: GetChangeHistoryFeaturesQueryParams) =>
  [{ url: '/change-history/features' }, ...(params ? [params] : [])] as const

export type GetChangeHistoryFeaturesSuspenseQueryKey = ReturnType<typeof getChangeHistoryFeaturesSuspenseQueryKey>

/**
 * @description Get features
 * @summary Get features
 * {@link /change-history/features}
 */
export async function getChangeHistoryFeaturesSuspense(
  params?: GetChangeHistoryFeaturesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangeHistoryFeaturesQueryResponse,
    ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>,
    unknown
  >({ method: 'GET', url: `/change-history/features`, params, ...requestConfig })
  return res.data
}

export function getChangeHistoryFeaturesSuspenseQueryOptions(
  params?: GetChangeHistoryFeaturesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getChangeHistoryFeaturesSuspenseQueryKey(params)
  return queryOptions<
    GetChangeHistoryFeaturesQueryResponse,
    ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>,
    GetChangeHistoryFeaturesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangeHistoryFeaturesSuspense(params, config)
    },
  })
}

/**
 * @description Get features
 * @summary Get features
 * {@link /change-history/features}
 */
export function useGetChangeHistoryFeaturesSuspense<
  TData = GetChangeHistoryFeaturesQueryResponse,
  TQueryKey extends QueryKey = GetChangeHistoryFeaturesSuspenseQueryKey,
>(
  params?: GetChangeHistoryFeaturesQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetChangeHistoryFeaturesQueryResponse,
        ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangeHistoryFeaturesSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(getChangeHistoryFeaturesSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}