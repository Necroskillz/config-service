/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PostAuthLoginMutationRequest,
  PostAuthLoginMutationResponse,
  PostAuthLogin400,
  PostAuthLogin401,
  PostAuthLogin422,
  PostAuthLogin500,
} from '../types/PostAuthLogin.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postAuthLoginMutationKey = () => [{ url: '/auth/login' }] as const

export type PostAuthLoginMutationKey = ReturnType<typeof postAuthLoginMutationKey>

/**
 * @description Login to the application
 * @summary Login
 * {@link /auth/login}
 */
export async function postAuthLogin(
  data: PostAuthLoginMutationRequest,
  config: Partial<RequestConfig<PostAuthLoginMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostAuthLoginMutationResponse,
    ResponseErrorConfig<PostAuthLogin400 | PostAuthLogin401 | PostAuthLogin422 | PostAuthLogin500>,
    PostAuthLoginMutationRequest
  >({ method: 'POST', url: `/auth/login`, data, ...requestConfig })
  return res.data
}

/**
 * @description Login to the application
 * @summary Login
 * {@link /auth/login}
 */
export function usePostAuthLogin<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostAuthLoginMutationResponse,
      ResponseErrorConfig<PostAuthLogin400 | PostAuthLogin401 | PostAuthLogin422 | PostAuthLogin500>,
      { data: PostAuthLoginMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostAuthLoginMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postAuthLoginMutationKey()

  return useMutation<
    PostAuthLoginMutationResponse,
    ResponseErrorConfig<PostAuthLogin400 | PostAuthLogin401 | PostAuthLogin422 | PostAuthLogin500>,
    { data: PostAuthLoginMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postAuthLogin(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}