/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PutServicesServiceVersionIdMutationRequest,
  PutServicesServiceVersionIdMutationResponse,
  PutServicesServiceVersionIdPathParams,
  PutServicesServiceVersionId400,
  PutServicesServiceVersionId401,
  PutServicesServiceVersionId403,
  PutServicesServiceVersionId404,
  PutServicesServiceVersionId422,
  PutServicesServiceVersionId500,
} from '../types/PutServicesServiceVersionId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putServicesServiceVersionIdMutationKey = () => [{ url: '/services/{service_version_id}' }] as const

export type PutServicesServiceVersionIdMutationKey = ReturnType<typeof putServicesServiceVersionIdMutationKey>

/**
 * @description Update service
 * @summary Update service
 * {@link /services/:service_version_id}
 */
export async function putServicesServiceVersionId(
  service_version_id: PutServicesServiceVersionIdPathParams['service_version_id'],
  data: PutServicesServiceVersionIdMutationRequest,
  config: Partial<RequestConfig<PutServicesServiceVersionIdMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutServicesServiceVersionIdMutationResponse,
    ResponseErrorConfig<
      | PutServicesServiceVersionId400
      | PutServicesServiceVersionId401
      | PutServicesServiceVersionId403
      | PutServicesServiceVersionId404
      | PutServicesServiceVersionId422
      | PutServicesServiceVersionId500
    >,
    PutServicesServiceVersionIdMutationRequest
  >({ method: 'PUT', url: `/services/${service_version_id}`, data, ...requestConfig })
  return res.data
}

/**
 * @description Update service
 * @summary Update service
 * {@link /services/:service_version_id}
 */
export function usePutServicesServiceVersionId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutServicesServiceVersionIdMutationResponse,
      ResponseErrorConfig<
        | PutServicesServiceVersionId400
        | PutServicesServiceVersionId401
        | PutServicesServiceVersionId403
        | PutServicesServiceVersionId404
        | PutServicesServiceVersionId422
        | PutServicesServiceVersionId500
      >,
      { service_version_id: PutServicesServiceVersionIdPathParams['service_version_id']; data: PutServicesServiceVersionIdMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PutServicesServiceVersionIdMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? putServicesServiceVersionIdMutationKey()

  return useMutation<
    PutServicesServiceVersionIdMutationResponse,
    ResponseErrorConfig<
      | PutServicesServiceVersionId400
      | PutServicesServiceVersionId401
      | PutServicesServiceVersionId403
      | PutServicesServiceVersionId404
      | PutServicesServiceVersionId422
      | PutServicesServiceVersionId500
    >,
    { service_version_id: PutServicesServiceVersionIdPathParams['service_version_id']; data: PutServicesServiceVersionIdMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ service_version_id, data }) => {
        return putServicesServiceVersionId(service_version_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}