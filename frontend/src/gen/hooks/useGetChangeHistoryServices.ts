/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetChangeHistoryServicesQueryResponse,
  GetChangeHistoryServices400,
  GetChangeHistoryServices401,
  GetChangeHistoryServices404,
  GetChangeHistoryServices500,
} from '../types/GetChangeHistoryServices.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getChangeHistoryServicesQueryKey = () => [{ url: '/change-history/services' }] as const

export type GetChangeHistoryServicesQueryKey = ReturnType<typeof getChangeHistoryServicesQueryKey>

/**
 * @description Get applied services
 * @summary Get applied services
 * {@link /change-history/services}
 */
export async function getChangeHistoryServices(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangeHistoryServicesQueryResponse,
    ResponseErrorConfig<GetChangeHistoryServices400 | GetChangeHistoryServices401 | GetChangeHistoryServices404 | GetChangeHistoryServices500>,
    unknown
  >({ method: 'GET', url: `/change-history/services`, ...requestConfig })
  return res.data
}

export function getChangeHistoryServicesQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getChangeHistoryServicesQueryKey()
  return queryOptions<
    GetChangeHistoryServicesQueryResponse,
    ResponseErrorConfig<GetChangeHistoryServices400 | GetChangeHistoryServices401 | GetChangeHistoryServices404 | GetChangeHistoryServices500>,
    GetChangeHistoryServicesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangeHistoryServices(config)
    },
  })
}

/**
 * @description Get applied services
 * @summary Get applied services
 * {@link /change-history/services}
 */
export function useGetChangeHistoryServices<
  TData = GetChangeHistoryServicesQueryResponse,
  TQueryData = GetChangeHistoryServicesQueryResponse,
  TQueryKey extends QueryKey = GetChangeHistoryServicesQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetChangeHistoryServicesQueryResponse,
        ResponseErrorConfig<GetChangeHistoryServices400 | GetChangeHistoryServices401 | GetChangeHistoryServices404 | GetChangeHistoryServices500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangeHistoryServicesQueryKey()

  const query = useQuery(
    {
      ...(getChangeHistoryServicesQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<GetChangeHistoryServices400 | GetChangeHistoryServices401 | GetChangeHistoryServices404 | GetChangeHistoryServices500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}