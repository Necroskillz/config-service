/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeleteChangesetsChangesetIdMutationResponse,
  DeleteChangesetsChangesetIdPathParams,
  DeleteChangesetsChangesetId400,
  DeleteChangesetsChangesetId401,
  DeleteChangesetsChangesetId403,
  DeleteChangesetsChangesetId404,
  DeleteChangesetsChangesetId500,
} from '../types/DeleteChangesetsChangesetId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const deleteChangesetsChangesetIdMutationKey = () => [{ url: '/changesets/{changeset_id}' }] as const

export type DeleteChangesetsChangesetIdMutationKey = ReturnType<typeof deleteChangesetsChangesetIdMutationKey>

/**
 * @description Discard a changeset by ID
 * @summary Discard a changeset
 * {@link /changesets/:changeset_id}
 */
export async function deleteChangesetsChangesetId(
  changeset_id: DeleteChangesetsChangesetIdPathParams['changeset_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteChangesetsChangesetIdMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesetId400
      | DeleteChangesetsChangesetId401
      | DeleteChangesetsChangesetId403
      | DeleteChangesetsChangesetId404
      | DeleteChangesetsChangesetId500
    >,
    unknown
  >({ method: 'DELETE', url: `/changesets/${changeset_id}`, ...requestConfig })
  return res.data
}

/**
 * @description Discard a changeset by ID
 * @summary Discard a changeset
 * {@link /changesets/:changeset_id}
 */
export function useDeleteChangesetsChangesetId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteChangesetsChangesetIdMutationResponse,
      ResponseErrorConfig<
        | DeleteChangesetsChangesetId400
        | DeleteChangesetsChangesetId401
        | DeleteChangesetsChangesetId403
        | DeleteChangesetsChangesetId404
        | DeleteChangesetsChangesetId500
      >,
      { changeset_id: DeleteChangesetsChangesetIdPathParams['changeset_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deleteChangesetsChangesetIdMutationKey()

  return useMutation<
    DeleteChangesetsChangesetIdMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesetId400
      | DeleteChangesetsChangesetId401
      | DeleteChangesetsChangesetId403
      | DeleteChangesetsChangesetId404
      | DeleteChangesetsChangesetId500
    >,
    { changeset_id: DeleteChangesetsChangesetIdPathParams['changeset_id'] },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id }) => {
        return deleteChangesetsChangesetId(changeset_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}