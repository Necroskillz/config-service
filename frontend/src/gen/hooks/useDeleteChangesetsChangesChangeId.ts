/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeleteChangesetsChangesChangeIdMutationResponse,
  DeleteChangesetsChangesChangeIdPathParams,
  DeleteChangesetsChangesChangeId400,
  DeleteChangesetsChangesChangeId401,
  DeleteChangesetsChangesChangeId403,
  DeleteChangesetsChangesChangeId404,
  DeleteChangesetsChangesChangeId500,
} from '../types/DeleteChangesetsChangesChangeId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const deleteChangesetsChangesChangeIdMutationKey = () => [{ url: '/changesets/changes/{change_id}' }] as const

export type DeleteChangesetsChangesChangeIdMutationKey = ReturnType<typeof deleteChangesetsChangesChangeIdMutationKey>

/**
 * @description Discard a change by ID
 * @summary Discard a change
 * {@link /changesets/changes/:change_id}
 */
export async function deleteChangesetsChangesChangeId(
  change_id: DeleteChangesetsChangesChangeIdPathParams['change_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteChangesetsChangesChangeIdMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesChangeId400
      | DeleteChangesetsChangesChangeId401
      | DeleteChangesetsChangesChangeId403
      | DeleteChangesetsChangesChangeId404
      | DeleteChangesetsChangesChangeId500
    >,
    unknown
  >({ method: 'DELETE', url: `/changesets/changes/${change_id}`, ...requestConfig })
  return res.data
}

/**
 * @description Discard a change by ID
 * @summary Discard a change
 * {@link /changesets/changes/:change_id}
 */
export function useDeleteChangesetsChangesChangeId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteChangesetsChangesChangeIdMutationResponse,
      ResponseErrorConfig<
        | DeleteChangesetsChangesChangeId400
        | DeleteChangesetsChangesChangeId401
        | DeleteChangesetsChangesChangeId403
        | DeleteChangesetsChangesChangeId404
        | DeleteChangesetsChangesChangeId500
      >,
      { change_id: DeleteChangesetsChangesChangeIdPathParams['change_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deleteChangesetsChangesChangeIdMutationKey()

  return useMutation<
    DeleteChangesetsChangesChangeIdMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesChangeId400
      | DeleteChangesetsChangesChangeId401
      | DeleteChangesetsChangesChangeId403
      | DeleteChangesetsChangesChangeId404
      | DeleteChangesetsChangesChangeId500
    >,
    { change_id: DeleteChangesetsChangesChangeIdPathParams['change_id'] },
    TContext
  >(
    {
      mutationFn: async ({ change_id }) => {
        return deleteChangesetsChangesChangeId(change_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}