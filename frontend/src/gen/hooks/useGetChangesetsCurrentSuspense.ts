/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  GetChangesetsCurrentQueryResponse,
  GetChangesetsCurrent401,
  GetChangesetsCurrent404,
  GetChangesetsCurrent500,
} from '../types/GetChangesetsCurrent.ts'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getChangesetsCurrentSuspenseQueryKey = () => [{ url: '/changesets/current' }] as const

export type GetChangesetsCurrentSuspenseQueryKey = ReturnType<typeof getChangesetsCurrentSuspenseQueryKey>

/**
 * @description Get the current changeset info
 * @summary Get the current changeset info
 * {@link /changesets/current}
 */
export async function getChangesetsCurrentSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangesetsCurrentQueryResponse,
    ResponseErrorConfig<GetChangesetsCurrent401 | GetChangesetsCurrent404 | GetChangesetsCurrent500>,
    unknown
  >({ method: 'GET', url: `/changesets/current`, ...requestConfig })
  return res.data
}

export function getChangesetsCurrentSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getChangesetsCurrentSuspenseQueryKey()
  return queryOptions<
    GetChangesetsCurrentQueryResponse,
    ResponseErrorConfig<GetChangesetsCurrent401 | GetChangesetsCurrent404 | GetChangesetsCurrent500>,
    GetChangesetsCurrentQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangesetsCurrentSuspense(config)
    },
  })
}

/**
 * @description Get the current changeset info
 * @summary Get the current changeset info
 * {@link /changesets/current}
 */
export function useGetChangesetsCurrentSuspense<TData = GetChangesetsCurrentQueryResponse, TQueryKey extends QueryKey = GetChangesetsCurrentSuspenseQueryKey>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetChangesetsCurrentQueryResponse,
        ResponseErrorConfig<GetChangesetsCurrent401 | GetChangesetsCurrent404 | GetChangesetsCurrent500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangesetsCurrentSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(getChangesetsCurrentSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetChangesetsCurrent401 | GetChangesetsCurrent404 | GetChangesetsCurrent500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}