/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeleteMembershipGroupsGroupIdMutationResponse,
  DeleteMembershipGroupsGroupIdPathParams,
  DeleteMembershipGroupsGroupId400,
  DeleteMembershipGroupsGroupId401,
  DeleteMembershipGroupsGroupId403,
  DeleteMembershipGroupsGroupId404,
  DeleteMembershipGroupsGroupId500,
} from '../types/DeleteMembershipGroupsGroupId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const deleteMembershipGroupsGroupIdMutationKey = () => [{ url: '/membership/groups/{group_id}' }] as const

export type DeleteMembershipGroupsGroupIdMutationKey = ReturnType<typeof deleteMembershipGroupsGroupIdMutationKey>

/**
 * @description Delete a group by ID
 * @summary Delete a group
 * {@link /membership/groups/:group_id}
 */
export async function deleteMembershipGroupsGroupId(
  group_id: DeleteMembershipGroupsGroupIdPathParams['group_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteMembershipGroupsGroupIdMutationResponse,
    ResponseErrorConfig<
      | DeleteMembershipGroupsGroupId400
      | DeleteMembershipGroupsGroupId401
      | DeleteMembershipGroupsGroupId403
      | DeleteMembershipGroupsGroupId404
      | DeleteMembershipGroupsGroupId500
    >,
    unknown
  >({ method: 'DELETE', url: `/membership/groups/${group_id}`, ...requestConfig })
  return res.data
}

/**
 * @description Delete a group by ID
 * @summary Delete a group
 * {@link /membership/groups/:group_id}
 */
export function useDeleteMembershipGroupsGroupId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteMembershipGroupsGroupIdMutationResponse,
      ResponseErrorConfig<
        | DeleteMembershipGroupsGroupId400
        | DeleteMembershipGroupsGroupId401
        | DeleteMembershipGroupsGroupId403
        | DeleteMembershipGroupsGroupId404
        | DeleteMembershipGroupsGroupId500
      >,
      { group_id: DeleteMembershipGroupsGroupIdPathParams['group_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteMembershipGroupsGroupIdMutationKey()

  return useMutation<
    DeleteMembershipGroupsGroupIdMutationResponse,
    ResponseErrorConfig<
      | DeleteMembershipGroupsGroupId400
      | DeleteMembershipGroupsGroupId401
      | DeleteMembershipGroupsGroupId403
      | DeleteMembershipGroupsGroupId404
      | DeleteMembershipGroupsGroupId500
    >,
    { group_id: DeleteMembershipGroupsGroupIdPathParams['group_id'] },
    TContext
  >(
    {
      mutationFn: async ({ group_id }) => {
        return deleteMembershipGroupsGroupId(group_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}