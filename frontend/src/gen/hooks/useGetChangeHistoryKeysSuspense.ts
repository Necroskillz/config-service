/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetChangeHistoryKeysQueryResponse,
  GetChangeHistoryKeysQueryParams,
  GetChangeHistoryKeys400,
  GetChangeHistoryKeys401,
  GetChangeHistoryKeys404,
  GetChangeHistoryKeys500,
} from '../types/GetChangeHistoryKeys.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getChangeHistoryKeysSuspenseQueryKey = (params?: GetChangeHistoryKeysQueryParams) =>
  [{ url: '/change-history/keys' }, ...(params ? [params] : [])] as const

export type GetChangeHistoryKeysSuspenseQueryKey = ReturnType<typeof getChangeHistoryKeysSuspenseQueryKey>

/**
 * @description Get applied keys
 * @summary Get applied keys
 * {@link /change-history/keys}
 */
export async function getChangeHistoryKeysSuspense(params?: GetChangeHistoryKeysQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangeHistoryKeysQueryResponse,
    ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>,
    unknown
  >({ method: 'GET', url: `/change-history/keys`, params, ...requestConfig })
  return res.data
}

export function getChangeHistoryKeysSuspenseQueryOptions(
  params?: GetChangeHistoryKeysQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getChangeHistoryKeysSuspenseQueryKey(params)
  return queryOptions<
    GetChangeHistoryKeysQueryResponse,
    ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>,
    GetChangeHistoryKeysQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangeHistoryKeysSuspense(params, config)
    },
  })
}

/**
 * @description Get applied keys
 * @summary Get applied keys
 * {@link /change-history/keys}
 */
export function useGetChangeHistoryKeysSuspense<TData = GetChangeHistoryKeysQueryResponse, TQueryKey extends QueryKey = GetChangeHistoryKeysSuspenseQueryKey>(
  params?: GetChangeHistoryKeysQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetChangeHistoryKeysQueryResponse,
        ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangeHistoryKeysSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(getChangeHistoryKeysSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}