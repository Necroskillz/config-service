/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetVariationPropertiesPropertyIdQueryResponse,
  GetVariationPropertiesPropertyIdPathParams,
  GetVariationPropertiesPropertyId401,
  GetVariationPropertiesPropertyId404,
  GetVariationPropertiesPropertyId500,
} from '../types/GetVariationPropertiesPropertyId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getVariationPropertiesPropertyIdSuspenseQueryKey = (property_id: GetVariationPropertiesPropertyIdPathParams['property_id']) =>
  [{ url: '/variation-properties/:property_id', params: { property_id: property_id } }] as const

export type GetVariationPropertiesPropertyIdSuspenseQueryKey = ReturnType<typeof getVariationPropertiesPropertyIdSuspenseQueryKey>

/**
 * @description Get variation property by ID
 * @summary Get variation property
 * {@link /variation-properties/:property_id}
 */
export async function getVariationPropertiesPropertyIdSuspense(
  property_id: GetVariationPropertiesPropertyIdPathParams['property_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetVariationPropertiesPropertyIdQueryResponse,
    ResponseErrorConfig<GetVariationPropertiesPropertyId401 | GetVariationPropertiesPropertyId404 | GetVariationPropertiesPropertyId500>,
    unknown
  >({ method: 'GET', url: `/variation-properties/${property_id}`, ...requestConfig })
  return res.data
}

export function getVariationPropertiesPropertyIdSuspenseQueryOptions(
  property_id: GetVariationPropertiesPropertyIdPathParams['property_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getVariationPropertiesPropertyIdSuspenseQueryKey(property_id)
  return queryOptions<
    GetVariationPropertiesPropertyIdQueryResponse,
    ResponseErrorConfig<GetVariationPropertiesPropertyId401 | GetVariationPropertiesPropertyId404 | GetVariationPropertiesPropertyId500>,
    GetVariationPropertiesPropertyIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!property_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getVariationPropertiesPropertyIdSuspense(property_id, config)
    },
  })
}

/**
 * @description Get variation property by ID
 * @summary Get variation property
 * {@link /variation-properties/:property_id}
 */
export function useGetVariationPropertiesPropertyIdSuspense<
  TData = GetVariationPropertiesPropertyIdQueryResponse,
  TQueryData = GetVariationPropertiesPropertyIdQueryResponse,
  TQueryKey extends QueryKey = GetVariationPropertiesPropertyIdSuspenseQueryKey,
>(
  property_id: GetVariationPropertiesPropertyIdPathParams['property_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetVariationPropertiesPropertyIdQueryResponse,
        ResponseErrorConfig<GetVariationPropertiesPropertyId401 | GetVariationPropertiesPropertyId404 | GetVariationPropertiesPropertyId500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getVariationPropertiesPropertyIdSuspenseQueryKey(property_id)

  const query = useSuspenseQuery(
    {
      ...(getVariationPropertiesPropertyIdSuspenseQueryOptions(property_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetVariationPropertiesPropertyId401 | GetVariationPropertiesPropertyId404 | GetVariationPropertiesPropertyId500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}