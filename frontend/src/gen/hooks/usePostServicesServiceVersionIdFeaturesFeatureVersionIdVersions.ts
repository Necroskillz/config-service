/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationResponse,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsPathParams,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions400,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions401,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions403,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions404,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions500,
} from '../types/PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationKey = () =>
  [{ url: '/services/{service_version_id}/features/{feature_version_id}/versions' }] as const

export type PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationKey = ReturnType<
  typeof postServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationKey
>

/**
 * @description Create feature version
 * @summary Create feature version
 * {@link /services/:service_version_id/features/:feature_version_id/versions}
 */
export async function postServicesServiceVersionIdFeaturesFeatureVersionIdVersions(
  service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsPathParams['service_version_id'],
  feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsPathParams['feature_version_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions400
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions401
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions403
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions404
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions500
    >,
    unknown
  >({ method: 'POST', url: `/services/${service_version_id}/features/${feature_version_id}/versions`, ...requestConfig })
  return res.data
}

/**
 * @description Create feature version
 * @summary Create feature version
 * {@link /services/:service_version_id/features/:feature_version_id/versions}
 */
export function usePostServicesServiceVersionIdFeaturesFeatureVersionIdVersions<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationResponse,
      ResponseErrorConfig<
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions400
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions401
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions403
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions404
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions500
      >,
      {
        service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsPathParams['service_version_id']
        feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsPathParams['feature_version_id']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationKey()

  return useMutation<
    PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions400
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions401
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions403
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions404
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdVersions500
    >,
    {
      service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsPathParams['service_version_id']
      feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdVersionsPathParams['feature_version_id']
    },
    TContext
  >(
    {
      mutationFn: async ({ service_version_id, feature_version_id }) => {
        return postServicesServiceVersionIdFeaturesFeatureVersionIdVersions(service_version_id, feature_version_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}