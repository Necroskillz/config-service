/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PostServiceTypesMutationRequest,
  PostServiceTypesMutationResponse,
  PostServiceTypes400,
  PostServiceTypes401,
  PostServiceTypes403,
  PostServiceTypes500,
} from '../types/PostServiceTypes.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postServiceTypesMutationKey = () => [{ url: '/service-types' }] as const

export type PostServiceTypesMutationKey = ReturnType<typeof postServiceTypesMutationKey>

/**
 * @description Create a new service type
 * @summary Create service type
 * {@link /service-types}
 */
export async function postServiceTypes(
  data: PostServiceTypesMutationRequest,
  config: Partial<RequestConfig<PostServiceTypesMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostServiceTypesMutationResponse,
    ResponseErrorConfig<PostServiceTypes400 | PostServiceTypes401 | PostServiceTypes403 | PostServiceTypes500>,
    PostServiceTypesMutationRequest
  >({ method: 'POST', url: `/service-types`, data, ...requestConfig })
  return res.data
}

/**
 * @description Create a new service type
 * @summary Create service type
 * {@link /service-types}
 */
export function usePostServiceTypes<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostServiceTypesMutationResponse,
      ResponseErrorConfig<PostServiceTypes400 | PostServiceTypes401 | PostServiceTypes403 | PostServiceTypes500>,
      { data: PostServiceTypesMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostServiceTypesMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postServiceTypesMutationKey()

  return useMutation<
    PostServiceTypesMutationResponse,
    ResponseErrorConfig<PostServiceTypes400 | PostServiceTypes401 | PostServiceTypes403 | PostServiceTypes500>,
    { data: PostServiceTypesMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postServiceTypes(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}