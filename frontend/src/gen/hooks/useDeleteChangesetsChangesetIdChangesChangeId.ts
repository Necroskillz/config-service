/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeleteChangesetsChangesetIdChangesChangeIdMutationResponse,
  DeleteChangesetsChangesetIdChangesChangeIdPathParams,
  DeleteChangesetsChangesetIdChangesChangeId400,
  DeleteChangesetsChangesetIdChangesChangeId401,
  DeleteChangesetsChangesetIdChangesChangeId403,
  DeleteChangesetsChangesetIdChangesChangeId404,
  DeleteChangesetsChangesetIdChangesChangeId500,
} from '../types/DeleteChangesetsChangesetIdChangesChangeId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const deleteChangesetsChangesetIdChangesChangeIdMutationKey = () => [{ url: '/changesets/{changeset_id}/changes/{change_id}' }] as const

export type DeleteChangesetsChangesetIdChangesChangeIdMutationKey = ReturnType<typeof deleteChangesetsChangesetIdChangesChangeIdMutationKey>

/**
 * @description Discard a change by ID
 * @summary Discard a change
 * {@link /changesets/:changeset_id/changes/:change_id}
 */
export async function deleteChangesetsChangesetIdChangesChangeId(
  changeset_id: DeleteChangesetsChangesetIdChangesChangeIdPathParams['changeset_id'],
  change_id: DeleteChangesetsChangesetIdChangesChangeIdPathParams['change_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteChangesetsChangesetIdChangesChangeIdMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesetIdChangesChangeId400
      | DeleteChangesetsChangesetIdChangesChangeId401
      | DeleteChangesetsChangesetIdChangesChangeId403
      | DeleteChangesetsChangesetIdChangesChangeId404
      | DeleteChangesetsChangesetIdChangesChangeId500
    >,
    unknown
  >({ method: 'DELETE', url: `/changesets/${changeset_id}/changes/${change_id}`, ...requestConfig })
  return res.data
}

/**
 * @description Discard a change by ID
 * @summary Discard a change
 * {@link /changesets/:changeset_id/changes/:change_id}
 */
export function useDeleteChangesetsChangesetIdChangesChangeId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteChangesetsChangesetIdChangesChangeIdMutationResponse,
      ResponseErrorConfig<
        | DeleteChangesetsChangesetIdChangesChangeId400
        | DeleteChangesetsChangesetIdChangesChangeId401
        | DeleteChangesetsChangesetIdChangesChangeId403
        | DeleteChangesetsChangesetIdChangesChangeId404
        | DeleteChangesetsChangesetIdChangesChangeId500
      >,
      {
        changeset_id: DeleteChangesetsChangesetIdChangesChangeIdPathParams['changeset_id']
        change_id: DeleteChangesetsChangesetIdChangesChangeIdPathParams['change_id']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteChangesetsChangesetIdChangesChangeIdMutationKey()

  return useMutation<
    DeleteChangesetsChangesetIdChangesChangeIdMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesetIdChangesChangeId400
      | DeleteChangesetsChangesetIdChangesChangeId401
      | DeleteChangesetsChangesetIdChangesChangeId403
      | DeleteChangesetsChangesetIdChangesChangeId404
      | DeleteChangesetsChangesetIdChangesChangeId500
    >,
    {
      changeset_id: DeleteChangesetsChangesetIdChangesChangeIdPathParams['changeset_id']
      change_id: DeleteChangesetsChangesetIdChangesChangeIdPathParams['change_id']
    },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id, change_id }) => {
        return deleteChangesetsChangesetIdChangesChangeId(changeset_id, change_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}