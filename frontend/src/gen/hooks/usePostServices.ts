/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostServicesMutationRequest,
  PostServicesMutationResponse,
  PostServices400,
  PostServices401,
  PostServices403,
  PostServices422,
  PostServices500,
} from '../types/PostServices.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postServicesMutationKey = () => [{ url: '/services' }] as const

export type PostServicesMutationKey = ReturnType<typeof postServicesMutationKey>

/**
 * @description Create service
 * @summary Create service
 * {@link /services}
 */
export async function postServices(
  data: PostServicesMutationRequest,
  config: Partial<RequestConfig<PostServicesMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostServicesMutationResponse,
    ResponseErrorConfig<PostServices400 | PostServices401 | PostServices403 | PostServices422 | PostServices500>,
    PostServicesMutationRequest
  >({ method: 'POST', url: `/services`, data, ...requestConfig })
  return res.data
}

/**
 * @description Create service
 * @summary Create service
 * {@link /services}
 */
export function usePostServices<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostServicesMutationResponse,
      ResponseErrorConfig<PostServices400 | PostServices401 | PostServices403 | PostServices422 | PostServices500>,
      { data: PostServicesMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostServicesMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postServicesMutationKey()

  return useMutation<
    PostServicesMutationResponse,
    ResponseErrorConfig<PostServices400 | PostServices401 | PostServices403 | PostServices422 | PostServices500>,
    { data: PostServicesMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postServices(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}