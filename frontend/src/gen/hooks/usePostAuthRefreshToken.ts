/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostAuthRefreshTokenMutationRequest,
  PostAuthRefreshTokenMutationResponse,
  PostAuthRefreshToken400,
  PostAuthRefreshToken401,
  PostAuthRefreshToken500,
} from '../types/PostAuthRefreshToken.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postAuthRefreshTokenMutationKey = () => [{ url: '/auth/refresh_token' }] as const

export type PostAuthRefreshTokenMutationKey = ReturnType<typeof postAuthRefreshTokenMutationKey>

/**
 * @description Refresh token
 * @summary Refresh token
 * {@link /auth/refresh_token}
 */
export async function postAuthRefreshToken(
  data: PostAuthRefreshTokenMutationRequest,
  config: Partial<RequestConfig<PostAuthRefreshTokenMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostAuthRefreshTokenMutationResponse,
    ResponseErrorConfig<PostAuthRefreshToken400 | PostAuthRefreshToken401 | PostAuthRefreshToken500>,
    PostAuthRefreshTokenMutationRequest
  >({ method: 'POST', url: `/auth/refresh_token`, data, ...requestConfig })
  return res.data
}

/**
 * @description Refresh token
 * @summary Refresh token
 * {@link /auth/refresh_token}
 */
export function usePostAuthRefreshToken<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostAuthRefreshTokenMutationResponse,
      ResponseErrorConfig<PostAuthRefreshToken400 | PostAuthRefreshToken401 | PostAuthRefreshToken500>,
      { data: PostAuthRefreshTokenMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostAuthRefreshTokenMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postAuthRefreshTokenMutationKey()

  return useMutation<
    PostAuthRefreshTokenMutationResponse,
    ResponseErrorConfig<PostAuthRefreshToken400 | PostAuthRefreshToken401 | PostAuthRefreshToken500>,
    { data: PostAuthRefreshTokenMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postAuthRefreshToken(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}