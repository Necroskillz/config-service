/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PostVariationPropertiesMutationRequest,
  PostVariationPropertiesMutationResponse,
  PostVariationProperties400,
  PostVariationProperties401,
  PostVariationProperties403,
  PostVariationProperties500,
} from '../types/PostVariationProperties.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postVariationPropertiesMutationKey = () => [{ url: '/variation-properties' }] as const

export type PostVariationPropertiesMutationKey = ReturnType<typeof postVariationPropertiesMutationKey>

/**
 * @description Create a new variation property
 * @summary Create variation property
 * {@link /variation-properties}
 */
export async function postVariationProperties(
  data?: PostVariationPropertiesMutationRequest,
  config: Partial<RequestConfig<PostVariationPropertiesMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostVariationPropertiesMutationResponse,
    ResponseErrorConfig<PostVariationProperties400 | PostVariationProperties401 | PostVariationProperties403 | PostVariationProperties500>,
    PostVariationPropertiesMutationRequest
  >({ method: 'POST', url: `/variation-properties`, data, ...requestConfig })
  return res.data
}

/**
 * @description Create a new variation property
 * @summary Create variation property
 * {@link /variation-properties}
 */
export function usePostVariationProperties<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostVariationPropertiesMutationResponse,
      ResponseErrorConfig<PostVariationProperties400 | PostVariationProperties401 | PostVariationProperties403 | PostVariationProperties500>,
      { data?: PostVariationPropertiesMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostVariationPropertiesMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postVariationPropertiesMutationKey()

  return useMutation<
    PostVariationPropertiesMutationResponse,
    ResponseErrorConfig<PostVariationProperties400 | PostVariationProperties401 | PostVariationProperties403 | PostVariationProperties500>,
    { data?: PostVariationPropertiesMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postVariationProperties(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}