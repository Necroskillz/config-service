/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetChangeHistoryQueryResponse,
  GetChangeHistoryQueryParams,
  GetChangeHistory400,
  GetChangeHistory401,
  GetChangeHistory404,
  GetChangeHistory500,
} from '../types/GetChangeHistory.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getChangeHistoryQueryKey = (params?: GetChangeHistoryQueryParams) => [{ url: '/change-history' }, ...(params ? [params] : [])] as const

export type GetChangeHistoryQueryKey = ReturnType<typeof getChangeHistoryQueryKey>

/**
 * @description Get change history for a service, feature, key, or variation
 * @summary Get change history
 * {@link /change-history}
 */
export async function getChangeHistory(params?: GetChangeHistoryQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangeHistoryQueryResponse,
    ResponseErrorConfig<GetChangeHistory400 | GetChangeHistory401 | GetChangeHistory404 | GetChangeHistory500>,
    unknown
  >({ method: 'GET', url: `/change-history`, params, ...requestConfig })
  return res.data
}

export function getChangeHistoryQueryOptions(params?: GetChangeHistoryQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getChangeHistoryQueryKey(params)
  return queryOptions<
    GetChangeHistoryQueryResponse,
    ResponseErrorConfig<GetChangeHistory400 | GetChangeHistory401 | GetChangeHistory404 | GetChangeHistory500>,
    GetChangeHistoryQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangeHistory(params, config)
    },
  })
}

/**
 * @description Get change history for a service, feature, key, or variation
 * @summary Get change history
 * {@link /change-history}
 */
export function useGetChangeHistory<
  TData = GetChangeHistoryQueryResponse,
  TQueryData = GetChangeHistoryQueryResponse,
  TQueryKey extends QueryKey = GetChangeHistoryQueryKey,
>(
  params?: GetChangeHistoryQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetChangeHistoryQueryResponse,
        ResponseErrorConfig<GetChangeHistory400 | GetChangeHistory401 | GetChangeHistory404 | GetChangeHistory500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangeHistoryQueryKey(params)

  const query = useQuery(
    {
      ...(getChangeHistoryQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetChangeHistory400 | GetChangeHistory401 | GetChangeHistory404 | GetChangeHistory500>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}