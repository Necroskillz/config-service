/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetChangeHistoryKeysQueryResponse,
  GetChangeHistoryKeysQueryParams,
  GetChangeHistoryKeys400,
  GetChangeHistoryKeys401,
  GetChangeHistoryKeys404,
  GetChangeHistoryKeys500,
} from '../types/GetChangeHistoryKeys.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getChangeHistoryKeysQueryKey = (params?: GetChangeHistoryKeysQueryParams) =>
  [{ url: '/change-history/keys' }, ...(params ? [params] : [])] as const

export type GetChangeHistoryKeysQueryKey = ReturnType<typeof getChangeHistoryKeysQueryKey>

/**
 * @description Get applied keys
 * @summary Get applied keys
 * {@link /change-history/keys}
 */
export async function getChangeHistoryKeys(params?: GetChangeHistoryKeysQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangeHistoryKeysQueryResponse,
    ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>,
    unknown
  >({ method: 'GET', url: `/change-history/keys`, params, ...requestConfig })
  return res.data
}

export function getChangeHistoryKeysQueryOptions(params?: GetChangeHistoryKeysQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getChangeHistoryKeysQueryKey(params)
  return queryOptions<
    GetChangeHistoryKeysQueryResponse,
    ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>,
    GetChangeHistoryKeysQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangeHistoryKeys(params, config)
    },
  })
}

/**
 * @description Get applied keys
 * @summary Get applied keys
 * {@link /change-history/keys}
 */
export function useGetChangeHistoryKeys<
  TData = GetChangeHistoryKeysQueryResponse,
  TQueryData = GetChangeHistoryKeysQueryResponse,
  TQueryKey extends QueryKey = GetChangeHistoryKeysQueryKey,
>(
  params?: GetChangeHistoryKeysQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetChangeHistoryKeysQueryResponse,
        ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangeHistoryKeysQueryKey(params)

  const query = useQuery(
    {
      ...(getChangeHistoryKeysQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetChangeHistoryKeys400 | GetChangeHistoryKeys401 | GetChangeHistoryKeys404 | GetChangeHistoryKeys500>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}