/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PutChangesetsChangesetIdReopenMutationResponse,
  PutChangesetsChangesetIdReopenPathParams,
  PutChangesetsChangesetIdReopen400,
  PutChangesetsChangesetIdReopen401,
  PutChangesetsChangesetIdReopen403,
  PutChangesetsChangesetIdReopen404,
  PutChangesetsChangesetIdReopen500,
} from '../types/PutChangesetsChangesetIdReopen.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putChangesetsChangesetIdReopenMutationKey = () => [{ url: '/changesets/{changeset_id}/reopen' }] as const

export type PutChangesetsChangesetIdReopenMutationKey = ReturnType<typeof putChangesetsChangesetIdReopenMutationKey>

/**
 * @description Reopen a changeset by ID
 * @summary Reopen a changeset
 * {@link /changesets/:changeset_id/reopen}
 */
export async function putChangesetsChangesetIdReopen(
  changeset_id: PutChangesetsChangesetIdReopenPathParams['changeset_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutChangesetsChangesetIdReopenMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdReopen400
      | PutChangesetsChangesetIdReopen401
      | PutChangesetsChangesetIdReopen403
      | PutChangesetsChangesetIdReopen404
      | PutChangesetsChangesetIdReopen500
    >,
    unknown
  >({ method: 'PUT', url: `/changesets/${changeset_id}/reopen`, ...requestConfig })
  return res.data
}

/**
 * @description Reopen a changeset by ID
 * @summary Reopen a changeset
 * {@link /changesets/:changeset_id/reopen}
 */
export function usePutChangesetsChangesetIdReopen<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutChangesetsChangesetIdReopenMutationResponse,
      ResponseErrorConfig<
        | PutChangesetsChangesetIdReopen400
        | PutChangesetsChangesetIdReopen401
        | PutChangesetsChangesetIdReopen403
        | PutChangesetsChangesetIdReopen404
        | PutChangesetsChangesetIdReopen500
      >,
      { changeset_id: PutChangesetsChangesetIdReopenPathParams['changeset_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? putChangesetsChangesetIdReopenMutationKey()

  return useMutation<
    PutChangesetsChangesetIdReopenMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdReopen400
      | PutChangesetsChangesetIdReopen401
      | PutChangesetsChangesetIdReopen403
      | PutChangesetsChangesetIdReopen404
      | PutChangesetsChangesetIdReopen500
    >,
    { changeset_id: PutChangesetsChangesetIdReopenPathParams['changeset_id'] },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id }) => {
        return putChangesetsChangesetIdReopen(changeset_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}