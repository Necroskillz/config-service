/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationResponse,
  PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreatePathParams,
  PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate400,
  PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate401,
  PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate404,
  PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate500,
} from '../types/PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationKey = () =>
  [{ url: '/changesets/{changeset_id}/changes/{change_id}/conflicts/update_to_create' }] as const

export type PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationKey = ReturnType<
  typeof putChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationKey
>

/**
 * @description Convert an update value change to a create value change to resolve conflict of updating a deleted value
 * @summary Convert update to create
 * {@link /changesets/:changeset_id/changes/:change_id/conflicts/update_to_create}
 */
export async function putChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate(
  changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreatePathParams['changeset_id'],
  change_id: PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreatePathParams['change_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate400
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate401
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate404
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate500
    >,
    unknown
  >({ method: 'PUT', url: `/changesets/${changeset_id}/changes/${change_id}/conflicts/update_to_create`, ...requestConfig })
  return res.data
}

/**
 * @description Convert an update value change to a create value change to resolve conflict of updating a deleted value
 * @summary Convert update to create
 * {@link /changesets/:changeset_id/changes/:change_id/conflicts/update_to_create}
 */
export function usePutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationResponse,
      ResponseErrorConfig<
        | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate400
        | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate401
        | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate404
        | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate500
      >,
      {
        changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreatePathParams['changeset_id']
        change_id: PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreatePathParams['change_id']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? putChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationKey()

  return useMutation<
    PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreateMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate400
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate401
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate404
      | PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate500
    >,
    {
      changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreatePathParams['changeset_id']
      change_id: PutChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreatePathParams['change_id']
    },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id, change_id }) => {
        return putChangesetsChangesetIdChangesChangeIdConflictsUpdateToCreate(changeset_id, change_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}