/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostMembershipGroupsGroupIdUsersUserIdMutationResponse,
  PostMembershipGroupsGroupIdUsersUserIdPathParams,
  PostMembershipGroupsGroupIdUsersUserId400,
  PostMembershipGroupsGroupIdUsersUserId401,
  PostMembershipGroupsGroupIdUsersUserId403,
  PostMembershipGroupsGroupIdUsersUserId404,
  PostMembershipGroupsGroupIdUsersUserId500,
} from '../types/PostMembershipGroupsGroupIdUsersUserId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postMembershipGroupsGroupIdUsersUserIdMutationKey = () => [{ url: '/membership/groups/{group_id}/users/{user_id}' }] as const

export type PostMembershipGroupsGroupIdUsersUserIdMutationKey = ReturnType<typeof postMembershipGroupsGroupIdUsersUserIdMutationKey>

/**
 * @description Add a user to a group
 * @summary Add a user to a group
 * {@link /membership/groups/:group_id/users/:user_id}
 */
export async function postMembershipGroupsGroupIdUsersUserId(
  user_id: PostMembershipGroupsGroupIdUsersUserIdPathParams['user_id'],
  group_id: PostMembershipGroupsGroupIdUsersUserIdPathParams['group_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostMembershipGroupsGroupIdUsersUserIdMutationResponse,
    ResponseErrorConfig<
      | PostMembershipGroupsGroupIdUsersUserId400
      | PostMembershipGroupsGroupIdUsersUserId401
      | PostMembershipGroupsGroupIdUsersUserId403
      | PostMembershipGroupsGroupIdUsersUserId404
      | PostMembershipGroupsGroupIdUsersUserId500
    >,
    unknown
  >({ method: 'POST', url: `/membership/groups/${group_id}/users/${user_id}`, ...requestConfig })
  return res.data
}

/**
 * @description Add a user to a group
 * @summary Add a user to a group
 * {@link /membership/groups/:group_id/users/:user_id}
 */
export function usePostMembershipGroupsGroupIdUsersUserId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostMembershipGroupsGroupIdUsersUserIdMutationResponse,
      ResponseErrorConfig<
        | PostMembershipGroupsGroupIdUsersUserId400
        | PostMembershipGroupsGroupIdUsersUserId401
        | PostMembershipGroupsGroupIdUsersUserId403
        | PostMembershipGroupsGroupIdUsersUserId404
        | PostMembershipGroupsGroupIdUsersUserId500
      >,
      { user_id: PostMembershipGroupsGroupIdUsersUserIdPathParams['user_id']; group_id: PostMembershipGroupsGroupIdUsersUserIdPathParams['group_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postMembershipGroupsGroupIdUsersUserIdMutationKey()

  return useMutation<
    PostMembershipGroupsGroupIdUsersUserIdMutationResponse,
    ResponseErrorConfig<
      | PostMembershipGroupsGroupIdUsersUserId400
      | PostMembershipGroupsGroupIdUsersUserId401
      | PostMembershipGroupsGroupIdUsersUserId403
      | PostMembershipGroupsGroupIdUsersUserId404
      | PostMembershipGroupsGroupIdUsersUserId500
    >,
    { user_id: PostMembershipGroupsGroupIdUsersUserIdPathParams['user_id']; group_id: PostMembershipGroupsGroupIdUsersUserIdPathParams['group_id'] },
    TContext
  >(
    {
      mutationFn: async ({ user_id, group_id }) => {
        return postMembershipGroupsGroupIdUsersUserId(user_id, group_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}