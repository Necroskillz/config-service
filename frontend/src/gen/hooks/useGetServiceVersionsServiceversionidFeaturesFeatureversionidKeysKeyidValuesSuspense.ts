/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesQueryResponse,
  GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams,
  GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues401,
  GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues404,
  GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues500,
} from '../types/GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryKey = (
  serviceVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['serviceVersionId'],
  featureVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['featureVersionId'],
  keyId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['keyId'],
) =>
  [
    {
      url: '/service-versions/:serviceVersionId/features/:featureVersionId/keys/:keyId/values',
      params: { serviceVersionId: serviceVersionId, featureVersionId: featureVersionId, keyId: keyId },
    },
  ] as const

export type GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryKey = ReturnType<
  typeof getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryKey
>

/**
 * @description Get values for a key
 * @summary Get values for a key
 * {@link /service-versions/:serviceVersionId/features/:featureVersionId/keys/:keyId/values}
 */
export async function getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspense(
  serviceVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['serviceVersionId'],
  featureVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['featureVersionId'],
  keyId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['keyId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesQueryResponse,
    ResponseErrorConfig<
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues401
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues404
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues500
    >,
    unknown
  >({ method: 'GET', url: `/service-versions/${serviceVersionId}/features/${featureVersionId}/keys/${keyId}/values`, ...requestConfig })
  return res.data
}

export function getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryOptions(
  serviceVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['serviceVersionId'],
  featureVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['featureVersionId'],
  keyId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['keyId'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryKey(serviceVersionId, featureVersionId, keyId)
  return queryOptions<
    GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesQueryResponse,
    ResponseErrorConfig<
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues401
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues404
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues500
    >,
    GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesQueryResponse,
    typeof queryKey
  >({
    enabled: !!(serviceVersionId && featureVersionId && keyId),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspense(serviceVersionId, featureVersionId, keyId, config)
    },
  })
}

/**
 * @description Get values for a key
 * @summary Get values for a key
 * {@link /service-versions/:serviceVersionId/features/:featureVersionId/keys/:keyId/values}
 */
export function useGetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspense<
  TData = GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesQueryResponse,
  TQueryData = GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesQueryResponse,
  TQueryKey extends QueryKey = GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryKey,
>(
  serviceVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['serviceVersionId'],
  featureVersionId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['featureVersionId'],
  keyId: GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesPathParams['keyId'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesQueryResponse,
        ResponseErrorConfig<
          | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues401
          | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues404
          | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues500
        >,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ??
    getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryKey(serviceVersionId, featureVersionId, keyId)

  const query = useSuspenseQuery(
    {
      ...(getServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValuesSuspenseQueryOptions(
        serviceVersionId,
        featureVersionId,
        keyId,
        config,
      ) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues401
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues404
      | GetServiceVersionsServiceversionidFeaturesFeatureversionidKeysKeyidValues500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}