/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { GetValueTypesQueryResponse, GetValueTypes401, GetValueTypes500 } from '../types/GetValueTypes.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getValueTypesQueryKey = () => [{ url: '/value-types' }] as const

export type GetValueTypesQueryKey = ReturnType<typeof getValueTypesQueryKey>

/**
 * @description Get all value types
 * @summary Get value types
 * {@link /value-types}
 */
export async function getValueTypes(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetValueTypesQueryResponse, ResponseErrorConfig<GetValueTypes401 | GetValueTypes500>, unknown>({
    method: 'GET',
    url: `/value-types`,
    ...requestConfig,
  })
  return res.data
}

export function getValueTypesQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getValueTypesQueryKey()
  return queryOptions<GetValueTypesQueryResponse, ResponseErrorConfig<GetValueTypes401 | GetValueTypes500>, GetValueTypesQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getValueTypes(config)
    },
  })
}

/**
 * @description Get all value types
 * @summary Get value types
 * {@link /value-types}
 */
export function useGetValueTypes<
  TData = GetValueTypesQueryResponse,
  TQueryData = GetValueTypesQueryResponse,
  TQueryKey extends QueryKey = GetValueTypesQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<GetValueTypesQueryResponse, ResponseErrorConfig<GetValueTypes401 | GetValueTypes500>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getValueTypesQueryKey()

  const query = useQuery(
    {
      ...(getValueTypesQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetValueTypes401 | GetValueTypes500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}