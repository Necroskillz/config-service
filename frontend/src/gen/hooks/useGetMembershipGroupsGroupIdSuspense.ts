/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetMembershipGroupsGroupIdQueryResponse,
  GetMembershipGroupsGroupIdPathParams,
  GetMembershipGroupsGroupId400,
  GetMembershipGroupsGroupId401,
  GetMembershipGroupsGroupId404,
  GetMembershipGroupsGroupId500,
} from '../types/GetMembershipGroupsGroupId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getMembershipGroupsGroupIdSuspenseQueryKey = (group_id: GetMembershipGroupsGroupIdPathParams['group_id']) =>
  [{ url: '/membership/groups/:group_id', params: { group_id: group_id } }] as const

export type GetMembershipGroupsGroupIdSuspenseQueryKey = ReturnType<typeof getMembershipGroupsGroupIdSuspenseQueryKey>

/**
 * @description Get a group by ID
 * @summary Get a group
 * {@link /membership/groups/:group_id}
 */
export async function getMembershipGroupsGroupIdSuspense(
  group_id: GetMembershipGroupsGroupIdPathParams['group_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetMembershipGroupsGroupIdQueryResponse,
    ResponseErrorConfig<GetMembershipGroupsGroupId400 | GetMembershipGroupsGroupId401 | GetMembershipGroupsGroupId404 | GetMembershipGroupsGroupId500>,
    unknown
  >({ method: 'GET', url: `/membership/groups/${group_id}`, ...requestConfig })
  return res.data
}

export function getMembershipGroupsGroupIdSuspenseQueryOptions(
  group_id: GetMembershipGroupsGroupIdPathParams['group_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getMembershipGroupsGroupIdSuspenseQueryKey(group_id)
  return queryOptions<
    GetMembershipGroupsGroupIdQueryResponse,
    ResponseErrorConfig<GetMembershipGroupsGroupId400 | GetMembershipGroupsGroupId401 | GetMembershipGroupsGroupId404 | GetMembershipGroupsGroupId500>,
    GetMembershipGroupsGroupIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!group_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getMembershipGroupsGroupIdSuspense(group_id, config)
    },
  })
}

/**
 * @description Get a group by ID
 * @summary Get a group
 * {@link /membership/groups/:group_id}
 */
export function useGetMembershipGroupsGroupIdSuspense<
  TData = GetMembershipGroupsGroupIdQueryResponse,
  TQueryKey extends QueryKey = GetMembershipGroupsGroupIdSuspenseQueryKey,
>(
  group_id: GetMembershipGroupsGroupIdPathParams['group_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetMembershipGroupsGroupIdQueryResponse,
        ResponseErrorConfig<GetMembershipGroupsGroupId400 | GetMembershipGroupsGroupId401 | GetMembershipGroupsGroupId404 | GetMembershipGroupsGroupId500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getMembershipGroupsGroupIdSuspenseQueryKey(group_id)

  const query = useSuspenseQuery(
    {
      ...(getMembershipGroupsGroupIdSuspenseQueryOptions(group_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetMembershipGroupsGroupId400 | GetMembershipGroupsGroupId401 | GetMembershipGroupsGroupId404 | GetMembershipGroupsGroupId500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}