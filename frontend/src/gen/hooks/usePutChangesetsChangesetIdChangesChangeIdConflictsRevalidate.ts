/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PutChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationResponse,
  PutChangesetsChangesetIdChangesChangeIdConflictsRevalidatePathParams,
  PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate400,
  PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate401,
  PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate404,
  PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate500,
} from '../types/PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationKey = () =>
  [{ url: '/changesets/{changeset_id}/changes/{change_id}/conflicts/revalidate' }] as const

export type PutChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationKey = ReturnType<
  typeof putChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationKey
>

/**
 * @description Revalidate a value change to resolve conflict of creating a value for a variation that already exists
 * @summary Revalidate a value change
 * {@link /changesets/:changeset_id/changes/:change_id/conflicts/revalidate}
 */
export async function putChangesetsChangesetIdChangesChangeIdConflictsRevalidate(
  changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsRevalidatePathParams['changeset_id'],
  change_id: PutChangesetsChangesetIdChangesChangeIdConflictsRevalidatePathParams['change_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate400
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate401
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate404
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate500
    >,
    unknown
  >({ method: 'PUT', url: `/changesets/${changeset_id}/changes/${change_id}/conflicts/revalidate`, ...requestConfig })
  return res.data
}

/**
 * @description Revalidate a value change to resolve conflict of creating a value for a variation that already exists
 * @summary Revalidate a value change
 * {@link /changesets/:changeset_id/changes/:change_id/conflicts/revalidate}
 */
export function usePutChangesetsChangesetIdChangesChangeIdConflictsRevalidate<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationResponse,
      ResponseErrorConfig<
        | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate400
        | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate401
        | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate404
        | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate500
      >,
      {
        changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsRevalidatePathParams['changeset_id']
        change_id: PutChangesetsChangesetIdChangesChangeIdConflictsRevalidatePathParams['change_id']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? putChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationKey()

  return useMutation<
    PutChangesetsChangesetIdChangesChangeIdConflictsRevalidateMutationResponse,
    ResponseErrorConfig<
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate400
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate401
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate404
      | PutChangesetsChangesetIdChangesChangeIdConflictsRevalidate500
    >,
    {
      changeset_id: PutChangesetsChangesetIdChangesChangeIdConflictsRevalidatePathParams['changeset_id']
      change_id: PutChangesetsChangesetIdChangesChangeIdConflictsRevalidatePathParams['change_id']
    },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id, change_id }) => {
        return putChangesetsChangesetIdChangesChangeIdConflictsRevalidate(changeset_id, change_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}