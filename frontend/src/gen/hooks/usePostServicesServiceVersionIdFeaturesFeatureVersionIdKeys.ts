/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationRequest,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationResponse,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysPathParams,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys400,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys401,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys403,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys404,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys500,
} from '../types/PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationKey = () =>
  [{ url: '/services/{service_version_id}/features/{feature_version_id}/keys' }] as const

export type PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationKey = ReturnType<
  typeof postServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationKey
>

/**
 * @description Create a key
 * @summary Create a key
 * {@link /services/:service_version_id/features/:feature_version_id/keys}
 */
export async function postServicesServiceVersionIdFeaturesFeatureVersionIdKeys(
  service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysPathParams['service_version_id'],
  feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysPathParams['feature_version_id'],
  data: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationRequest,
  config: Partial<RequestConfig<PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys400
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys401
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys403
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys404
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys500
    >,
    PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationRequest
  >({ method: 'POST', url: `/services/${service_version_id}/features/${feature_version_id}/keys`, data, ...requestConfig })
  return res.data
}

/**
 * @description Create a key
 * @summary Create a key
 * {@link /services/:service_version_id/features/:feature_version_id/keys}
 */
export function usePostServicesServiceVersionIdFeaturesFeatureVersionIdKeys<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationResponse,
      ResponseErrorConfig<
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys400
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys401
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys403
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys404
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys500
      >,
      {
        service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysPathParams['service_version_id']
        feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysPathParams['feature_version_id']
        data: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationRequest
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationKey()

  return useMutation<
    PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys400
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys401
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys403
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys404
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdKeys500
    >,
    {
      service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysPathParams['service_version_id']
      feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysPathParams['feature_version_id']
      data: PostServicesServiceVersionIdFeaturesFeatureVersionIdKeysMutationRequest
    },
    TContext
  >(
    {
      mutationFn: async ({ service_version_id, feature_version_id, data }) => {
        return postServicesServiceVersionIdFeaturesFeatureVersionIdKeys(service_version_id, feature_version_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}