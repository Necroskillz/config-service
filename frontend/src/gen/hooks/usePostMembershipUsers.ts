/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostMembershipUsersMutationRequest,
  PostMembershipUsersMutationResponse,
  PostMembershipUsers400,
  PostMembershipUsers401,
  PostMembershipUsers403,
  PostMembershipUsers422,
  PostMembershipUsers500,
} from '../types/PostMembershipUsers.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postMembershipUsersMutationKey = () => [{ url: '/membership/users' }] as const

export type PostMembershipUsersMutationKey = ReturnType<typeof postMembershipUsersMutationKey>

/**
 * @description Create a new user
 * @summary Create a user
 * {@link /membership/users}
 */
export async function postMembershipUsers(
  data: PostMembershipUsersMutationRequest,
  config: Partial<RequestConfig<PostMembershipUsersMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostMembershipUsersMutationResponse,
    ResponseErrorConfig<PostMembershipUsers400 | PostMembershipUsers401 | PostMembershipUsers403 | PostMembershipUsers422 | PostMembershipUsers500>,
    PostMembershipUsersMutationRequest
  >({ method: 'POST', url: `/membership/users`, data, ...requestConfig })
  return res.data
}

/**
 * @description Create a new user
 * @summary Create a user
 * {@link /membership/users}
 */
export function usePostMembershipUsers<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostMembershipUsersMutationResponse,
      ResponseErrorConfig<PostMembershipUsers400 | PostMembershipUsers401 | PostMembershipUsers403 | PostMembershipUsers422 | PostMembershipUsers500>,
      { data: PostMembershipUsersMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostMembershipUsersMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postMembershipUsersMutationKey()

  return useMutation<
    PostMembershipUsersMutationResponse,
    ResponseErrorConfig<PostMembershipUsers400 | PostMembershipUsers401 | PostMembershipUsers403 | PostMembershipUsers422 | PostMembershipUsers500>,
    { data: PostMembershipUsersMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postMembershipUsers(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}