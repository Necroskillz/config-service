/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostMembershipGroupsMutationRequest,
  PostMembershipGroupsMutationResponse,
  PostMembershipGroups400,
  PostMembershipGroups401,
  PostMembershipGroups403,
  PostMembershipGroups422,
  PostMembershipGroups500,
} from '../types/PostMembershipGroups.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postMembershipGroupsMutationKey = () => [{ url: '/membership/groups' }] as const

export type PostMembershipGroupsMutationKey = ReturnType<typeof postMembershipGroupsMutationKey>

/**
 * @description Create a new group
 * @summary Create a group
 * {@link /membership/groups}
 */
export async function postMembershipGroups(
  data: PostMembershipGroupsMutationRequest,
  config: Partial<RequestConfig<PostMembershipGroupsMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostMembershipGroupsMutationResponse,
    ResponseErrorConfig<PostMembershipGroups400 | PostMembershipGroups401 | PostMembershipGroups403 | PostMembershipGroups422 | PostMembershipGroups500>,
    PostMembershipGroupsMutationRequest
  >({ method: 'POST', url: `/membership/groups`, data, ...requestConfig })
  return res.data
}

/**
 * @description Create a new group
 * @summary Create a group
 * {@link /membership/groups}
 */
export function usePostMembershipGroups<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostMembershipGroupsMutationResponse,
      ResponseErrorConfig<PostMembershipGroups400 | PostMembershipGroups401 | PostMembershipGroups403 | PostMembershipGroups422 | PostMembershipGroups500>,
      { data: PostMembershipGroupsMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostMembershipGroupsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postMembershipGroupsMutationKey()

  return useMutation<
    PostMembershipGroupsMutationResponse,
    ResponseErrorConfig<PostMembershipGroups400 | PostMembershipGroups401 | PostMembershipGroups403 | PostMembershipGroups422 | PostMembershipGroups500>,
    { data: PostMembershipGroupsMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postMembershipGroups(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}