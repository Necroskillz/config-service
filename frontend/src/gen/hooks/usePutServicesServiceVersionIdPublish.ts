/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PutServicesServiceVersionIdPublishMutationResponse,
  PutServicesServiceVersionIdPublishPathParams,
  PutServicesServiceVersionIdPublish401,
  PutServicesServiceVersionIdPublish403,
  PutServicesServiceVersionIdPublish404,
  PutServicesServiceVersionIdPublish500,
} from '../types/PutServicesServiceVersionIdPublish.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putServicesServiceVersionIdPublishMutationKey = () => [{ url: '/services/{service_version_id}/publish' }] as const

export type PutServicesServiceVersionIdPublishMutationKey = ReturnType<typeof putServicesServiceVersionIdPublishMutationKey>

/**
 * @description Publish service version
 * @summary Publish service version
 * {@link /services/:service_version_id/publish}
 */
export async function putServicesServiceVersionIdPublish(
  service_version_id: PutServicesServiceVersionIdPublishPathParams['service_version_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutServicesServiceVersionIdPublishMutationResponse,
    ResponseErrorConfig<
      | PutServicesServiceVersionIdPublish401
      | PutServicesServiceVersionIdPublish403
      | PutServicesServiceVersionIdPublish404
      | PutServicesServiceVersionIdPublish500
    >,
    unknown
  >({ method: 'PUT', url: `/services/${service_version_id}/publish`, ...requestConfig })
  return res.data
}

/**
 * @description Publish service version
 * @summary Publish service version
 * {@link /services/:service_version_id/publish}
 */
export function usePutServicesServiceVersionIdPublish<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutServicesServiceVersionIdPublishMutationResponse,
      ResponseErrorConfig<
        | PutServicesServiceVersionIdPublish401
        | PutServicesServiceVersionIdPublish403
        | PutServicesServiceVersionIdPublish404
        | PutServicesServiceVersionIdPublish500
      >,
      { service_version_id: PutServicesServiceVersionIdPublishPathParams['service_version_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? putServicesServiceVersionIdPublishMutationKey()

  return useMutation<
    PutServicesServiceVersionIdPublishMutationResponse,
    ResponseErrorConfig<
      | PutServicesServiceVersionIdPublish401
      | PutServicesServiceVersionIdPublish403
      | PutServicesServiceVersionIdPublish404
      | PutServicesServiceVersionIdPublish500
    >,
    { service_version_id: PutServicesServiceVersionIdPublishPathParams['service_version_id'] },
    TContext
  >(
    {
      mutationFn: async ({ service_version_id }) => {
        return putServicesServiceVersionIdPublish(service_version_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}