/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { GetFeaturesQueryResponse, GetFeaturesQueryParams, GetFeatures400, GetFeatures401, GetFeatures404, GetFeatures500 } from '../types/GetFeatures.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getFeaturesQueryKey = (params?: GetFeaturesQueryParams) => [{ url: '/features' }, ...(params ? [params] : [])] as const

export type GetFeaturesQueryKey = ReturnType<typeof getFeaturesQueryKey>

/**
 * @description Get features
 * @summary Get features
 * {@link /features}
 */
export async function getFeatures(params?: GetFeaturesQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetFeaturesQueryResponse, ResponseErrorConfig<GetFeatures400 | GetFeatures401 | GetFeatures404 | GetFeatures500>, unknown>({
    method: 'GET',
    url: `/features`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function getFeaturesQueryOptions(params?: GetFeaturesQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getFeaturesQueryKey(params)
  return queryOptions<
    GetFeaturesQueryResponse,
    ResponseErrorConfig<GetFeatures400 | GetFeatures401 | GetFeatures404 | GetFeatures500>,
    GetFeaturesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getFeatures(params, config)
    },
  })
}

/**
 * @description Get features
 * @summary Get features
 * {@link /features}
 */
export function useGetFeatures<TData = GetFeaturesQueryResponse, TQueryData = GetFeaturesQueryResponse, TQueryKey extends QueryKey = GetFeaturesQueryKey>(
  params?: GetFeaturesQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetFeaturesQueryResponse,
        ResponseErrorConfig<GetFeatures400 | GetFeatures401 | GetFeatures404 | GetFeatures500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getFeaturesQueryKey(params)

  const query = useQuery(
    {
      ...(getFeaturesQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetFeatures400 | GetFeatures401 | GetFeatures404 | GetFeatures500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}