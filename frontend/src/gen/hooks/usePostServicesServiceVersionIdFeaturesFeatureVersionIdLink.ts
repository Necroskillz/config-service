/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationResponse,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkPathParams,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdLink401,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdLink403,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdLink404,
  PostServicesServiceVersionIdFeaturesFeatureVersionIdLink500,
} from '../types/PostServicesServiceVersionIdFeaturesFeatureVersionIdLink.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationKey = () =>
  [{ url: '/services/{service_version_id}/features/{feature_version_id}/link' }] as const

export type PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationKey = ReturnType<
  typeof postServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationKey
>

/**
 * @description Link feature version to a service version
 * @summary Link feature version
 * {@link /services/:service_version_id/features/:feature_version_id/link}
 */
export async function postServicesServiceVersionIdFeaturesFeatureVersionIdLink(
  service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkPathParams['service_version_id'],
  feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkPathParams['feature_version_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink401
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink403
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink404
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink500
    >,
    unknown
  >({ method: 'POST', url: `/services/${service_version_id}/features/${feature_version_id}/link`, ...requestConfig })
  return res.data
}

/**
 * @description Link feature version to a service version
 * @summary Link feature version
 * {@link /services/:service_version_id/features/:feature_version_id/link}
 */
export function usePostServicesServiceVersionIdFeaturesFeatureVersionIdLink<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationResponse,
      ResponseErrorConfig<
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink401
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink403
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink404
        | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink500
      >,
      {
        service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkPathParams['service_version_id']
        feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkPathParams['feature_version_id']
      },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationKey()

  return useMutation<
    PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink401
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink403
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink404
      | PostServicesServiceVersionIdFeaturesFeatureVersionIdLink500
    >,
    {
      service_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkPathParams['service_version_id']
      feature_version_id: PostServicesServiceVersionIdFeaturesFeatureVersionIdLinkPathParams['feature_version_id']
    },
    TContext
  >(
    {
      mutationFn: async ({ service_version_id, feature_version_id }) => {
        return postServicesServiceVersionIdFeaturesFeatureVersionIdLink(service_version_id, feature_version_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}