/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PostChangesetsChangesetIdCommentMutationRequest,
  PostChangesetsChangesetIdCommentMutationResponse,
  PostChangesetsChangesetIdCommentPathParams,
  PostChangesetsChangesetIdComment400,
  PostChangesetsChangesetIdComment401,
  PostChangesetsChangesetIdComment403,
  PostChangesetsChangesetIdComment404,
  PostChangesetsChangesetIdComment500,
} from '../types/PostChangesetsChangesetIdComment.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postChangesetsChangesetIdCommentMutationKey = () => [{ url: '/changesets/{changeset_id}/comment' }] as const

export type PostChangesetsChangesetIdCommentMutationKey = ReturnType<typeof postChangesetsChangesetIdCommentMutationKey>

/**
 * @description Add a comment to a changeset by ID
 * @summary Add a comment to a changeset
 * {@link /changesets/:changeset_id/comment}
 */
export async function postChangesetsChangesetIdComment(
  changeset_id: PostChangesetsChangesetIdCommentPathParams['changeset_id'],
  data: PostChangesetsChangesetIdCommentMutationRequest,
  config: Partial<RequestConfig<PostChangesetsChangesetIdCommentMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostChangesetsChangesetIdCommentMutationResponse,
    ResponseErrorConfig<
      | PostChangesetsChangesetIdComment400
      | PostChangesetsChangesetIdComment401
      | PostChangesetsChangesetIdComment403
      | PostChangesetsChangesetIdComment404
      | PostChangesetsChangesetIdComment500
    >,
    PostChangesetsChangesetIdCommentMutationRequest
  >({ method: 'POST', url: `/changesets/${changeset_id}/comment`, data, ...requestConfig })
  return res.data
}

/**
 * @description Add a comment to a changeset by ID
 * @summary Add a comment to a changeset
 * {@link /changesets/:changeset_id/comment}
 */
export function usePostChangesetsChangesetIdComment<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostChangesetsChangesetIdCommentMutationResponse,
      ResponseErrorConfig<
        | PostChangesetsChangesetIdComment400
        | PostChangesetsChangesetIdComment401
        | PostChangesetsChangesetIdComment403
        | PostChangesetsChangesetIdComment404
        | PostChangesetsChangesetIdComment500
      >,
      { changeset_id: PostChangesetsChangesetIdCommentPathParams['changeset_id']; data: PostChangesetsChangesetIdCommentMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostChangesetsChangesetIdCommentMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? postChangesetsChangesetIdCommentMutationKey()

  return useMutation<
    PostChangesetsChangesetIdCommentMutationResponse,
    ResponseErrorConfig<
      | PostChangesetsChangesetIdComment400
      | PostChangesetsChangesetIdComment401
      | PostChangesetsChangesetIdComment403
      | PostChangesetsChangesetIdComment404
      | PostChangesetsChangesetIdComment500
    >,
    { changeset_id: PostChangesetsChangesetIdCommentPathParams['changeset_id']; data: PostChangesetsChangesetIdCommentMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id, data }) => {
        return postChangesetsChangesetIdComment(changeset_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}