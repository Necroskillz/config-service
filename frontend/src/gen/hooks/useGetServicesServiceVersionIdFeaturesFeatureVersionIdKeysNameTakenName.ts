/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryResponse,
  GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams,
  GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName400,
  GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName401,
  GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName404,
  GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName500,
} from '../types/GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryKey = (
  service_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['service_version_id'],
  feature_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['feature_version_id'],
  name: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['name'],
) =>
  [
    {
      url: '/services/:service_version_id/features/:feature_version_id/keys/name-taken/:name',
      params: { service_version_id: service_version_id, feature_version_id: feature_version_id, name: name },
    },
  ] as const

export type GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryKey = ReturnType<
  typeof getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryKey
>

/**
 * @description Check if key name is taken
 * @summary Check if key name is taken
 * {@link /services/:service_version_id/features/:feature_version_id/keys/name-taken/:name}
 */
export async function getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName(
  service_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['service_version_id'],
  feature_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['feature_version_id'],
  name: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryResponse,
    ResponseErrorConfig<
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName400
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName401
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName404
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName500
    >,
    unknown
  >({ method: 'GET', url: `/services/${service_version_id}/features/${feature_version_id}/keys/name-taken/${name}`, ...requestConfig })
  return res.data
}

export function getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryOptions(
  service_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['service_version_id'],
  feature_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['feature_version_id'],
  name: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryKey(service_version_id, feature_version_id, name)
  return queryOptions<
    GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryResponse,
    ResponseErrorConfig<
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName400
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName401
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName404
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName500
    >,
    GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryResponse,
    typeof queryKey
  >({
    enabled: !!(service_version_id && feature_version_id && name),
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName(service_version_id, feature_version_id, name, config)
    },
  })
}

/**
 * @description Check if key name is taken
 * @summary Check if key name is taken
 * {@link /services/:service_version_id/features/:feature_version_id/keys/name-taken/:name}
 */
export function useGetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName<
  TData = GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryResponse,
  TQueryData = GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryResponse,
  TQueryKey extends QueryKey = GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryKey,
>(
  service_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['service_version_id'],
  feature_version_id: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['feature_version_id'],
  name: GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNamePathParams['name'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryResponse,
        ResponseErrorConfig<
          | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName400
          | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName401
          | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName404
          | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName500
        >,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey =
    queryOptions?.queryKey ?? getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryKey(service_version_id, feature_version_id, name)

  const query = useQuery(
    {
      ...(getServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenNameQueryOptions(
        service_version_id,
        feature_version_id,
        name,
        config,
      ) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName400
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName401
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName404
      | GetServicesServiceVersionIdFeaturesFeatureVersionIdKeysNameTakenName500
    >
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}