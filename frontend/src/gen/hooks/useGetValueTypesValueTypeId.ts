/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetValueTypesValueTypeIdQueryResponse,
  GetValueTypesValueTypeIdPathParams,
  GetValueTypesValueTypeId401,
  GetValueTypesValueTypeId404,
  GetValueTypesValueTypeId500,
} from '../types/GetValueTypesValueTypeId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getValueTypesValueTypeIdQueryKey = (value_type_id: GetValueTypesValueTypeIdPathParams['value_type_id']) =>
  [{ url: '/value-types/:value_type_id', params: { value_type_id: value_type_id } }] as const

export type GetValueTypesValueTypeIdQueryKey = ReturnType<typeof getValueTypesValueTypeIdQueryKey>

/**
 * @description Get a value type by ID
 * @summary Get value type
 * {@link /value-types/:value_type_id}
 */
export async function getValueTypesValueTypeId(
  value_type_id: GetValueTypesValueTypeIdPathParams['value_type_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetValueTypesValueTypeIdQueryResponse,
    ResponseErrorConfig<GetValueTypesValueTypeId401 | GetValueTypesValueTypeId404 | GetValueTypesValueTypeId500>,
    unknown
  >({ method: 'GET', url: `/value-types/${value_type_id}`, ...requestConfig })
  return res.data
}

export function getValueTypesValueTypeIdQueryOptions(
  value_type_id: GetValueTypesValueTypeIdPathParams['value_type_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getValueTypesValueTypeIdQueryKey(value_type_id)
  return queryOptions<
    GetValueTypesValueTypeIdQueryResponse,
    ResponseErrorConfig<GetValueTypesValueTypeId401 | GetValueTypesValueTypeId404 | GetValueTypesValueTypeId500>,
    GetValueTypesValueTypeIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!value_type_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getValueTypesValueTypeId(value_type_id, config)
    },
  })
}

/**
 * @description Get a value type by ID
 * @summary Get value type
 * {@link /value-types/:value_type_id}
 */
export function useGetValueTypesValueTypeId<
  TData = GetValueTypesValueTypeIdQueryResponse,
  TQueryData = GetValueTypesValueTypeIdQueryResponse,
  TQueryKey extends QueryKey = GetValueTypesValueTypeIdQueryKey,
>(
  value_type_id: GetValueTypesValueTypeIdPathParams['value_type_id'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetValueTypesValueTypeIdQueryResponse,
        ResponseErrorConfig<GetValueTypesValueTypeId401 | GetValueTypesValueTypeId404 | GetValueTypesValueTypeId500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getValueTypesValueTypeIdQueryKey(value_type_id)

  const query = useQuery(
    {
      ...(getValueTypesValueTypeIdQueryOptions(value_type_id, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetValueTypesValueTypeId401 | GetValueTypesValueTypeId404 | GetValueTypesValueTypeId500>> & {
    queryKey: TQueryKey
  }

  query.queryKey = queryKey as TQueryKey

  return query
}