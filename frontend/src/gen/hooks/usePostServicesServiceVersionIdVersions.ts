/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PostServicesServiceVersionIdVersionsMutationResponse,
  PostServicesServiceVersionIdVersionsPathParams,
  PostServicesServiceVersionIdVersions400,
  PostServicesServiceVersionIdVersions401,
  PostServicesServiceVersionIdVersions403,
  PostServicesServiceVersionIdVersions404,
  PostServicesServiceVersionIdVersions500,
} from '../types/PostServicesServiceVersionIdVersions.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const postServicesServiceVersionIdVersionsMutationKey = () => [{ url: '/services/{service_version_id}/versions' }] as const

export type PostServicesServiceVersionIdVersionsMutationKey = ReturnType<typeof postServicesServiceVersionIdVersionsMutationKey>

/**
 * @description Create service version
 * @summary Create service version
 * {@link /services/:service_version_id/versions}
 */
export async function postServicesServiceVersionIdVersions(
  service_version_id: PostServicesServiceVersionIdVersionsPathParams['service_version_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostServicesServiceVersionIdVersionsMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdVersions400
      | PostServicesServiceVersionIdVersions401
      | PostServicesServiceVersionIdVersions403
      | PostServicesServiceVersionIdVersions404
      | PostServicesServiceVersionIdVersions500
    >,
    unknown
  >({ method: 'POST', url: `/services/${service_version_id}/versions`, ...requestConfig })
  return res.data
}

/**
 * @description Create service version
 * @summary Create service version
 * {@link /services/:service_version_id/versions}
 */
export function usePostServicesServiceVersionIdVersions<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PostServicesServiceVersionIdVersionsMutationResponse,
      ResponseErrorConfig<
        | PostServicesServiceVersionIdVersions400
        | PostServicesServiceVersionIdVersions401
        | PostServicesServiceVersionIdVersions403
        | PostServicesServiceVersionIdVersions404
        | PostServicesServiceVersionIdVersions500
      >,
      { service_version_id: PostServicesServiceVersionIdVersionsPathParams['service_version_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postServicesServiceVersionIdVersionsMutationKey()

  return useMutation<
    PostServicesServiceVersionIdVersionsMutationResponse,
    ResponseErrorConfig<
      | PostServicesServiceVersionIdVersions400
      | PostServicesServiceVersionIdVersions401
      | PostServicesServiceVersionIdVersions403
      | PostServicesServiceVersionIdVersions404
      | PostServicesServiceVersionIdVersions500
    >,
    { service_version_id: PostServicesServiceVersionIdVersionsPathParams['service_version_id'] },
    TContext
  >(
    {
      mutationFn: async ({ service_version_id }) => {
        return postServicesServiceVersionIdVersions(service_version_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}