/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeleteChangesetsChangesetIdDiscardMutationResponse,
  DeleteChangesetsChangesetIdDiscardPathParams,
  DeleteChangesetsChangesetIdDiscard400,
  DeleteChangesetsChangesetIdDiscard401,
  DeleteChangesetsChangesetIdDiscard403,
  DeleteChangesetsChangesetIdDiscard404,
  DeleteChangesetsChangesetIdDiscard500,
} from '../types/DeleteChangesetsChangesetIdDiscard.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const deleteChangesetsChangesetIdDiscardMutationKey = () => [{ url: '/changesets/{changeset_id}/discard' }] as const

export type DeleteChangesetsChangesetIdDiscardMutationKey = ReturnType<typeof deleteChangesetsChangesetIdDiscardMutationKey>

/**
 * @description Discard a changeset by ID
 * @summary Discard a changeset
 * {@link /changesets/:changeset_id/discard}
 */
export async function deleteChangesetsChangesetIdDiscard(
  changeset_id: DeleteChangesetsChangesetIdDiscardPathParams['changeset_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteChangesetsChangesetIdDiscardMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesetIdDiscard400
      | DeleteChangesetsChangesetIdDiscard401
      | DeleteChangesetsChangesetIdDiscard403
      | DeleteChangesetsChangesetIdDiscard404
      | DeleteChangesetsChangesetIdDiscard500
    >,
    unknown
  >({ method: 'DELETE', url: `/changesets/${changeset_id}/discard`, ...requestConfig })
  return res.data
}

/**
 * @description Discard a changeset by ID
 * @summary Discard a changeset
 * {@link /changesets/:changeset_id/discard}
 */
export function useDeleteChangesetsChangesetIdDiscard<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteChangesetsChangesetIdDiscardMutationResponse,
      ResponseErrorConfig<
        | DeleteChangesetsChangesetIdDiscard400
        | DeleteChangesetsChangesetIdDiscard401
        | DeleteChangesetsChangesetIdDiscard403
        | DeleteChangesetsChangesetIdDiscard404
        | DeleteChangesetsChangesetIdDiscard500
      >,
      { changeset_id: DeleteChangesetsChangesetIdDiscardPathParams['changeset_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? deleteChangesetsChangesetIdDiscardMutationKey()

  return useMutation<
    DeleteChangesetsChangesetIdDiscardMutationResponse,
    ResponseErrorConfig<
      | DeleteChangesetsChangesetIdDiscard400
      | DeleteChangesetsChangesetIdDiscard401
      | DeleteChangesetsChangesetIdDiscard403
      | DeleteChangesetsChangesetIdDiscard404
      | DeleteChangesetsChangesetIdDiscard500
    >,
    { changeset_id: DeleteChangesetsChangesetIdDiscardPathParams['changeset_id'] },
    TContext
  >(
    {
      mutationFn: async ({ changeset_id }) => {
        return deleteChangesetsChangesetIdDiscard(changeset_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}