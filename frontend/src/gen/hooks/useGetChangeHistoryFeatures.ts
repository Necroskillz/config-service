/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetChangeHistoryFeaturesQueryResponse,
  GetChangeHistoryFeaturesQueryParams,
  GetChangeHistoryFeatures400,
  GetChangeHistoryFeatures401,
  GetChangeHistoryFeatures404,
  GetChangeHistoryFeatures500,
} from '../types/GetChangeHistoryFeatures.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getChangeHistoryFeaturesQueryKey = (params?: GetChangeHistoryFeaturesQueryParams) =>
  [{ url: '/change-history/features' }, ...(params ? [params] : [])] as const

export type GetChangeHistoryFeaturesQueryKey = ReturnType<typeof getChangeHistoryFeaturesQueryKey>

/**
 * @description Get features
 * @summary Get features
 * {@link /change-history/features}
 */
export async function getChangeHistoryFeatures(params?: GetChangeHistoryFeaturesQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangeHistoryFeaturesQueryResponse,
    ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>,
    unknown
  >({ method: 'GET', url: `/change-history/features`, params, ...requestConfig })
  return res.data
}

export function getChangeHistoryFeaturesQueryOptions(
  params?: GetChangeHistoryFeaturesQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getChangeHistoryFeaturesQueryKey(params)
  return queryOptions<
    GetChangeHistoryFeaturesQueryResponse,
    ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>,
    GetChangeHistoryFeaturesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangeHistoryFeatures(params, config)
    },
  })
}

/**
 * @description Get features
 * @summary Get features
 * {@link /change-history/features}
 */
export function useGetChangeHistoryFeatures<
  TData = GetChangeHistoryFeaturesQueryResponse,
  TQueryData = GetChangeHistoryFeaturesQueryResponse,
  TQueryKey extends QueryKey = GetChangeHistoryFeaturesQueryKey,
>(
  params?: GetChangeHistoryFeaturesQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetChangeHistoryFeaturesQueryResponse,
        ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangeHistoryFeaturesQueryKey(params)

  const query = useQuery(
    {
      ...(getChangeHistoryFeaturesQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<
    TData,
    ResponseErrorConfig<GetChangeHistoryFeatures400 | GetChangeHistoryFeatures401 | GetChangeHistoryFeatures404 | GetChangeHistoryFeatures500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}