/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { GetVariationPropertiesQueryResponse, GetVariationProperties401, GetVariationProperties500 } from '../types/GetVariationProperties.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getVariationPropertiesSuspenseQueryKey = () => [{ url: '/variation-properties' }] as const

export type GetVariationPropertiesSuspenseQueryKey = ReturnType<typeof getVariationPropertiesSuspenseQueryKey>

/**
 * @description Get all variation properties
 * @summary Get variation properties
 * {@link /variation-properties}
 */
export async function getVariationPropertiesSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetVariationPropertiesQueryResponse, ResponseErrorConfig<GetVariationProperties401 | GetVariationProperties500>, unknown>({
    method: 'GET',
    url: `/variation-properties`,
    ...requestConfig,
  })
  return res.data
}

export function getVariationPropertiesSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getVariationPropertiesSuspenseQueryKey()
  return queryOptions<
    GetVariationPropertiesQueryResponse,
    ResponseErrorConfig<GetVariationProperties401 | GetVariationProperties500>,
    GetVariationPropertiesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getVariationPropertiesSuspense(config)
    },
  })
}

/**
 * @description Get all variation properties
 * @summary Get variation properties
 * {@link /variation-properties}
 */
export function useGetVariationPropertiesSuspense<
  TData = GetVariationPropertiesQueryResponse,
  TQueryData = GetVariationPropertiesQueryResponse,
  TQueryKey extends QueryKey = GetVariationPropertiesSuspenseQueryKey,
>(
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<GetVariationPropertiesQueryResponse, ResponseErrorConfig<GetVariationProperties401 | GetVariationProperties500>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getVariationPropertiesSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(getVariationPropertiesSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetVariationProperties401 | GetVariationProperties500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}