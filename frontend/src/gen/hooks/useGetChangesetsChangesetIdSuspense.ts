/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  GetChangesetsChangesetIdQueryResponse,
  GetChangesetsChangesetIdPathParams,
  GetChangesetsChangesetId400,
  GetChangesetsChangesetId401,
  GetChangesetsChangesetId404,
  GetChangesetsChangesetId500,
} from '../types/GetChangesetsChangesetId.ts'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getChangesetsChangesetIdSuspenseQueryKey = (changeset_id: GetChangesetsChangesetIdPathParams['changeset_id']) =>
  [{ url: '/changesets/:changeset_id', params: { changeset_id: changeset_id } }] as const

export type GetChangesetsChangesetIdSuspenseQueryKey = ReturnType<typeof getChangesetsChangesetIdSuspenseQueryKey>

/**
 * @description Get a changeset by ID
 * @summary Get a changeset
 * {@link /changesets/:changeset_id}
 */
export async function getChangesetsChangesetIdSuspense(
  changeset_id: GetChangesetsChangesetIdPathParams['changeset_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetChangesetsChangesetIdQueryResponse,
    ResponseErrorConfig<GetChangesetsChangesetId400 | GetChangesetsChangesetId401 | GetChangesetsChangesetId404 | GetChangesetsChangesetId500>,
    unknown
  >({ method: 'GET', url: `/changesets/${changeset_id}`, ...requestConfig })
  return res.data
}

export function getChangesetsChangesetIdSuspenseQueryOptions(
  changeset_id: GetChangesetsChangesetIdPathParams['changeset_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getChangesetsChangesetIdSuspenseQueryKey(changeset_id)
  return queryOptions<
    GetChangesetsChangesetIdQueryResponse,
    ResponseErrorConfig<GetChangesetsChangesetId400 | GetChangesetsChangesetId401 | GetChangesetsChangesetId404 | GetChangesetsChangesetId500>,
    GetChangesetsChangesetIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!changeset_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getChangesetsChangesetIdSuspense(changeset_id, config)
    },
  })
}

/**
 * @description Get a changeset by ID
 * @summary Get a changeset
 * {@link /changesets/:changeset_id}
 */
export function useGetChangesetsChangesetIdSuspense<
  TData = GetChangesetsChangesetIdQueryResponse,
  TQueryKey extends QueryKey = GetChangesetsChangesetIdSuspenseQueryKey,
>(
  changeset_id: GetChangesetsChangesetIdPathParams['changeset_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetChangesetsChangesetIdQueryResponse,
        ResponseErrorConfig<GetChangesetsChangesetId400 | GetChangesetsChangesetId401 | GetChangesetsChangesetId404 | GetChangesetsChangesetId500>,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getChangesetsChangesetIdSuspenseQueryKey(changeset_id)

  const query = useSuspenseQuery(
    {
      ...(getChangesetsChangesetIdSuspenseQueryOptions(changeset_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetChangesetsChangesetId400 | GetChangesetsChangesetId401 | GetChangesetsChangesetId404 | GetChangesetsChangesetId500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}