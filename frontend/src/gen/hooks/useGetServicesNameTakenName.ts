/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetServicesNameTakenNameQueryResponse,
  GetServicesNameTakenNamePathParams,
  GetServicesNameTakenName401,
  GetServicesNameTakenName500,
} from '../types/GetServicesNameTakenName.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getServicesNameTakenNameQueryKey = (name: GetServicesNameTakenNamePathParams['name']) =>
  [{ url: '/services/name-taken/:name', params: { name: name } }] as const

export type GetServicesNameTakenNameQueryKey = ReturnType<typeof getServicesNameTakenNameQueryKey>

/**
 * @description Check if service name is taken
 * @summary Check if service name is taken
 * {@link /services/name-taken/:name}
 */
export async function getServicesNameTakenName(
  name: GetServicesNameTakenNamePathParams['name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetServicesNameTakenNameQueryResponse, ResponseErrorConfig<GetServicesNameTakenName401 | GetServicesNameTakenName500>, unknown>({
    method: 'GET',
    url: `/services/name-taken/${name}`,
    ...requestConfig,
  })
  return res.data
}

export function getServicesNameTakenNameQueryOptions(
  name: GetServicesNameTakenNamePathParams['name'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getServicesNameTakenNameQueryKey(name)
  return queryOptions<
    GetServicesNameTakenNameQueryResponse,
    ResponseErrorConfig<GetServicesNameTakenName401 | GetServicesNameTakenName500>,
    GetServicesNameTakenNameQueryResponse,
    typeof queryKey
  >({
    enabled: !!name,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getServicesNameTakenName(name, config)
    },
  })
}

/**
 * @description Check if service name is taken
 * @summary Check if service name is taken
 * {@link /services/name-taken/:name}
 */
export function useGetServicesNameTakenName<
  TData = GetServicesNameTakenNameQueryResponse,
  TQueryData = GetServicesNameTakenNameQueryResponse,
  TQueryKey extends QueryKey = GetServicesNameTakenNameQueryKey,
>(
  name: GetServicesNameTakenNamePathParams['name'],
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetServicesNameTakenNameQueryResponse,
        ResponseErrorConfig<GetServicesNameTakenName401 | GetServicesNameTakenName500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getServicesNameTakenNameQueryKey(name)

  const query = useQuery(
    {
      ...(getServicesNameTakenNameQueryOptions(name, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetServicesNameTakenName401 | GetServicesNameTakenName500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}