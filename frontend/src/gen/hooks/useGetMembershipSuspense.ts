/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { GetMembershipQueryResponse, GetMembershipQueryParams, GetMembership400, GetMembership401, GetMembership500 } from '../types/GetMembership.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getMembershipSuspenseQueryKey = (params?: GetMembershipQueryParams) => [{ url: '/membership' }, ...(params ? [params] : [])] as const

export type GetMembershipSuspenseQueryKey = ReturnType<typeof getMembershipSuspenseQueryKey>

/**
 * @description Get list of users and groups
 * @summary Get users and groups
 * {@link /membership}
 */
export async function getMembershipSuspense(params?: GetMembershipQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetMembershipQueryResponse, ResponseErrorConfig<GetMembership400 | GetMembership401 | GetMembership500>, unknown>({
    method: 'GET',
    url: `/membership`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function getMembershipSuspenseQueryOptions(params?: GetMembershipQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getMembershipSuspenseQueryKey(params)
  return queryOptions<
    GetMembershipQueryResponse,
    ResponseErrorConfig<GetMembership400 | GetMembership401 | GetMembership500>,
    GetMembershipQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getMembershipSuspense(params, config)
    },
  })
}

/**
 * @description Get list of users and groups
 * @summary Get users and groups
 * {@link /membership}
 */
export function useGetMembershipSuspense<TData = GetMembershipQueryResponse, TQueryKey extends QueryKey = GetMembershipSuspenseQueryKey>(
  params?: GetMembershipQueryParams,
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<GetMembershipQueryResponse, ResponseErrorConfig<GetMembership400 | GetMembership401 | GetMembership500>, TData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getMembershipSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(getMembershipSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetMembership400 | GetMembership401 | GetMembership500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}