/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type {
  PutVariationPropertiesPropertyIdMutationRequest,
  PutVariationPropertiesPropertyIdMutationResponse,
  PutVariationPropertiesPropertyIdPathParams,
  PutVariationPropertiesPropertyId400,
  PutVariationPropertiesPropertyId401,
  PutVariationPropertiesPropertyId403,
  PutVariationPropertiesPropertyId500,
} from '../types/PutVariationPropertiesPropertyId.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const putVariationPropertiesPropertyIdMutationKey = () => [{ url: '/variation-properties/{property_id}' }] as const

export type PutVariationPropertiesPropertyIdMutationKey = ReturnType<typeof putVariationPropertiesPropertyIdMutationKey>

/**
 * @description Update variation property
 * @summary Update variation property
 * {@link /variation-properties/:property_id}
 */
export async function putVariationPropertiesPropertyId(
  property_id: PutVariationPropertiesPropertyIdPathParams['property_id'],
  data: PutVariationPropertiesPropertyIdMutationRequest,
  config: Partial<RequestConfig<PutVariationPropertiesPropertyIdMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PutVariationPropertiesPropertyIdMutationResponse,
    ResponseErrorConfig<
      PutVariationPropertiesPropertyId400 | PutVariationPropertiesPropertyId401 | PutVariationPropertiesPropertyId403 | PutVariationPropertiesPropertyId500
    >,
    PutVariationPropertiesPropertyIdMutationRequest
  >({ method: 'PUT', url: `/variation-properties/${property_id}`, data, ...requestConfig })
  return res.data
}

/**
 * @description Update variation property
 * @summary Update variation property
 * {@link /variation-properties/:property_id}
 */
export function usePutVariationPropertiesPropertyId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      PutVariationPropertiesPropertyIdMutationResponse,
      ResponseErrorConfig<
        PutVariationPropertiesPropertyId400 | PutVariationPropertiesPropertyId401 | PutVariationPropertiesPropertyId403 | PutVariationPropertiesPropertyId500
      >,
      { property_id: PutVariationPropertiesPropertyIdPathParams['property_id']; data: PutVariationPropertiesPropertyIdMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PutVariationPropertiesPropertyIdMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation: { client: queryClient, ...mutationOptions } = {}, client: config = {} } = options ?? {}
  const mutationKey = mutationOptions?.mutationKey ?? putVariationPropertiesPropertyIdMutationKey()

  return useMutation<
    PutVariationPropertiesPropertyIdMutationResponse,
    ResponseErrorConfig<
      PutVariationPropertiesPropertyId400 | PutVariationPropertiesPropertyId401 | PutVariationPropertiesPropertyId403 | PutVariationPropertiesPropertyId500
    >,
    { property_id: PutVariationPropertiesPropertyIdPathParams['property_id']; data: PutVariationPropertiesPropertyIdMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ property_id, data }) => {
        return putVariationPropertiesPropertyId(property_id, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}