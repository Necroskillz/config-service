/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { GetServiceTypesQueryResponse, GetServiceTypes401, GetServiceTypes500 } from '../types/GetServiceTypes.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getServiceTypesQueryKey = () => [{ url: '/service-types' }] as const

export type GetServiceTypesQueryKey = ReturnType<typeof getServiceTypesQueryKey>

/**
 * @description Get all service types
 * @summary Get service types
 * {@link /service-types}
 */
export async function getServiceTypes(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetServiceTypesQueryResponse, ResponseErrorConfig<GetServiceTypes401 | GetServiceTypes500>, unknown>({
    method: 'GET',
    url: `/service-types`,
    ...requestConfig,
  })
  return res.data
}

export function getServiceTypesQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getServiceTypesQueryKey()
  return queryOptions<
    GetServiceTypesQueryResponse,
    ResponseErrorConfig<GetServiceTypes401 | GetServiceTypes500>,
    GetServiceTypesQueryResponse,
    typeof queryKey
  >({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getServiceTypes(config)
    },
  })
}

/**
 * @description Get all service types
 * @summary Get service types
 * {@link /service-types}
 */
export function useGetServiceTypes<
  TData = GetServiceTypesQueryResponse,
  TQueryData = GetServiceTypesQueryResponse,
  TQueryKey extends QueryKey = GetServiceTypesQueryKey,
>(
  options: {
    query?: Partial<
      QueryObserverOptions<GetServiceTypesQueryResponse, ResponseErrorConfig<GetServiceTypes401 | GetServiceTypes500>, TData, TQueryData, TQueryKey>
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getServiceTypesQueryKey()

  const query = useQuery(
    {
      ...(getServiceTypesQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetServiceTypes401 | GetServiceTypes500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}