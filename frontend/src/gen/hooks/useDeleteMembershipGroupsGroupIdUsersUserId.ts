/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  DeleteMembershipGroupsGroupIdUsersUserIdMutationResponse,
  DeleteMembershipGroupsGroupIdUsersUserIdPathParams,
  DeleteMembershipGroupsGroupIdUsersUserId400,
  DeleteMembershipGroupsGroupIdUsersUserId401,
  DeleteMembershipGroupsGroupIdUsersUserId403,
  DeleteMembershipGroupsGroupIdUsersUserId404,
  DeleteMembershipGroupsGroupIdUsersUserId500,
} from '../types/DeleteMembershipGroupsGroupIdUsersUserId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { useMutation } from '@tanstack/react-query'

export const deleteMembershipGroupsGroupIdUsersUserIdMutationKey = () => [{ url: '/membership/groups/{group_id}/users/{user_id}' }] as const

export type DeleteMembershipGroupsGroupIdUsersUserIdMutationKey = ReturnType<typeof deleteMembershipGroupsGroupIdUsersUserIdMutationKey>

/**
 * @description Remove a user from a group
 * @summary Remove a user from a group
 * {@link /membership/groups/:group_id/users/:user_id}
 */
export async function deleteMembershipGroupsGroupIdUsersUserId(
  user_id: DeleteMembershipGroupsGroupIdUsersUserIdPathParams['user_id'],
  group_id: DeleteMembershipGroupsGroupIdUsersUserIdPathParams['group_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    DeleteMembershipGroupsGroupIdUsersUserIdMutationResponse,
    ResponseErrorConfig<
      | DeleteMembershipGroupsGroupIdUsersUserId400
      | DeleteMembershipGroupsGroupIdUsersUserId401
      | DeleteMembershipGroupsGroupIdUsersUserId403
      | DeleteMembershipGroupsGroupIdUsersUserId404
      | DeleteMembershipGroupsGroupIdUsersUserId500
    >,
    unknown
  >({ method: 'DELETE', url: `/membership/groups/${group_id}/users/${user_id}`, ...requestConfig })
  return res.data
}

/**
 * @description Remove a user from a group
 * @summary Remove a user from a group
 * {@link /membership/groups/:group_id/users/:user_id}
 */
export function useDeleteMembershipGroupsGroupIdUsersUserId<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteMembershipGroupsGroupIdUsersUserIdMutationResponse,
      ResponseErrorConfig<
        | DeleteMembershipGroupsGroupIdUsersUserId400
        | DeleteMembershipGroupsGroupIdUsersUserId401
        | DeleteMembershipGroupsGroupIdUsersUserId403
        | DeleteMembershipGroupsGroupIdUsersUserId404
        | DeleteMembershipGroupsGroupIdUsersUserId500
      >,
      { user_id: DeleteMembershipGroupsGroupIdUsersUserIdPathParams['user_id']; group_id: DeleteMembershipGroupsGroupIdUsersUserIdPathParams['group_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteMembershipGroupsGroupIdUsersUserIdMutationKey()

  return useMutation<
    DeleteMembershipGroupsGroupIdUsersUserIdMutationResponse,
    ResponseErrorConfig<
      | DeleteMembershipGroupsGroupIdUsersUserId400
      | DeleteMembershipGroupsGroupIdUsersUserId401
      | DeleteMembershipGroupsGroupIdUsersUserId403
      | DeleteMembershipGroupsGroupIdUsersUserId404
      | DeleteMembershipGroupsGroupIdUsersUserId500
    >,
    { user_id: DeleteMembershipGroupsGroupIdUsersUserIdPathParams['user_id']; group_id: DeleteMembershipGroupsGroupIdUsersUserIdPathParams['group_id'] },
    TContext
  >(
    {
      mutationFn: async ({ user_id, group_id }) => {
        return deleteMembershipGroupsGroupIdUsersUserId(user_id, group_id, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}