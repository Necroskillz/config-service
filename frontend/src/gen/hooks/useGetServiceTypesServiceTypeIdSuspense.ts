/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type {
  GetServiceTypesServiceTypeIdQueryResponse,
  GetServiceTypesServiceTypeIdPathParams,
  GetServiceTypesServiceTypeId400,
  GetServiceTypesServiceTypeId401,
  GetServiceTypesServiceTypeId404,
  GetServiceTypesServiceTypeId500,
} from '../types/GetServiceTypesServiceTypeId.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getServiceTypesServiceTypeIdSuspenseQueryKey = (service_type_id: GetServiceTypesServiceTypeIdPathParams['service_type_id']) =>
  [{ url: '/service-types/:service_type_id', params: { service_type_id: service_type_id } }] as const

export type GetServiceTypesServiceTypeIdSuspenseQueryKey = ReturnType<typeof getServiceTypesServiceTypeIdSuspenseQueryKey>

/**
 * @description Get a service type
 * @summary Get service type
 * {@link /service-types/:service_type_id}
 */
export async function getServiceTypesServiceTypeIdSuspense(
  service_type_id: GetServiceTypesServiceTypeIdPathParams['service_type_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    GetServiceTypesServiceTypeIdQueryResponse,
    ResponseErrorConfig<GetServiceTypesServiceTypeId400 | GetServiceTypesServiceTypeId401 | GetServiceTypesServiceTypeId404 | GetServiceTypesServiceTypeId500>,
    unknown
  >({ method: 'GET', url: `/service-types/${service_type_id}`, ...requestConfig })
  return res.data
}

export function getServiceTypesServiceTypeIdSuspenseQueryOptions(
  service_type_id: GetServiceTypesServiceTypeIdPathParams['service_type_id'],
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getServiceTypesServiceTypeIdSuspenseQueryKey(service_type_id)
  return queryOptions<
    GetServiceTypesServiceTypeIdQueryResponse,
    ResponseErrorConfig<GetServiceTypesServiceTypeId400 | GetServiceTypesServiceTypeId401 | GetServiceTypesServiceTypeId404 | GetServiceTypesServiceTypeId500>,
    GetServiceTypesServiceTypeIdQueryResponse,
    typeof queryKey
  >({
    enabled: !!service_type_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getServiceTypesServiceTypeIdSuspense(service_type_id, config)
    },
  })
}

/**
 * @description Get a service type
 * @summary Get service type
 * {@link /service-types/:service_type_id}
 */
export function useGetServiceTypesServiceTypeIdSuspense<
  TData = GetServiceTypesServiceTypeIdQueryResponse,
  TQueryKey extends QueryKey = GetServiceTypesServiceTypeIdSuspenseQueryKey,
>(
  service_type_id: GetServiceTypesServiceTypeIdPathParams['service_type_id'],
  options: {
    query?: Partial<
      UseSuspenseQueryOptions<
        GetServiceTypesServiceTypeIdQueryResponse,
        ResponseErrorConfig<
          GetServiceTypesServiceTypeId400 | GetServiceTypesServiceTypeId401 | GetServiceTypesServiceTypeId404 | GetServiceTypesServiceTypeId500
        >,
        TData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getServiceTypesServiceTypeIdSuspenseQueryKey(service_type_id)

  const query = useSuspenseQuery(
    {
      ...(getServiceTypesServiceTypeIdSuspenseQueryOptions(service_type_id, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<
    TData,
    ResponseErrorConfig<GetServiceTypesServiceTypeId400 | GetServiceTypesServiceTypeId401 | GetServiceTypesServiceTypeId404 | GetServiceTypesServiceTypeId500>
  > & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}