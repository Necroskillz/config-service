/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '~/axios'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  GetConfigurationQueryResponse,
  GetConfigurationQueryParams,
  GetConfiguration400,
  GetConfiguration404,
  GetConfiguration500,
} from '../types/GetConfiguration.ts'
import type { RequestConfig, ResponseErrorConfig } from '~/axios'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getConfigurationQueryKey = (params: GetConfigurationQueryParams) => [{ url: '/configuration' }, ...(params ? [params] : [])] as const

export type GetConfigurationQueryKey = ReturnType<typeof getConfigurationQueryKey>

/**
 * @description Get configuration
 * @summary Get configuration
 * {@link /configuration}
 */
export async function getConfiguration(params: GetConfigurationQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetConfigurationQueryResponse, ResponseErrorConfig<GetConfiguration400 | GetConfiguration404 | GetConfiguration500>, unknown>({
    method: 'GET',
    url: `/configuration`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function getConfigurationQueryOptions(params: GetConfigurationQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getConfigurationQueryKey(params)
  return queryOptions<
    GetConfigurationQueryResponse,
    ResponseErrorConfig<GetConfiguration400 | GetConfiguration404 | GetConfiguration500>,
    GetConfigurationQueryResponse,
    typeof queryKey
  >({
    enabled: !!params,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getConfiguration(params, config)
    },
  })
}

/**
 * @description Get configuration
 * @summary Get configuration
 * {@link /configuration}
 */
export function useGetConfiguration<
  TData = GetConfigurationQueryResponse,
  TQueryData = GetConfigurationQueryResponse,
  TQueryKey extends QueryKey = GetConfigurationQueryKey,
>(
  params: GetConfigurationQueryParams,
  options: {
    query?: Partial<
      QueryObserverOptions<
        GetConfigurationQueryResponse,
        ResponseErrorConfig<GetConfiguration400 | GetConfiguration404 | GetConfiguration500>,
        TData,
        TQueryData,
        TQueryKey
      >
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getConfigurationQueryKey(params)

  const query = useQuery(
    {
      ...(getConfigurationQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetConfiguration400 | GetConfiguration404 | GetConfiguration500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}