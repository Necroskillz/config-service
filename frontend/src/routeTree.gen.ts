/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as servicesServicesIndexImport } from './routes/(services)/services.index'
import { Route as usersUsersUserIdImport } from './routes/(users)/users.$userId'
import { Route as servicesServicesCreateImport } from './routes/(services)/services.create'
import { Route as changesetsChangesetsChangesetIdImport } from './routes/(changesets)/changesets.$changesetId'
import { Route as servicesServicesServiceVersionIdIndexImport } from './routes/(services)/services.$serviceVersionId.index'
import { Route as servicesServicesServiceVersionIdEditImport } from './routes/(services)/services.$serviceVersionId.edit'
import { Route as featuresServicesServiceVersionIdFeaturesCreateImport } from './routes/(features)/services.$serviceVersionId.features.create'
import { Route as featuresServicesServiceVersionIdFeaturesFeatureVersionIdImport } from './routes/(features)/services.$serviceVersionId.features.$featureVersionId'
import { Route as keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateImport } from './routes/(keys)/services.$serviceVersionId.features.$featureVersionId.keys.create'
import { Route as keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesImport } from './routes/(keys)/services.$serviceVersionId.features.$featureVersionId.keys.$keyId.values'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const servicesServicesIndexRoute = servicesServicesIndexImport.update({
  id: '/(services)/services/',
  path: '/services/',
  getParentRoute: () => rootRoute,
} as any)

const usersUsersUserIdRoute = usersUsersUserIdImport.update({
  id: '/(users)/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => rootRoute,
} as any)

const servicesServicesCreateRoute = servicesServicesCreateImport.update({
  id: '/(services)/services/create',
  path: '/services/create',
  getParentRoute: () => rootRoute,
} as any)

const changesetsChangesetsChangesetIdRoute =
  changesetsChangesetsChangesetIdImport.update({
    id: '/(changesets)/changesets/$changesetId',
    path: '/changesets/$changesetId',
    getParentRoute: () => rootRoute,
  } as any)

const servicesServicesServiceVersionIdIndexRoute =
  servicesServicesServiceVersionIdIndexImport.update({
    id: '/(services)/services/$serviceVersionId/',
    path: '/services/$serviceVersionId/',
    getParentRoute: () => rootRoute,
  } as any)

const servicesServicesServiceVersionIdEditRoute =
  servicesServicesServiceVersionIdEditImport.update({
    id: '/(services)/services/$serviceVersionId/edit',
    path: '/services/$serviceVersionId/edit',
    getParentRoute: () => rootRoute,
  } as any)

const featuresServicesServiceVersionIdFeaturesCreateRoute =
  featuresServicesServiceVersionIdFeaturesCreateImport.update({
    id: '/(features)/services/$serviceVersionId/features/create',
    path: '/services/$serviceVersionId/features/create',
    getParentRoute: () => rootRoute,
  } as any)

const featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute =
  featuresServicesServiceVersionIdFeaturesFeatureVersionIdImport.update({
    id: '/(features)/services/$serviceVersionId/features/$featureVersionId',
    path: '/services/$serviceVersionId/features/$featureVersionId',
    getParentRoute: () => rootRoute,
  } as any)

const keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute =
  keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateImport.update({
    id: '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/create',
    path: '/services/$serviceVersionId/features/$featureVersionId/keys/create',
    getParentRoute: () => rootRoute,
  } as any)

const keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute =
  keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesImport.update(
    {
      id: '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values',
      path: '/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values',
      getParentRoute: () => rootRoute,
    } as any,
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(changesets)/changesets/$changesetId': {
      id: '/(changesets)/changesets/$changesetId'
      path: '/changesets/$changesetId'
      fullPath: '/changesets/$changesetId'
      preLoaderRoute: typeof changesetsChangesetsChangesetIdImport
      parentRoute: typeof rootRoute
    }
    '/(services)/services/create': {
      id: '/(services)/services/create'
      path: '/services/create'
      fullPath: '/services/create'
      preLoaderRoute: typeof servicesServicesCreateImport
      parentRoute: typeof rootRoute
    }
    '/(users)/users/$userId': {
      id: '/(users)/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof usersUsersUserIdImport
      parentRoute: typeof rootRoute
    }
    '/(services)/services/': {
      id: '/(services)/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof servicesServicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/(services)/services/$serviceVersionId/edit': {
      id: '/(services)/services/$serviceVersionId/edit'
      path: '/services/$serviceVersionId/edit'
      fullPath: '/services/$serviceVersionId/edit'
      preLoaderRoute: typeof servicesServicesServiceVersionIdEditImport
      parentRoute: typeof rootRoute
    }
    '/(services)/services/$serviceVersionId/': {
      id: '/(services)/services/$serviceVersionId/'
      path: '/services/$serviceVersionId'
      fullPath: '/services/$serviceVersionId'
      preLoaderRoute: typeof servicesServicesServiceVersionIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/(features)/services/$serviceVersionId/features/$featureVersionId': {
      id: '/(features)/services/$serviceVersionId/features/$featureVersionId'
      path: '/services/$serviceVersionId/features/$featureVersionId'
      fullPath: '/services/$serviceVersionId/features/$featureVersionId'
      preLoaderRoute: typeof featuresServicesServiceVersionIdFeaturesFeatureVersionIdImport
      parentRoute: typeof rootRoute
    }
    '/(features)/services/$serviceVersionId/features/create': {
      id: '/(features)/services/$serviceVersionId/features/create'
      path: '/services/$serviceVersionId/features/create'
      fullPath: '/services/$serviceVersionId/features/create'
      preLoaderRoute: typeof featuresServicesServiceVersionIdFeaturesCreateImport
      parentRoute: typeof rootRoute
    }
    '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/create': {
      id: '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/create'
      path: '/services/$serviceVersionId/features/$featureVersionId/keys/create'
      fullPath: '/services/$serviceVersionId/features/$featureVersionId/keys/create'
      preLoaderRoute: typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateImport
      parentRoute: typeof rootRoute
    }
    '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values': {
      id: '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values'
      path: '/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values'
      fullPath: '/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values'
      preLoaderRoute: typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/changesets/$changesetId': typeof changesetsChangesetsChangesetIdRoute
  '/services/create': typeof servicesServicesCreateRoute
  '/users/$userId': typeof usersUsersUserIdRoute
  '/services': typeof servicesServicesIndexRoute
  '/services/$serviceVersionId/edit': typeof servicesServicesServiceVersionIdEditRoute
  '/services/$serviceVersionId': typeof servicesServicesServiceVersionIdIndexRoute
  '/services/$serviceVersionId/features/$featureVersionId': typeof featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute
  '/services/$serviceVersionId/features/create': typeof featuresServicesServiceVersionIdFeaturesCreateRoute
  '/services/$serviceVersionId/features/$featureVersionId/keys/create': typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute
  '/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values': typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/changesets/$changesetId': typeof changesetsChangesetsChangesetIdRoute
  '/services/create': typeof servicesServicesCreateRoute
  '/users/$userId': typeof usersUsersUserIdRoute
  '/services': typeof servicesServicesIndexRoute
  '/services/$serviceVersionId/edit': typeof servicesServicesServiceVersionIdEditRoute
  '/services/$serviceVersionId': typeof servicesServicesServiceVersionIdIndexRoute
  '/services/$serviceVersionId/features/$featureVersionId': typeof featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute
  '/services/$serviceVersionId/features/create': typeof featuresServicesServiceVersionIdFeaturesCreateRoute
  '/services/$serviceVersionId/features/$featureVersionId/keys/create': typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute
  '/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values': typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/(changesets)/changesets/$changesetId': typeof changesetsChangesetsChangesetIdRoute
  '/(services)/services/create': typeof servicesServicesCreateRoute
  '/(users)/users/$userId': typeof usersUsersUserIdRoute
  '/(services)/services/': typeof servicesServicesIndexRoute
  '/(services)/services/$serviceVersionId/edit': typeof servicesServicesServiceVersionIdEditRoute
  '/(services)/services/$serviceVersionId/': typeof servicesServicesServiceVersionIdIndexRoute
  '/(features)/services/$serviceVersionId/features/$featureVersionId': typeof featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute
  '/(features)/services/$serviceVersionId/features/create': typeof featuresServicesServiceVersionIdFeaturesCreateRoute
  '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/create': typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute
  '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values': typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/changesets/$changesetId'
    | '/services/create'
    | '/users/$userId'
    | '/services'
    | '/services/$serviceVersionId/edit'
    | '/services/$serviceVersionId'
    | '/services/$serviceVersionId/features/$featureVersionId'
    | '/services/$serviceVersionId/features/create'
    | '/services/$serviceVersionId/features/$featureVersionId/keys/create'
    | '/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/changesets/$changesetId'
    | '/services/create'
    | '/users/$userId'
    | '/services'
    | '/services/$serviceVersionId/edit'
    | '/services/$serviceVersionId'
    | '/services/$serviceVersionId/features/$featureVersionId'
    | '/services/$serviceVersionId/features/create'
    | '/services/$serviceVersionId/features/$featureVersionId/keys/create'
    | '/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/(changesets)/changesets/$changesetId'
    | '/(services)/services/create'
    | '/(users)/users/$userId'
    | '/(services)/services/'
    | '/(services)/services/$serviceVersionId/edit'
    | '/(services)/services/$serviceVersionId/'
    | '/(features)/services/$serviceVersionId/features/$featureVersionId'
    | '/(features)/services/$serviceVersionId/features/create'
    | '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/create'
    | '/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  changesetsChangesetsChangesetIdRoute: typeof changesetsChangesetsChangesetIdRoute
  servicesServicesCreateRoute: typeof servicesServicesCreateRoute
  usersUsersUserIdRoute: typeof usersUsersUserIdRoute
  servicesServicesIndexRoute: typeof servicesServicesIndexRoute
  servicesServicesServiceVersionIdEditRoute: typeof servicesServicesServiceVersionIdEditRoute
  servicesServicesServiceVersionIdIndexRoute: typeof servicesServicesServiceVersionIdIndexRoute
  featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute: typeof featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute
  featuresServicesServiceVersionIdFeaturesCreateRoute: typeof featuresServicesServiceVersionIdFeaturesCreateRoute
  keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute: typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute
  keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute: typeof keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  changesetsChangesetsChangesetIdRoute: changesetsChangesetsChangesetIdRoute,
  servicesServicesCreateRoute: servicesServicesCreateRoute,
  usersUsersUserIdRoute: usersUsersUserIdRoute,
  servicesServicesIndexRoute: servicesServicesIndexRoute,
  servicesServicesServiceVersionIdEditRoute:
    servicesServicesServiceVersionIdEditRoute,
  servicesServicesServiceVersionIdIndexRoute:
    servicesServicesServiceVersionIdIndexRoute,
  featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute:
    featuresServicesServiceVersionIdFeaturesFeatureVersionIdRoute,
  featuresServicesServiceVersionIdFeaturesCreateRoute:
    featuresServicesServiceVersionIdFeaturesCreateRoute,
  keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute:
    keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysCreateRoute,
  keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute:
    keysServicesServiceVersionIdFeaturesFeatureVersionIdKeysKeyIdValuesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/(changesets)/changesets/$changesetId",
        "/(services)/services/create",
        "/(users)/users/$userId",
        "/(services)/services/",
        "/(services)/services/$serviceVersionId/edit",
        "/(services)/services/$serviceVersionId/",
        "/(features)/services/$serviceVersionId/features/$featureVersionId",
        "/(features)/services/$serviceVersionId/features/create",
        "/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/create",
        "/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(changesets)/changesets/$changesetId": {
      "filePath": "(changesets)/changesets.$changesetId.tsx"
    },
    "/(services)/services/create": {
      "filePath": "(services)/services.create.tsx"
    },
    "/(users)/users/$userId": {
      "filePath": "(users)/users.$userId.tsx"
    },
    "/(services)/services/": {
      "filePath": "(services)/services.index.tsx"
    },
    "/(services)/services/$serviceVersionId/edit": {
      "filePath": "(services)/services.$serviceVersionId.edit.tsx"
    },
    "/(services)/services/$serviceVersionId/": {
      "filePath": "(services)/services.$serviceVersionId.index.tsx"
    },
    "/(features)/services/$serviceVersionId/features/$featureVersionId": {
      "filePath": "(features)/services.$serviceVersionId.features.$featureVersionId.tsx"
    },
    "/(features)/services/$serviceVersionId/features/create": {
      "filePath": "(features)/services.$serviceVersionId.features.create.tsx"
    },
    "/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/create": {
      "filePath": "(keys)/services.$serviceVersionId.features.$featureVersionId.keys.create.tsx"
    },
    "/(keys)/services/$serviceVersionId/features/$featureVersionId/keys/$keyId/values": {
      "filePath": "(keys)/services.$serviceVersionId.features.$featureVersionId.keys.$keyId.values.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
